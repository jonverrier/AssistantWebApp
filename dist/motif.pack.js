"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined") return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all3) => {
    for (var name in all3)
      __defProp(target, name, { get: all3[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.3.1";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign2 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component2(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component2.prototype.isReactComponent = {};
          Component2.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component2.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component2.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component2.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign2(pureComponentPrototype, Component2.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef3() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement12(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement2(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign2({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement5(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape2(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape2("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray2(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement5(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray2(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray2(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement5(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext25(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef19(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare) {
            {
              if (!isValidElementType2(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext23(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState12(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer2(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef15(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect14(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect5(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect6(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback8(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo12(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId3() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component3) {
            var prototype3 = Component3.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray2(node2)) {
              for (var i = 0; i < node2.length; i++) {
                var child = node2[i];
                if (isValidElement5(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement5(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement5(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType2(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray2(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement12.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement2.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children4 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray2,
            only: onlyChild
          };
          exports.Children = Children4;
          exports.Component = Component2;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.act = act;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext25;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef3;
          exports.forwardRef = forwardRef19;
          exports.isValidElement = isValidElement5;
          exports.lazy = lazy;
          exports.memo = memo2;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback8;
          exports.useContext = useContext23;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect14;
          exports.useId = useId3;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect5;
          exports.useLayoutEffect = useLayoutEffect6;
          exports.useMemo = useMemo12;
          exports.useReducer = useReducer2;
          exports.useRef = useRef15;
          exports.useState = useState12;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/react-dom/node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/react-dom/node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node2) {
            var index = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index);
          }
          function peek2(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node2, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i) {
            var index = i;
            var length2 = heap.length;
            var halfLength = length2 >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node2) < 0) {
                if (rightIndex < length2 && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node2;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node2;
                  index = leftIndex;
                }
              } else if (rightIndex < length2 && compare(right, node2) < 0) {
                heap[index] = right;
                heap[rightIndex] = node2;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority2 = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority2;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority2:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority2;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority2:
                priorityLevel = NormalPriority2;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority2:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority2;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/react-dom/node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React100 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React100.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment7 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = true;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM3 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              // $FlowIssue symbol is perfectly valid here
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node2, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node2[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node2.hasAttribute(attributeName)) {
                    var value = node2.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node2.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node2.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node2.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node2.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node2.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node2, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node2.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node2.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node2[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node2[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node2.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node2.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype3 = Component2.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node2 = workInProgress2;
              do {
                info += describeFiber(node2);
                node2 = node2.return;
              } while (node2);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment7:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              // The display name for this tags come from the user-provided type:
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString3(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node2) {
            return node2._valueTracker;
          }
          function detachTracker(node2) {
            node2._valueTracker = null;
          }
          function getValueFromNode(node2) {
            var value = "";
            if (!node2) {
              return value;
            }
            if (isCheckable(node2)) {
              value = node2.checked ? "true" : "false";
            } else {
              value = node2.value;
            }
            return value;
          }
          function trackValueOnNode(node2) {
            var valueField = isCheckable(node2) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node2[valueField]);
            }
            var currentValue = "" + node2[valueField];
            if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node2);
                delete node2[valueField];
              }
            };
            return tracker;
          }
          function track(node2) {
            if (getTracker(node2)) {
              return;
            }
            node2._valueTracker = trackValueOnNode(node2);
          }
          function updateValueIfChanged(node2) {
            if (!node2) {
              return false;
            }
            var tracker = getTracker(node2);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node2);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node2 = element;
            var checked = props.checked;
            var hostProps = assign2({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node2._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node2 = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node2._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node2 = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node2, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node2 = element;
            {
              var controlled = isControlled(props);
              if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node2.value != value) {
                  node2.value = toString3(value);
                }
              } else if (node2.value !== toString3(value)) {
                node2.value = toString3(value);
              }
            } else if (type === "submit" || type === "reset") {
              node2.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node2, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node2.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node2 = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString3(node2._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node2.value) {
                    node2.value = initialValue;
                  }
                }
              }
              {
                node2.defaultValue = initialValue;
              }
            }
            var name = node2.name;
            if (name !== "") {
              node2.name = "";
            }
            {
              node2.defaultChecked = !node2.defaultChecked;
              node2.defaultChecked = !!node2._wrapperState.initialChecked;
            }
            if (name !== "") {
              node2.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node2 = element;
            updateWrapper(node2, props);
            updateNamedCousins(node2, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node2, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node2.ownerDocument) !== node2
            ) {
              if (value == null) {
                node2.defaultValue = toString3(node2._wrapperState.initialValue);
              } else if (node2.defaultValue !== toString3(value)) {
                node2.defaultValue = toString3(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React100.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString3(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray2(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node2, multiple, propValue, setDefaultSelected) {
            var options2 = node2.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString3(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign2({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node2 = element;
            {
              checkSelectPropTypes(props);
            }
            node2._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node2 = element;
            node2.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node2 = element;
            var wasMultiple = node2._wrapperState.wasMultiple;
            node2._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node2, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node2 = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node2 = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign2({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString3(node2._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node2 = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray2(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node2._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node2 = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString3(value);
              if (newValue !== node2.value) {
                node2.value = newValue;
              }
              if (props.defaultValue == null && node2.defaultValue !== newValue) {
                node2.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node2.defaultValue = toString3(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node2 = element;
            var textContent = node2.textContent;
            if (textContent === node2._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node2.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html) {
            if (node2.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node2)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node2.firstChild) {
                  node2.removeChild(node2.firstChild);
                }
                while (svgNode.firstChild) {
                  node2.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node2.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node2, text) {
            if (text) {
              var firstChild = node2.firstChild;
              if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node2.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern2 = /([A-Z])/g;
          var msPattern2 = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern2, "-$1").toLowerCase().replace(msPattern2, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter2 = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter2 + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter2 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node2, styles) {
            var style2 = node2.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign2({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              // These are reserved SVG and MathML elements.
              // We don't mind this list too much because we expect it to never grow.
              // The alternative is to track the namespace in a few places which is convoluted.
              // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl2 = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl2();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl2 = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM3) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node2 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node2;
              do {
                node2 = nextNode;
                if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node2.return;
                }
                nextNode = node2.return;
              } while (nextNode);
            } else {
              while (node2.return) {
                node2 = node2.return;
              }
            }
            if (node2.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority2 = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign2({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority2;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority2;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority2(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              // Used by SimpleEventPlugin:
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              // Used by polyfills:
              // eslint-disable-next-line no-fallthrough
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              // Only enableCreateEventHandleAPI:
              // eslint-disable-next-line no-fallthrough
              case "beforeblur":
              case "afterblur":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority2:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign2(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign2({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign2({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign2({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign2({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign2({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign2({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign2({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign2({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign2({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign2({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign2({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign2({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM3 && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM3 && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM3 && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM3 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM3) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM3) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node2) {
            var state = node2._wrapperState;
            if (!state || !state.controlled || node2.type !== "number") {
              return;
            }
            {
              setDefaultValue(node2, "number", node2.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win : getNodeFromInstance(from2);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node2) {
            while (node2 && node2.firstChild) {
              node2 = node2.firstChild;
            }
            return node2;
          }
          function getSiblingNode(node2) {
            while (node2) {
              if (node2.nextSibling) {
                return node2.nextSibling;
              }
              node2 = node2.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node2 = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node2) {
              if (node2.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node2.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node: node2,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node2 = getLeafNode(getSiblingNode(node2));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node2 = outerNode;
            var parentNode = null;
            outer: while (true) {
              var next2 = null;
              while (true) {
                if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                  start = length2 + anchorOffset;
                }
                if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                  end = length2 + focusOffset;
                }
                if (node2.nodeType === TEXT_NODE) {
                  length2 += node2.nodeValue.length;
                }
                if ((next2 = node2.firstChild) === null) {
                  break;
                }
                parentNode = node2;
                node2 = next2;
              }
              while (true) {
                if (node2 === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length2;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length2;
                }
                if ((next2 = node2.nextSibling) !== null) {
                  break;
                }
                node2 = parentNode;
                parentNode = node2.parentNode;
              }
              node2 = next2;
            }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node2, offsets) {
            var doc = node2.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length2 = node2.textContent.length;
            var start = Math.min(offsets.start, length2);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length2);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node2, start);
            var endMarker = getNodeForCharacterOffset(node2, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node2) {
            return node2 && node2.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node2) {
            return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM3 && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node2) {
            if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
              return {
                start: node2.selectionStart,
                end: node2.selectionEnd
              };
            } else {
              var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              // Track the input node that has focus.
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              // Don't fire the event while the user is dragging. This matches the
              // semantics of the native select event.
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              // Chrome and IE fire non-standard event when selection is changed (and
              // sometimes when it hasn't). IE's event fires out of order with respect
              // to key and input events on deletion, so we discard it.
              //
              // Firefox doesn't support selectionchange, so check selection status
              // after each key entry. The selection changes after keydown and before
              // keyup, but we check on keydown as well in the case of holding down a
              // key, when multiple keydown events are fired but only one keyup is.
              // This is also our approach for IE handling, for the reason above.
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              // falls through
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM3) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              /* falls through */
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              /* falls through */
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              // TODO: Disabled elements should not respond to mouse events
              /* falls through */
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node2 = targetInst;
                mainLoop: while (true) {
                  if (node2 === null) {
                    return;
                  }
                  var nodeTag = node2.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node2.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node2.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node2 = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node2 = node2.return;
                }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent2(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent2(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent2(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent2(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent2(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent2(nodeA);
              nodeB = getParent2(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM3 && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop5() {
          }
          function trapClickOnNonInteractiveElement(node2) {
            node2.onclick = noop5;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement12(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node2 = domElement;
                  if (props.multiple) {
                    node2.multiple = true;
                  } else if (props.size) {
                    node2.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                // but
                case "option":
                  return tag === "#text";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                // No special behavior since these rules fall back to "in body" mode for
                // all except special table nodes which cause bad parsing behavior anyway.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                case "colgroup":
                  return tag === "col" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace2;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace2 = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace2 = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace: namespace2,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace2 = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace: namespace2,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance2(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement12(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node2 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node2.nextSibling;
              parentInstance.removeChild(node2);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node2 = nextNode;
            } while (node2);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node2) {
            for (; node2 != null; node2 = node2.nextSibling) {
              var nodeType = node2.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node2.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node2;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node2 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node2);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node2 = node2.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node2 = targetInstance.previousSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node2;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node2 = node2.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node2) {
            delete node2[internalInstanceKey];
            delete node2[internalPropsKey];
            delete node2[internalEventHandlersKey];
            delete node2[internalEventHandlerListenersKey];
            delete node2[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node2) {
            node2[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node2) {
            node2[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node2) {
            node2[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node2) {
            return !!node2[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node2) {
            var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node2) {
            return node2[internalPropsKey] || null;
          }
          function updateFiberProps(node2, props) {
            node2[internalPropsKey] = props;
          }
          function getEventListenerSet(node2) {
            var elementListenerSet = node2[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign2({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node2 = fiber;
              do {
                switch (node2.tag) {
                  case HostRoot:
                    return node2.stateNode.context;
                  case ClassComponent: {
                    var Component2 = node2.type;
                    if (isContextProvider(Component2)) {
                      return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node2 = node2.return;
              } while (node2 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow2 = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow2;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length2 = getBitLength(totalChildren) + baseLength;
            if (length2 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow2 = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow2;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length2 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null) switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node2 = fiber;
              while (node2 !== null) {
                if (node2.mode & StrictLegacyMode) {
                  maybeStrictRoot = node2;
                }
                node2 = node2.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function isReactClass(type) {
            return type.prototype && type.prototype.isReactComponent;
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment7) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment7) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray2(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node2 = parent;
            while (node2 !== null) {
              var alternate = node2.alternate;
              if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node2 === propagationRoot) {
                break;
              }
              node2 = node2.return;
            }
            {
              if (node2 !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null) ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context) ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node2 = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node2 = parent;
              parent = parent.return;
            }
            if (node2.tag === HostRoot) {
              var root2 = node2.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              // Intentional fallthrough
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign2({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node2 = row;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node2;
                  }
                }
              } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node2.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node2;
                }
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === row) {
                return null;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === row) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray2(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component2(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component2(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function resolveDefaultProps(Component2, baseProps) {
            if (Component2 && Component2.defaultProps) {
              var props = assign2({}, baseProps);
              var defaultProps2 = Component2.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var fakeInternalInstance = {};
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          var didWarnAboutLegacyContext$1;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError2 = showErrorDialog(boundary, errorInfo);
              if (logError2 === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node2 = returnFiber;
            do {
              if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
                return node2;
              }
              node2 = node2.return;
            } while (node2 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          var didWarnAboutDefaultPropsOnFunctionComponent;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
            didWarnAboutDefaultPropsOnFunctionComponent = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var render2 = Component2.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component2.type;
              if (isSimpleFunctionComponent(type) && Component2.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component2.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
                if (Component2.defaultProps !== void 0) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                    error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                  }
                }
              }
              var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component2.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component2.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component2, nextProps);
              mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component2, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node2 = child;
                while (node2) {
                  node2.flags = node2.flags & ~Placement | Hydrating;
                  node2 = node2.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component2 = init(payload);
            workInProgress2.type = Component2;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
            var resolvedProps = resolveDefaultProps(Component2, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component2);
                  workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
                }
                child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
                }
                child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
                }
                child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component2)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component2,
                  resolveDefaultProps(Component2.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component2.prototype && typeof Component2.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component2)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component2, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component2) {
            {
              if (Component2) {
                if (Component2.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (Component2.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component2.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node2 = firstChild;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                }
              } else if (node2.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray2(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray2(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component2 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment7:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node2 = workInProgress2.child;
              while (node2 !== null) {
                if (node2.tag === HostComponent || node2.tag === HostText) {
                  appendInitialChild(parent, node2.stateNode);
                } else if (node2.tag === HostPortal) ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === workInProgress2) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === workInProgress2) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment7:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance2(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.renderingStartTime = now();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer: while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node2) {
            switch (node2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                  } finally {
                    recordLayoutEffectDuration(node2);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node2.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node2, node2.return, instance);
                }
                safelyAttachRef(node2, node2.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node2, node2.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node2 = finishedWork;
              while (true) {
                if (node2.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node2;
                    try {
                      var instance = node2.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node2.stateNode, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node2.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node2.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork) ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === finishedWork) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node2) {
                    hostSubtreeRoot = null;
                  }
                  node2 = node2.return;
                }
                if (hostSubtreeRoot === node2) {
                  hostSubtreeRoot = null;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node2 = fiber;
            siblings: while (true) {
              while (node2.sibling === null) {
                if (node2.return === null || isHostParent(node2.return)) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
              while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                if (node2.flags & Placement) {
                  continue siblings;
                }
                if (node2.child === null || node2.tag === HostPortal) {
                  continue siblings;
                } else {
                  node2.child.return = node2;
                  node2 = node2.child;
                }
              }
              if (!(node2.flags & Placement)) {
                return node2.stateNode;
              }
            }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              // eslint-disable-next-line-no-fallthrough
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent: while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              // eslint-disable-next-line-no-fallthrough
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition3 = ReactCurrentBatchConfig$3.transition;
                if (!transition3._updatedFibers) {
                  transition3._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition3._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority2;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority2;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              // Flow knows about invariant, so it complains if I add a break
              // statement, but eslint doesn't know about invariant, so it complains
              // if I do. eslint-disable-next-line no-fallthrough
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node2 = finishedWork;
            while (true) {
              if (node2.flags & StoreConsistency) {
                var updateQueue = node2.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node2.child;
              if (node2.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node2;
                node2 = child;
                continue;
              }
              if (node2 === finishedWork) {
                return true;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return true;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority2, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority2, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node2 = fiber;
              while (true) {
                switch (node2.tag) {
                  case HostComponent:
                    hostInstances.add(node2.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                }
                if (node2.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node2 = node2.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node2 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node2.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node2.stateNode);
                } else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === fiber) {
                  return foundHostInstances;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === fiber) {
                    return foundHostInstances;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component2) {
            var prototype3 = Component2.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component2) {
            if (typeof Component2 === "function") {
              return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
            } else if (Component2 !== void 0 && Component2 !== null) {
              var $$typeof = Component2.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_SCOPE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_CACHE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_TRACING_MARKER_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_DEBUG_TRACING_MODE_TYPE:
                // eslint-disable-next-line no-fallthrough
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment7, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.3.1";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component2 = fiber.type;
              if (isContextProvider(Component2)) {
                return processChildContext(fiber, Component2, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray2(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray2(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          var didWarnAboutFindDOMNode = false;
          function findDOMNode(componentOrElement) {
            {
              if (!didWarnAboutFindDOMNode) {
                didWarnAboutFindDOMNode = true;
                error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
              }
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          var didWarnAboutUnmountComponentAtNode = false;
          function unmountComponentAtNode(container) {
            {
              if (!didWarnAboutUnmountComponentAtNode) {
                didWarnAboutUnmountComponentAtNode = true;
                error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
              }
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority2);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM3 && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // src/MultilineEditUIStrings.ts
  var init_MultilineEditUIStrings = __esm({
    "src/MultilineEditUIStrings.ts"() {
      "use strict";
    }
  });

  // src/UIStrings.ts
  function getUIStrings(mode) {
    switch (mode) {
      case "yardtalk" /* kYardTalk */:
        return UIStrings;
      default:
        return UIStrings;
    }
  }
  var CommonUIStrings, TheYardUIStrings, UIStrings;
  var init_UIStrings = __esm({
    "src/UIStrings.ts"() {
      "use strict";
      init_MultilineEditUIStrings();
      CommonUIStrings = {
        kWarning: "Warning:",
        kInfo: "Information:",
        kError: "Error:",
        kSuccess: "Success:",
        kServerErrorDescription: "Sorry, we could not get a response from the server, Please try again later.",
        kHome: "Home",
        kPrivacyTitle: "Privacy Policy",
        kTermsTitle: "Terms of Service",
        kPrivacy: "Privacy",
        kTerms: "Terms",
        kAIWarning: "AI can make mistakes. Think about it."
      };
      TheYardUIStrings = {
        kAppPageCaption: "Yard Talk",
        kAppPageStrapline: "Where sweat meets sass.",
        kOverview: "The Yard Peckham is proudly the home of CrossFit Peckham. Above all else, we are committed to the improvement of human life and dedicated to offering high quality coaching in an environment that will help you achieve your health, fitness and performance goals. We hope our Yard Talk AI will help along the way. Enjoy.",
        kLinks: "[CrossFit main site](https://www.crossfit.com/), [The Yard](https://www.theyardpeckham.com/)",
        kChatPreamble: "Chat to the Yard Talk AI by typing your question in the box below. Don't share private information.",
        kChatPlaceholder: "Talk to me about fitness...",
        kLooksOffTopic: "Sorry, that looks off-topic. I just talk about fitness. Please try again."
      };
      UIStrings = {
        ...CommonUIStrings,
        ...TheYardUIStrings
      };
    }
  });

  // node_modules/@remix-run/router/dist/router.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function createBrowserHistory(options) {
    if (options === void 0) {
      options = {};
    }
    function createBrowserLocation(window2, globalHistory) {
      let {
        pathname,
        search,
        hash: hash2
      } = window2.location;
      return createLocation(
        "",
        {
          pathname,
          search,
          hash: hash2
        },
        // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null,
        globalHistory.state && globalHistory.state.key || "default"
      );
    }
    function createBrowserHref(window2, to) {
      return typeof to === "string" ? to : createPath(to);
    }
    return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
  }
  function invariant(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  function warning(cond, message) {
    if (!cond) {
      if (typeof console !== "undefined") console.warn(message);
      try {
        throw new Error(message);
      } catch (e) {
      }
    }
  }
  function createKey() {
    return Math.random().toString(36).substr(2, 8);
  }
  function getHistoryState(location, index) {
    return {
      usr: location.state,
      key: location.key,
      idx: index
    };
  }
  function createLocation(current, to, state, key) {
    if (state === void 0) {
      state = null;
    }
    let location = _extends({
      pathname: typeof current === "string" ? current : current.pathname,
      search: "",
      hash: ""
    }, typeof to === "string" ? parsePath(to) : to, {
      state,
      // TODO: This could be cleaned up.  push/replace should probably just take
      // full Locations now and avoid the need to run through this flow at all
      // But that's a pretty big refactor to the current test suite so going to
      // keep as is for the time being and just let any incoming keys take precedence
      key: to && to.key || key || createKey()
    });
    return location;
  }
  function createPath(_ref) {
    let {
      pathname = "/",
      search = "",
      hash: hash2 = ""
    } = _ref;
    if (search && search !== "?") pathname += search.charAt(0) === "?" ? search : "?" + search;
    if (hash2 && hash2 !== "#") pathname += hash2.charAt(0) === "#" ? hash2 : "#" + hash2;
    return pathname;
  }
  function parsePath(path) {
    let parsedPath = {};
    if (path) {
      let hashIndex = path.indexOf("#");
      if (hashIndex >= 0) {
        parsedPath.hash = path.substr(hashIndex);
        path = path.substr(0, hashIndex);
      }
      let searchIndex = path.indexOf("?");
      if (searchIndex >= 0) {
        parsedPath.search = path.substr(searchIndex);
        path = path.substr(0, searchIndex);
      }
      if (path) {
        parsedPath.pathname = path;
      }
    }
    return parsedPath;
  }
  function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
    if (options === void 0) {
      options = {};
    }
    let {
      window: window2 = document.defaultView,
      v5Compat = false
    } = options;
    let globalHistory = window2.history;
    let action = Action.Pop;
    let listener = null;
    let index = getIndex();
    if (index == null) {
      index = 0;
      globalHistory.replaceState(_extends({}, globalHistory.state, {
        idx: index
      }), "");
    }
    function getIndex() {
      let state = globalHistory.state || {
        idx: null
      };
      return state.idx;
    }
    function handlePop() {
      action = Action.Pop;
      let nextIndex = getIndex();
      let delta = nextIndex == null ? null : nextIndex - index;
      index = nextIndex;
      if (listener) {
        listener({
          action,
          location: history.location,
          delta
        });
      }
    }
    function push(to, state) {
      action = Action.Push;
      let location = createLocation(history.location, to, state);
      if (validateLocation) validateLocation(location, to);
      index = getIndex() + 1;
      let historyState = getHistoryState(location, index);
      let url = history.createHref(location);
      try {
        globalHistory.pushState(historyState, "", url);
      } catch (error) {
        if (error instanceof DOMException && error.name === "DataCloneError") {
          throw error;
        }
        window2.location.assign(url);
      }
      if (v5Compat && listener) {
        listener({
          action,
          location: history.location,
          delta: 1
        });
      }
    }
    function replace3(to, state) {
      action = Action.Replace;
      let location = createLocation(history.location, to, state);
      if (validateLocation) validateLocation(location, to);
      index = getIndex();
      let historyState = getHistoryState(location, index);
      let url = history.createHref(location);
      globalHistory.replaceState(historyState, "", url);
      if (v5Compat && listener) {
        listener({
          action,
          location: history.location,
          delta: 0
        });
      }
    }
    function createURL(to) {
      let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
      let href = typeof to === "string" ? to : createPath(to);
      href = href.replace(/ $/, "%20");
      invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);
      return new URL(href, base);
    }
    let history = {
      get action() {
        return action;
      },
      get location() {
        return getLocation(window2, globalHistory);
      },
      listen(fn) {
        if (listener) {
          throw new Error("A history only accepts one active listener");
        }
        window2.addEventListener(PopStateEventType, handlePop);
        listener = fn;
        return () => {
          window2.removeEventListener(PopStateEventType, handlePop);
          listener = null;
        };
      },
      createHref(to) {
        return createHref(window2, to);
      },
      createURL,
      encodeLocation(to) {
        let url = createURL(to);
        return {
          pathname: url.pathname,
          search: url.search,
          hash: url.hash
        };
      },
      push,
      replace: replace3,
      go(n) {
        return globalHistory.go(n);
      }
    };
    return history;
  }
  function matchRoutes(routes, locationArg, basename) {
    if (basename === void 0) {
      basename = "/";
    }
    return matchRoutesImpl(routes, locationArg, basename, false);
  }
  function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
    let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    let pathname = stripBasename(location.pathname || "/", basename);
    if (pathname == null) {
      return null;
    }
    let branches = flattenRoutes(routes);
    rankRouteBranches(branches);
    let matches = null;
    for (let i = 0; matches == null && i < branches.length; ++i) {
      let decoded = decodePath(pathname);
      matches = matchRouteBranch(branches[i], decoded, allowPartial);
    }
    return matches;
  }
  function convertRouteMatchToUiMatch(match2, loaderData) {
    let {
      route,
      pathname,
      params
    } = match2;
    return {
      id: route.id,
      pathname,
      params,
      data: loaderData[route.id],
      handle: route.handle
    };
  }
  function flattenRoutes(routes, branches, parentsMeta, parentPath) {
    if (branches === void 0) {
      branches = [];
    }
    if (parentsMeta === void 0) {
      parentsMeta = [];
    }
    if (parentPath === void 0) {
      parentPath = "";
    }
    let flattenRoute = (route, index, relativePath) => {
      let meta = {
        relativePath: relativePath === void 0 ? route.path || "" : relativePath,
        caseSensitive: route.caseSensitive === true,
        childrenIndex: index,
        route
      };
      if (meta.relativePath.startsWith("/")) {
        invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
        meta.relativePath = meta.relativePath.slice(parentPath.length);
      }
      let path = joinPaths([parentPath, meta.relativePath]);
      let routesMeta = parentsMeta.concat(meta);
      if (route.children && route.children.length > 0) {
        invariant(
          // Our types know better, but runtime JS may not!
          // @ts-expect-error
          route.index !== true,
          "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
        );
        flattenRoutes(route.children, branches, routesMeta, path);
      }
      if (route.path == null && !route.index) {
        return;
      }
      branches.push({
        path,
        score: computeScore(path, route.index),
        routesMeta
      });
    };
    routes.forEach((route, index) => {
      var _route$path;
      if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
        flattenRoute(route, index);
      } else {
        for (let exploded of explodeOptionalSegments(route.path)) {
          flattenRoute(route, index, exploded);
        }
      }
    });
    return branches;
  }
  function explodeOptionalSegments(path) {
    let segments = path.split("/");
    if (segments.length === 0) return [];
    let [first, ...rest] = segments;
    let isOptional = first.endsWith("?");
    let required = first.replace(/\?$/, "");
    if (rest.length === 0) {
      return isOptional ? [required, ""] : [required];
    }
    let restExploded = explodeOptionalSegments(rest.join("/"));
    let result = [];
    result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
    if (isOptional) {
      result.push(...restExploded);
    }
    return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
  }
  function rankRouteBranches(branches) {
    branches.sort((a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b.routesMeta.map((meta) => meta.childrenIndex)));
  }
  function computeScore(path, index) {
    let segments = path.split("/");
    let initialScore = segments.length;
    if (segments.some(isSplat)) {
      initialScore += splatPenalty;
    }
    if (index) {
      initialScore += indexRouteValue;
    }
    return segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
  }
  function compareIndexes(a, b) {
    let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
    return siblings ? (
      // If two routes are siblings, we should try to match the earlier sibling
      // first. This allows people to have fine-grained control over the matching
      // behavior by simply putting routes with identical paths in the order they
      // want them tried.
      a[a.length - 1] - b[b.length - 1]
    ) : (
      // Otherwise, it doesn't really make sense to rank non-siblings by index,
      // so they sort equally.
      0
    );
  }
  function matchRouteBranch(branch, pathname, allowPartial) {
    if (allowPartial === void 0) {
      allowPartial = false;
    }
    let {
      routesMeta
    } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches = [];
    for (let i = 0; i < routesMeta.length; ++i) {
      let meta = routesMeta[i];
      let end = i === routesMeta.length - 1;
      let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
      let match2 = matchPath({
        path: meta.relativePath,
        caseSensitive: meta.caseSensitive,
        end
      }, remainingPathname);
      let route = meta.route;
      if (!match2 && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
        match2 = matchPath({
          path: meta.relativePath,
          caseSensitive: meta.caseSensitive,
          end: false
        }, remainingPathname);
      }
      if (!match2) {
        return null;
      }
      Object.assign(matchedParams, match2.params);
      matches.push({
        // TODO: Can this as be avoided?
        params: matchedParams,
        pathname: joinPaths([matchedPathname, match2.pathname]),
        pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
        route
      });
      if (match2.pathnameBase !== "/") {
        matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]);
      }
    }
    return matches;
  }
  function matchPath(pattern, pathname) {
    if (typeof pattern === "string") {
      pattern = {
        path: pattern,
        caseSensitive: false,
        end: true
      };
    }
    let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
    let match2 = pathname.match(matcher);
    if (!match2) return null;
    let matchedPathname = match2[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match2.slice(1);
    let params = compiledParams.reduce((memo2, _ref, index) => {
      let {
        paramName,
        isOptional
      } = _ref;
      if (paramName === "*") {
        let splatValue = captureGroups[index] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      const value = captureGroups[index];
      if (isOptional && !value) {
        memo2[paramName] = void 0;
      } else {
        memo2[paramName] = (value || "").replace(/%2F/g, "/");
      }
      return memo2;
    }, {});
    return {
      params,
      pathname: matchedPathname,
      pathnameBase,
      pattern
    };
  }
  function compilePath(path, caseSensitive, end) {
    if (caseSensitive === void 0) {
      caseSensitive = false;
    }
    if (end === void 0) {
      end = true;
    }
    warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
    let params = [];
    let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional) => {
      params.push({
        paramName,
        isOptional: isOptional != null
      });
      return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
    });
    if (path.endsWith("*")) {
      params.push({
        paramName: "*"
      });
      regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
    } else if (end) {
      regexpSource += "\\/*$";
    } else if (path !== "" && path !== "/") {
      regexpSource += "(?:(?=\\/|$))";
    } else ;
    let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
    return [matcher, params];
  }
  function decodePath(value) {
    try {
      return value.split("/").map((v) => decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
    } catch (error) {
      warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
      return value;
    }
  }
  function stripBasename(pathname, basename) {
    if (basename === "/") return pathname;
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
      return null;
    }
    let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") {
      return null;
    }
    return pathname.slice(startIndex) || "/";
  }
  function resolvePath(to, fromPathname) {
    if (fromPathname === void 0) {
      fromPathname = "/";
    }
    let {
      pathname: toPathname,
      search = "",
      hash: hash2 = ""
    } = typeof to === "string" ? parsePath(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
      pathname,
      search: normalizeSearch(search),
      hash: normalizeHash(hash2)
    };
  }
  function resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment) => {
      if (segment === "..") {
        if (segments.length > 1) segments.pop();
      } else if (segment !== ".") {
        segments.push(segment);
      }
    });
    return segments.length > 1 ? segments.join("/") : "/";
  }
  function getInvalidPathError(char2, field, dest, path) {
    return "Cannot include a '" + char2 + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
  }
  function getPathContributingMatches(matches) {
    return matches.filter((match2, index) => index === 0 || match2.route.path && match2.route.path.length > 0);
  }
  function getResolveToMatches(matches, v7_relativeSplatPath) {
    let pathMatches = getPathContributingMatches(matches);
    if (v7_relativeSplatPath) {
      return pathMatches.map((match2, idx) => idx === pathMatches.length - 1 ? match2.pathname : match2.pathnameBase);
    }
    return pathMatches.map((match2) => match2.pathnameBase);
  }
  function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
    if (isPathRelative === void 0) {
      isPathRelative = false;
    }
    let to;
    if (typeof toArg === "string") {
      to = parsePath(toArg);
    } else {
      to = _extends({}, toArg);
      invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
      invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
      invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from2;
    if (toPathname == null) {
      from2 = locationPathname;
    } else {
      let routePathnameIndex = routePathnames.length - 1;
      if (!isPathRelative && toPathname.startsWith("..")) {
        let toSegments = toPathname.split("/");
        while (toSegments[0] === "..") {
          toSegments.shift();
          routePathnameIndex -= 1;
        }
        to.pathname = toSegments.join("/");
      }
      from2 = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path = resolvePath(to, from2);
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
      path.pathname += "/";
    }
    return path;
  }
  function isRouteErrorResponse(error) {
    return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
  }
  var Action, PopStateEventType, ResultType, paramRe, dynamicSegmentValue, indexRouteValue, emptySegmentValue, staticSegmentValue, splatPenalty, isSplat, joinPaths, normalizePathname, normalizeSearch, normalizeHash, validMutationMethodsArr, validMutationMethods, validRequestMethodsArr, validRequestMethods, UNSAFE_DEFERRED_SYMBOL;
  var init_router = __esm({
    "node_modules/@remix-run/router/dist/router.js"() {
      (function(Action2) {
        Action2["Pop"] = "POP";
        Action2["Push"] = "PUSH";
        Action2["Replace"] = "REPLACE";
      })(Action || (Action = {}));
      PopStateEventType = "popstate";
      (function(ResultType2) {
        ResultType2["data"] = "data";
        ResultType2["deferred"] = "deferred";
        ResultType2["redirect"] = "redirect";
        ResultType2["error"] = "error";
      })(ResultType || (ResultType = {}));
      paramRe = /^:[\w-]+$/;
      dynamicSegmentValue = 3;
      indexRouteValue = 2;
      emptySegmentValue = 1;
      staticSegmentValue = 10;
      splatPenalty = -2;
      isSplat = (s) => s === "*";
      joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
      normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
      normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
      normalizeHash = (hash2) => !hash2 || hash2 === "#" ? "" : hash2.startsWith("#") ? hash2 : "#" + hash2;
      validMutationMethodsArr = ["post", "put", "patch", "delete"];
      validMutationMethods = new Set(validMutationMethodsArr);
      validRequestMethodsArr = ["get", ...validMutationMethodsArr];
      validRequestMethods = new Set(validRequestMethodsArr);
      UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");
    }
  });

  // node_modules/react-router/dist/index.js
  function _extends2() {
    _extends2 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  function useHref(to, _temp) {
    let {
      relative
    } = _temp === void 0 ? {} : _temp;
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useHref() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      basename,
      navigator: navigator2
    } = React.useContext(NavigationContext);
    let {
      hash: hash2,
      pathname,
      search
    } = useResolvedPath(to, {
      relative
    });
    let joinedPathname = pathname;
    if (basename !== "/") {
      joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
    }
    return navigator2.createHref({
      pathname: joinedPathname,
      search,
      hash: hash2
    });
  }
  function useInRouterContext() {
    return React.useContext(LocationContext) != null;
  }
  function useLocation() {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useLocation() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    return React.useContext(LocationContext).location;
  }
  function useIsomorphicLayoutEffect(cb) {
    let isStatic = React.useContext(NavigationContext).static;
    if (!isStatic) {
      React.useLayoutEffect(cb);
    }
  }
  function useNavigate() {
    let {
      isDataRoute
    } = React.useContext(RouteContext);
    return isDataRoute ? useNavigateStable() : useNavigateUnstable();
  }
  function useNavigateUnstable() {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useNavigate() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let dataRouterContext = React.useContext(DataRouterContext);
    let {
      basename,
      future,
      navigator: navigator2
    } = React.useContext(NavigationContext);
    let {
      matches
    } = React.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
    let activeRef = React.useRef(false);
    useIsomorphicLayoutEffect(() => {
      activeRef.current = true;
    });
    let navigate = React.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current) return;
      if (typeof to === "number") {
        navigator2.go(to);
        return;
      }
      let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
      if (dataRouterContext == null && basename !== "/") {
        path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
      }
      (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
    }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
    return navigate;
  }
  function useResolvedPath(to, _temp2) {
    let {
      relative
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      future
    } = React.useContext(NavigationContext);
    let {
      matches
    } = React.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
    return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
  }
  function useRoutes(routes, locationArg) {
    return useRoutesImpl(routes, locationArg);
  }
  function useRoutesImpl(routes, locationArg, dataRouterState, future) {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useRoutes() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      navigator: navigator2,
      static: isStatic
    } = React.useContext(NavigationContext);
    let {
      matches: parentMatches
    } = React.useContext(RouteContext);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    if (true) {
      let parentPath = parentRoute && parentRoute.path || "";
      warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
    }
    let locationFromContext = useLocation();
    let location;
    if (locationArg) {
      var _parsedLocationArg$pa;
      let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? true ? invariant(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')) : invariant(false) : void 0;
      location = parsedLocationArg;
    } else {
      location = locationFromContext;
    }
    let pathname = location.pathname || "/";
    let remainingPathname = pathname;
    if (parentPathnameBase !== "/") {
      let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
      let segments = pathname.replace(/^\//, "").split("/");
      remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
    }
    let matches = !isStatic && dataRouterState && dataRouterState.matches && dataRouterState.matches.length > 0 ? dataRouterState.matches : matchRoutes(routes, {
      pathname: remainingPathname
    });
    if (true) {
      true ? warning(parentRoute || matches != null, 'No routes matched location "' + location.pathname + location.search + location.hash + '" ') : void 0;
      true ? warning(matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0, 'Matched leaf route at location "' + location.pathname + location.search + location.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.') : void 0;
    }
    let renderedMatches = _renderMatches(matches && matches.map((match2) => Object.assign({}, match2, {
      params: Object.assign({}, parentParams, match2.params),
      pathname: joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathname).pathname : match2.pathname
      ]),
      pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
      ])
    })), parentMatches, dataRouterState, future);
    if (locationArg && renderedMatches) {
      return /* @__PURE__ */ React.createElement(LocationContext.Provider, {
        value: {
          location: _extends2({
            pathname: "/",
            search: "",
            hash: "",
            state: null,
            key: "default"
          }, location),
          navigationType: Action.Pop
        }
      }, renderedMatches);
    }
    return renderedMatches;
  }
  function DefaultErrorComponent() {
    let error = useRouteError();
    let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
    let stack = error instanceof Error ? error.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = {
      padding: "0.5rem",
      backgroundColor: lightgrey
    };
    let codeStyles = {
      padding: "2px 4px",
      backgroundColor: lightgrey
    };
    let devInfo = null;
    if (true) {
      console.error("Error handled by React Router default ErrorBoundary:", error);
      devInfo = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React.createElement("code", {
        style: codeStyles
      }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React.createElement("code", {
        style: codeStyles
      }, "errorElement"), " prop on your route."));
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React.createElement("h3", {
      style: {
        fontStyle: "italic"
      }
    }, message), stack ? /* @__PURE__ */ React.createElement("pre", {
      style: preStyles
    }, stack) : null, devInfo);
  }
  function RenderedRoute(_ref) {
    let {
      routeContext,
      match: match2,
      children
    } = _ref;
    let dataRouterContext = React.useContext(DataRouterContext);
    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match2.route.errorElement || match2.route.ErrorBoundary)) {
      dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id;
    }
    return /* @__PURE__ */ React.createElement(RouteContext.Provider, {
      value: routeContext
    }, children);
  }
  function _renderMatches(matches, parentMatches, dataRouterState, future) {
    var _dataRouterState;
    if (parentMatches === void 0) {
      parentMatches = [];
    }
    if (dataRouterState === void 0) {
      dataRouterState = null;
    }
    if (future === void 0) {
      future = null;
    }
    if (matches == null) {
      var _future;
      if (!dataRouterState) {
        return null;
      }
      if (dataRouterState.errors) {
        matches = dataRouterState.matches;
      } else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
        matches = dataRouterState.matches;
      } else {
        return null;
      }
    }
    let renderedMatches = matches;
    let errors = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;
    if (errors != null) {
      let errorIndex = renderedMatches.findIndex((m) => m.route.id && (errors == null ? void 0 : errors[m.route.id]) !== void 0);
      !(errorIndex >= 0) ? true ? invariant(false, "Could not find a matching route for errors on route IDs: " + Object.keys(errors).join(",")) : invariant(false) : void 0;
      renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
    }
    let renderFallback = false;
    let fallbackIndex = -1;
    if (dataRouterState && future && future.v7_partialHydration) {
      for (let i = 0; i < renderedMatches.length; i++) {
        let match2 = renderedMatches[i];
        if (match2.route.HydrateFallback || match2.route.hydrateFallbackElement) {
          fallbackIndex = i;
        }
        if (match2.route.id) {
          let {
            loaderData,
            errors: errors2
          } = dataRouterState;
          let needsToRunLoader = match2.route.loader && loaderData[match2.route.id] === void 0 && (!errors2 || errors2[match2.route.id] === void 0);
          if (match2.route.lazy || needsToRunLoader) {
            renderFallback = true;
            if (fallbackIndex >= 0) {
              renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
            } else {
              renderedMatches = [renderedMatches[0]];
            }
            break;
          }
        }
      }
    }
    return renderedMatches.reduceRight((outlet, match2, index) => {
      let error;
      let shouldRenderHydrateFallback = false;
      let errorElement = null;
      let hydrateFallbackElement = null;
      if (dataRouterState) {
        error = errors && match2.route.id ? errors[match2.route.id] : void 0;
        errorElement = match2.route.errorElement || defaultErrorElement;
        if (renderFallback) {
          if (fallbackIndex < 0 && index === 0) {
            warningOnce("route-fallback", false, "No `HydrateFallback` element provided to render during initial hydration");
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = null;
          } else if (fallbackIndex === index) {
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = match2.route.hydrateFallbackElement || null;
          }
        }
      }
      let matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1));
      let getChildren = () => {
        let children;
        if (error) {
          children = errorElement;
        } else if (shouldRenderHydrateFallback) {
          children = hydrateFallbackElement;
        } else if (match2.route.Component) {
          children = /* @__PURE__ */ React.createElement(match2.route.Component, null);
        } else if (match2.route.element) {
          children = match2.route.element;
        } else {
          children = outlet;
        }
        return /* @__PURE__ */ React.createElement(RenderedRoute, {
          match: match2,
          routeContext: {
            outlet,
            matches: matches2,
            isDataRoute: dataRouterState != null
          },
          children
        });
      };
      return dataRouterState && (match2.route.ErrorBoundary || match2.route.errorElement || index === 0) ? /* @__PURE__ */ React.createElement(RenderErrorBoundary, {
        location: dataRouterState.location,
        revalidation: dataRouterState.revalidation,
        component: errorElement,
        error,
        children: getChildren(),
        routeContext: {
          outlet: null,
          matches: matches2,
          isDataRoute: true
        }
      }) : getChildren();
    }, null);
  }
  function getDataRouterConsoleError(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.";
  }
  function useDataRouterContext(hookName) {
    let ctx = React.useContext(DataRouterContext);
    !ctx ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return ctx;
  }
  function useDataRouterState(hookName) {
    let state = React.useContext(DataRouterStateContext);
    !state ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return state;
  }
  function useRouteContext(hookName) {
    let route = React.useContext(RouteContext);
    !route ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return route;
  }
  function useCurrentRouteId(hookName) {
    let route = useRouteContext(hookName);
    let thisRoute = route.matches[route.matches.length - 1];
    !thisRoute.route.id ? true ? invariant(false, hookName + ' can only be used on routes that contain a unique "id"') : invariant(false) : void 0;
    return thisRoute.route.id;
  }
  function useRouteId() {
    return useCurrentRouteId(DataRouterStateHook.UseRouteId);
  }
  function useNavigation() {
    let state = useDataRouterState(DataRouterStateHook.UseNavigation);
    return state.navigation;
  }
  function useMatches() {
    let {
      matches,
      loaderData
    } = useDataRouterState(DataRouterStateHook.UseMatches);
    return React.useMemo(() => matches.map((m) => convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);
  }
  function useRouteError() {
    var _state$errors;
    let error = React.useContext(RouteErrorContext);
    let state = useDataRouterState(DataRouterStateHook.UseRouteError);
    let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
    if (error !== void 0) {
      return error;
    }
    return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
  }
  function useNavigateStable() {
    let {
      router
    } = useDataRouterContext(DataRouterHook.UseNavigateStable);
    let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);
    let activeRef = React.useRef(false);
    useIsomorphicLayoutEffect(() => {
      activeRef.current = true;
    });
    let navigate = React.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current) return;
      if (typeof to === "number") {
        router.navigate(to);
      } else {
        router.navigate(to, _extends2({
          fromRouteId: id
        }, options));
      }
    }, [router, id]);
    return navigate;
  }
  function warningOnce(key, cond, message) {
    if (!cond && !alreadyWarned$1[key]) {
      alreadyWarned$1[key] = true;
      true ? warning(false, message) : void 0;
    }
  }
  function warnOnce(key, message) {
    if (!alreadyWarned[message]) {
      alreadyWarned[message] = true;
      console.warn(message);
    }
  }
  function logV6DeprecationWarnings(renderFuture, routerFuture) {
    if ((renderFuture == null ? void 0 : renderFuture.v7_startTransition) === void 0) {
      logDeprecation("v7_startTransition", "React Router will begin wrapping state updates in `React.startTransition` in v7", "https://reactrouter.com/v6/upgrading/future#v7_starttransition");
    }
    if ((renderFuture == null ? void 0 : renderFuture.v7_relativeSplatPath) === void 0 && (!routerFuture || !routerFuture.v7_relativeSplatPath)) {
      logDeprecation("v7_relativeSplatPath", "Relative route resolution within Splat routes is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath");
    }
    if (routerFuture) {
      if (routerFuture.v7_fetcherPersist === void 0) {
        logDeprecation("v7_fetcherPersist", "The persistence behavior of fetchers is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_fetcherpersist");
      }
      if (routerFuture.v7_normalizeFormMethod === void 0) {
        logDeprecation("v7_normalizeFormMethod", "Casing of `formMethod` fields is being normalized to uppercase in v7", "https://reactrouter.com/v6/upgrading/future#v7_normalizeformmethod");
      }
      if (routerFuture.v7_partialHydration === void 0) {
        logDeprecation("v7_partialHydration", "`RouterProvider` hydration behavior is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_partialhydration");
      }
      if (routerFuture.v7_skipActionErrorRevalidation === void 0) {
        logDeprecation("v7_skipActionErrorRevalidation", "The revalidation behavior after 4xx/5xx `action` responses is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_skipactionerrorrevalidation");
      }
    }
  }
  function Router(_ref5) {
    let {
      basename: basenameProp = "/",
      children = null,
      location: locationProp,
      navigationType = Action.Pop,
      navigator: navigator2,
      static: staticProp = false,
      future
    } = _ref5;
    !!useInRouterContext() ? true ? invariant(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : invariant(false) : void 0;
    let basename = basenameProp.replace(/^\/*/, "/");
    let navigationContext = React.useMemo(() => ({
      basename,
      navigator: navigator2,
      static: staticProp,
      future: _extends2({
        v7_relativeSplatPath: false
      }, future)
    }), [basename, future, navigator2, staticProp]);
    if (typeof locationProp === "string") {
      locationProp = parsePath(locationProp);
    }
    let {
      pathname = "/",
      search = "",
      hash: hash2 = "",
      state = null,
      key = "default"
    } = locationProp;
    let locationContext = React.useMemo(() => {
      let trailingPathname = stripBasename(pathname, basename);
      if (trailingPathname == null) {
        return null;
      }
      return {
        location: {
          pathname: trailingPathname,
          search,
          hash: hash2,
          state,
          key
        },
        navigationType
      };
    }, [basename, pathname, search, hash2, state, key, navigationType]);
    true ? warning(locationContext != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash2 + '" because it does not start with the ') + "basename, so the <Router> won't render anything.") : void 0;
    if (locationContext == null) {
      return null;
    }
    return /* @__PURE__ */ React.createElement(NavigationContext.Provider, {
      value: navigationContext
    }, /* @__PURE__ */ React.createElement(LocationContext.Provider, {
      children,
      value: locationContext
    }));
  }
  var React, DataRouterContext, DataRouterStateContext, AwaitContext, NavigationContext, LocationContext, RouteContext, RouteErrorContext, navigateEffectWarning, defaultErrorElement, RenderErrorBoundary, DataRouterHook, DataRouterStateHook, alreadyWarned$1, alreadyWarned, logDeprecation, START_TRANSITION, startTransitionImpl, neverSettledPromise;
  var init_dist = __esm({
    "node_modules/react-router/dist/index.js"() {
      React = __toESM(require_react());
      init_router();
      init_router();
      DataRouterContext = /* @__PURE__ */ React.createContext(null);
      if (true) {
        DataRouterContext.displayName = "DataRouter";
      }
      DataRouterStateContext = /* @__PURE__ */ React.createContext(null);
      if (true) {
        DataRouterStateContext.displayName = "DataRouterState";
      }
      AwaitContext = /* @__PURE__ */ React.createContext(null);
      if (true) {
        AwaitContext.displayName = "Await";
      }
      NavigationContext = /* @__PURE__ */ React.createContext(null);
      if (true) {
        NavigationContext.displayName = "Navigation";
      }
      LocationContext = /* @__PURE__ */ React.createContext(null);
      if (true) {
        LocationContext.displayName = "Location";
      }
      RouteContext = /* @__PURE__ */ React.createContext({
        outlet: null,
        matches: [],
        isDataRoute: false
      });
      if (true) {
        RouteContext.displayName = "Route";
      }
      RouteErrorContext = /* @__PURE__ */ React.createContext(null);
      if (true) {
        RouteErrorContext.displayName = "RouteError";
      }
      navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
      defaultErrorElement = /* @__PURE__ */ React.createElement(DefaultErrorComponent, null);
      RenderErrorBoundary = class extends React.Component {
        constructor(props) {
          super(props);
          this.state = {
            location: props.location,
            revalidation: props.revalidation,
            error: props.error
          };
        }
        static getDerivedStateFromError(error) {
          return {
            error
          };
        }
        static getDerivedStateFromProps(props, state) {
          if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
            return {
              error: props.error,
              location: props.location,
              revalidation: props.revalidation
            };
          }
          return {
            error: props.error !== void 0 ? props.error : state.error,
            location: state.location,
            revalidation: props.revalidation || state.revalidation
          };
        }
        componentDidCatch(error, errorInfo) {
          console.error("React Router caught the following error during render", error, errorInfo);
        }
        render() {
          return this.state.error !== void 0 ? /* @__PURE__ */ React.createElement(RouteContext.Provider, {
            value: this.props.routeContext
          }, /* @__PURE__ */ React.createElement(RouteErrorContext.Provider, {
            value: this.state.error,
            children: this.props.component
          })) : this.props.children;
        }
      };
      DataRouterHook = /* @__PURE__ */ function(DataRouterHook3) {
        DataRouterHook3["UseBlocker"] = "useBlocker";
        DataRouterHook3["UseRevalidator"] = "useRevalidator";
        DataRouterHook3["UseNavigateStable"] = "useNavigate";
        return DataRouterHook3;
      }(DataRouterHook || {});
      DataRouterStateHook = /* @__PURE__ */ function(DataRouterStateHook3) {
        DataRouterStateHook3["UseBlocker"] = "useBlocker";
        DataRouterStateHook3["UseLoaderData"] = "useLoaderData";
        DataRouterStateHook3["UseActionData"] = "useActionData";
        DataRouterStateHook3["UseRouteError"] = "useRouteError";
        DataRouterStateHook3["UseNavigation"] = "useNavigation";
        DataRouterStateHook3["UseRouteLoaderData"] = "useRouteLoaderData";
        DataRouterStateHook3["UseMatches"] = "useMatches";
        DataRouterStateHook3["UseRevalidator"] = "useRevalidator";
        DataRouterStateHook3["UseNavigateStable"] = "useNavigate";
        DataRouterStateHook3["UseRouteId"] = "useRouteId";
        return DataRouterStateHook3;
      }(DataRouterStateHook || {});
      alreadyWarned$1 = {};
      alreadyWarned = {};
      logDeprecation = (flag, msg, link) => warnOnce(flag, "\u26A0\uFE0F React Router Future Flag Warning: " + msg + ". " + ("You can use the `" + flag + "` future flag to opt-in early. ") + ("For more information, see " + link + "."));
      START_TRANSITION = "startTransition";
      startTransitionImpl = React[START_TRANSITION];
      neverSettledPromise = new Promise(() => {
      });
    }
  });

  // node_modules/react-router-dom/dist/index.js
  function _extends3() {
    _extends3 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function isHtmlElement(object) {
    return object != null && typeof object.tagName === "string";
  }
  function isButtonElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
  }
  function isFormElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
  }
  function isInputElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  function shouldProcessLinkClick(event, target) {
    return event.button === 0 && // Ignore everything but left clicks
    (!target || target === "_self") && // Let browser handle "target=_blank" etc.
    !isModifiedEvent(event);
  }
  function isFormDataSubmitterSupported() {
    if (_formDataSupportsSubmitter === null) {
      try {
        new FormData(
          document.createElement("form"),
          // @ts-expect-error if FormData supports the submitter parameter, this will throw
          0
        );
        _formDataSupportsSubmitter = false;
      } catch (e) {
        _formDataSupportsSubmitter = true;
      }
    }
    return _formDataSupportsSubmitter;
  }
  function getFormEncType(encType) {
    if (encType != null && !supportedFormEncTypes.has(encType)) {
      true ? warning(false, '"' + encType + '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` ' + ('and will default to "' + defaultEncType + '"')) : void 0;
      return null;
    }
    return encType;
  }
  function getFormSubmissionInfo(target, basename) {
    let method;
    let action;
    let encType;
    let formData;
    let body;
    if (isFormElement(target)) {
      let attr = target.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method = target.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(target);
    } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
      let form = target.form;
      if (form == null) {
        throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
      }
      let attr = target.getAttribute("formaction") || form.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(form, target);
      if (!isFormDataSubmitterSupported()) {
        let {
          name,
          type,
          value
        } = target;
        if (type === "image") {
          let prefix2 = name ? name + "." : "";
          formData.append(prefix2 + "x", "0");
          formData.append(prefix2 + "y", "0");
        } else if (name) {
          formData.append(name, value);
        }
      }
    } else if (isHtmlElement(target)) {
      throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
    } else {
      method = defaultMethod;
      action = null;
      encType = defaultEncType;
      body = target;
    }
    if (formData && encType === "text/plain") {
      body = formData;
      formData = void 0;
    }
    return {
      action,
      method: method.toLowerCase(),
      encType,
      formData,
      body
    };
  }
  function BrowserRouter(_ref4) {
    let {
      basename,
      children,
      future,
      window: window2
    } = _ref4;
    let historyRef = React2.useRef();
    if (historyRef.current == null) {
      historyRef.current = createBrowserHistory({
        window: window2,
        v5Compat: true
      });
    }
    let history = historyRef.current;
    let [state, setStateImpl] = React2.useState({
      action: history.action,
      location: history.location
    });
    let {
      v7_startTransition
    } = future || {};
    let setState = React2.useCallback((newState) => {
      v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
    }, [setStateImpl, v7_startTransition]);
    React2.useLayoutEffect(() => history.listen(setState), [history, setState]);
    React2.useEffect(() => logV6DeprecationWarnings(future), [future]);
    return /* @__PURE__ */ React2.createElement(Router, {
      basename,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history,
      future
    });
  }
  function HistoryRouter(_ref6) {
    let {
      basename,
      children,
      future,
      history
    } = _ref6;
    let [state, setStateImpl] = React2.useState({
      action: history.action,
      location: history.location
    });
    let {
      v7_startTransition
    } = future || {};
    let setState = React2.useCallback((newState) => {
      v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
    }, [setStateImpl, v7_startTransition]);
    React2.useLayoutEffect(() => history.listen(setState), [history, setState]);
    React2.useEffect(() => logV6DeprecationWarnings(future), [future]);
    return /* @__PURE__ */ React2.createElement(Router, {
      basename,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history,
      future
    });
  }
  function ScrollRestoration(_ref10) {
    let {
      getKey,
      storageKey
    } = _ref10;
    useScrollRestoration({
      getKey,
      storageKey
    });
    return null;
  }
  function getDataRouterConsoleError2(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.";
  }
  function useDataRouterContext2(hookName) {
    let ctx = React2.useContext(DataRouterContext);
    !ctx ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
    return ctx;
  }
  function useDataRouterState2(hookName) {
    let state = React2.useContext(DataRouterStateContext);
    !state ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
    return state;
  }
  function useLinkClickHandler(to, _temp) {
    let {
      target,
      replace: replaceProp,
      state,
      preventScrollReset,
      relative,
      viewTransition
    } = _temp === void 0 ? {} : _temp;
    let navigate = useNavigate();
    let location = useLocation();
    let path = useResolvedPath(to, {
      relative
    });
    return React2.useCallback((event) => {
      if (shouldProcessLinkClick(event, target)) {
        event.preventDefault();
        let replace3 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
        navigate(to, {
          replace: replace3,
          state,
          preventScrollReset,
          relative,
          viewTransition
        });
      }
    }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, viewTransition]);
  }
  function validateClientSideSubmission() {
    if (typeof document === "undefined") {
      throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
    }
  }
  function useSubmit() {
    let {
      router
    } = useDataRouterContext2(DataRouterHook2.UseSubmit);
    let {
      basename
    } = React2.useContext(NavigationContext);
    let currentRouteId = useRouteId();
    return React2.useCallback(function(target, options) {
      if (options === void 0) {
        options = {};
      }
      validateClientSideSubmission();
      let {
        action,
        method,
        encType,
        formData,
        body
      } = getFormSubmissionInfo(target, basename);
      if (options.navigate === false) {
        let key = options.fetcherKey || getUniqueFetcherId();
        router.fetch(key, currentRouteId, options.action || action, {
          preventScrollReset: options.preventScrollReset,
          formData,
          body,
          formMethod: options.method || method,
          formEncType: options.encType || encType,
          flushSync: options.flushSync
        });
      } else {
        router.navigate(options.action || action, {
          preventScrollReset: options.preventScrollReset,
          formData,
          body,
          formMethod: options.method || method,
          formEncType: options.encType || encType,
          replace: options.replace,
          state: options.state,
          fromRouteId: currentRouteId,
          flushSync: options.flushSync,
          viewTransition: options.viewTransition
        });
      }
    }, [router, basename, currentRouteId]);
  }
  function useFormAction(action, _temp2) {
    let {
      relative
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      basename
    } = React2.useContext(NavigationContext);
    let routeContext = React2.useContext(RouteContext);
    !routeContext ? true ? invariant(false, "useFormAction must be used inside a RouteContext") : invariant(false) : void 0;
    let [match2] = routeContext.matches.slice(-1);
    let path = _extends3({}, useResolvedPath(action ? action : ".", {
      relative
    }));
    let location = useLocation();
    if (action == null) {
      path.search = location.search;
      let params = new URLSearchParams(path.search);
      let indexValues = params.getAll("index");
      let hasNakedIndexParam = indexValues.some((v) => v === "");
      if (hasNakedIndexParam) {
        params.delete("index");
        indexValues.filter((v) => v).forEach((v) => params.append("index", v));
        let qs = params.toString();
        path.search = qs ? "?" + qs : "";
      }
    }
    if ((!action || action === ".") && match2.route.index) {
      path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
    }
    if (basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    return createPath(path);
  }
  function useScrollRestoration(_temp4) {
    let {
      getKey,
      storageKey
    } = _temp4 === void 0 ? {} : _temp4;
    let {
      router
    } = useDataRouterContext2(DataRouterHook2.UseScrollRestoration);
    let {
      restoreScrollPosition,
      preventScrollReset
    } = useDataRouterState2(DataRouterStateHook2.UseScrollRestoration);
    let {
      basename
    } = React2.useContext(NavigationContext);
    let location = useLocation();
    let matches = useMatches();
    let navigation = useNavigation();
    React2.useEffect(() => {
      window.history.scrollRestoration = "manual";
      return () => {
        window.history.scrollRestoration = "auto";
      };
    }, []);
    usePageHide(React2.useCallback(() => {
      if (navigation.state === "idle") {
        let key = (getKey ? getKey(location, matches) : null) || location.key;
        savedScrollPositions[key] = window.scrollY;
      }
      try {
        sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
      } catch (error) {
        true ? warning(false, "Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (" + error + ").") : void 0;
      }
      window.history.scrollRestoration = "auto";
    }, [storageKey, getKey, navigation.state, location, matches]));
    if (typeof document !== "undefined") {
      React2.useLayoutEffect(() => {
        try {
          let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
          if (sessionPositions) {
            savedScrollPositions = JSON.parse(sessionPositions);
          }
        } catch (e) {
        }
      }, [storageKey]);
      React2.useLayoutEffect(() => {
        let getKeyWithoutBasename = getKey && basename !== "/" ? (location2, matches2) => getKey(
          // Strip the basename to match useLocation()
          _extends3({}, location2, {
            pathname: stripBasename(location2.pathname, basename) || location2.pathname
          }),
          matches2
        ) : getKey;
        let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);
        return () => disableScrollRestoration && disableScrollRestoration();
      }, [router, basename, getKey]);
      React2.useLayoutEffect(() => {
        if (restoreScrollPosition === false) {
          return;
        }
        if (typeof restoreScrollPosition === "number") {
          window.scrollTo(0, restoreScrollPosition);
          return;
        }
        if (location.hash) {
          let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));
          if (el) {
            el.scrollIntoView();
            return;
          }
        }
        if (preventScrollReset === true) {
          return;
        }
        window.scrollTo(0, 0);
      }, [location, restoreScrollPosition, preventScrollReset]);
    }
  }
  function usePageHide(callback, options) {
    let {
      capture
    } = options || {};
    React2.useEffect(() => {
      let opts = capture != null ? {
        capture
      } : void 0;
      window.addEventListener("pagehide", callback, opts);
      return () => {
        window.removeEventListener("pagehide", callback, opts);
      };
    }, [callback, capture]);
  }
  function useViewTransitionState(to, opts) {
    if (opts === void 0) {
      opts = {};
    }
    let vtContext = React2.useContext(ViewTransitionContext);
    !(vtContext != null) ? true ? invariant(false, "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?") : invariant(false) : void 0;
    let {
      basename
    } = useDataRouterContext2(DataRouterHook2.useViewTransitionState);
    let path = useResolvedPath(to, {
      relative: opts.relative
    });
    if (!vtContext.isTransitioning) {
      return false;
    }
    let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
    let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
    return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
  }
  var React2, ReactDOM, defaultMethod, defaultEncType, _formDataSupportsSubmitter, supportedFormEncTypes, _excluded, _excluded2, _excluded3, REACT_ROUTER_VERSION, ViewTransitionContext, FetchersContext, START_TRANSITION2, startTransitionImpl2, FLUSH_SYNC, flushSyncImpl, USE_ID, useIdImpl, isBrowser, ABSOLUTE_URL_REGEX, Link, NavLink, Form, DataRouterHook2, DataRouterStateHook2, fetcherId, getUniqueFetcherId, SCROLL_RESTORATION_STORAGE_KEY, savedScrollPositions;
  var init_dist2 = __esm({
    "node_modules/react-router-dom/dist/index.js"() {
      React2 = __toESM(require_react());
      ReactDOM = __toESM(require_react_dom());
      init_dist();
      init_dist();
      init_router();
      defaultMethod = "get";
      defaultEncType = "application/x-www-form-urlencoded";
      _formDataSupportsSubmitter = null;
      supportedFormEncTypes = /* @__PURE__ */ new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
      _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "viewTransition"];
      _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "viewTransition", "children"];
      _excluded3 = ["fetcherKey", "navigate", "reloadDocument", "replace", "state", "method", "action", "onSubmit", "relative", "preventScrollReset", "viewTransition"];
      REACT_ROUTER_VERSION = "6";
      try {
        window.__reactRouterVersion = REACT_ROUTER_VERSION;
      } catch (e) {
      }
      ViewTransitionContext = /* @__PURE__ */ React2.createContext({
        isTransitioning: false
      });
      if (true) {
        ViewTransitionContext.displayName = "ViewTransition";
      }
      FetchersContext = /* @__PURE__ */ React2.createContext(/* @__PURE__ */ new Map());
      if (true) {
        FetchersContext.displayName = "Fetchers";
      }
      START_TRANSITION2 = "startTransition";
      startTransitionImpl2 = React2[START_TRANSITION2];
      FLUSH_SYNC = "flushSync";
      flushSyncImpl = ReactDOM[FLUSH_SYNC];
      USE_ID = "useId";
      useIdImpl = React2[USE_ID];
      if (true) {
        HistoryRouter.displayName = "unstable_HistoryRouter";
      }
      isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
      ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
      Link = /* @__PURE__ */ React2.forwardRef(function LinkWithRef(_ref7, ref) {
        let {
          onClick,
          relative,
          reloadDocument,
          replace: replace3,
          state,
          target,
          to,
          preventScrollReset,
          viewTransition
        } = _ref7, rest = _objectWithoutPropertiesLoose(_ref7, _excluded);
        let {
          basename
        } = React2.useContext(NavigationContext);
        let absoluteHref;
        let isExternal = false;
        if (typeof to === "string" && ABSOLUTE_URL_REGEX.test(to)) {
          absoluteHref = to;
          if (isBrowser) {
            try {
              let currentUrl = new URL(window.location.href);
              let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
              let path = stripBasename(targetUrl.pathname, basename);
              if (targetUrl.origin === currentUrl.origin && path != null) {
                to = path + targetUrl.search + targetUrl.hash;
              } else {
                isExternal = true;
              }
            } catch (e) {
              true ? warning(false, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.') : void 0;
            }
          }
        }
        let href = useHref(to, {
          relative
        });
        let internalOnClick = useLinkClickHandler(to, {
          replace: replace3,
          state,
          target,
          preventScrollReset,
          relative,
          viewTransition
        });
        function handleClick(event) {
          if (onClick) onClick(event);
          if (!event.defaultPrevented) {
            internalOnClick(event);
          }
        }
        return (
          // eslint-disable-next-line jsx-a11y/anchor-has-content
          /* @__PURE__ */ React2.createElement("a", _extends3({}, rest, {
            href: absoluteHref || href,
            onClick: isExternal || reloadDocument ? onClick : handleClick,
            ref,
            target
          }))
        );
      });
      if (true) {
        Link.displayName = "Link";
      }
      NavLink = /* @__PURE__ */ React2.forwardRef(function NavLinkWithRef(_ref8, ref) {
        let {
          "aria-current": ariaCurrentProp = "page",
          caseSensitive = false,
          className: classNameProp = "",
          end = false,
          style: styleProp,
          to,
          viewTransition,
          children
        } = _ref8, rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);
        let path = useResolvedPath(to, {
          relative: rest.relative
        });
        let location = useLocation();
        let routerState = React2.useContext(DataRouterStateContext);
        let {
          navigator: navigator2,
          basename
        } = React2.useContext(NavigationContext);
        let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
        // eslint-disable-next-line react-hooks/rules-of-hooks
        useViewTransitionState(path) && viewTransition === true;
        let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
        let locationPathname = location.pathname;
        let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
        if (!caseSensitive) {
          locationPathname = locationPathname.toLowerCase();
          nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
          toPathname = toPathname.toLowerCase();
        }
        if (nextLocationPathname && basename) {
          nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
        }
        const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
        let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
        let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
        let renderProps = {
          isActive,
          isPending,
          isTransitioning
        };
        let ariaCurrent = isActive ? ariaCurrentProp : void 0;
        let className;
        if (typeof classNameProp === "function") {
          className = classNameProp(renderProps);
        } else {
          className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null, isTransitioning ? "transitioning" : null].filter(Boolean).join(" ");
        }
        let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
        return /* @__PURE__ */ React2.createElement(Link, _extends3({}, rest, {
          "aria-current": ariaCurrent,
          className,
          ref,
          style,
          to,
          viewTransition
        }), typeof children === "function" ? children(renderProps) : children);
      });
      if (true) {
        NavLink.displayName = "NavLink";
      }
      Form = /* @__PURE__ */ React2.forwardRef((_ref9, forwardedRef) => {
        let {
          fetcherKey,
          navigate,
          reloadDocument,
          replace: replace3,
          state,
          method = defaultMethod,
          action,
          onSubmit,
          relative,
          preventScrollReset,
          viewTransition
        } = _ref9, props = _objectWithoutPropertiesLoose(_ref9, _excluded3);
        let submit = useSubmit();
        let formAction = useFormAction(action, {
          relative
        });
        let formMethod = method.toLowerCase() === "get" ? "get" : "post";
        let submitHandler = (event) => {
          onSubmit && onSubmit(event);
          if (event.defaultPrevented) return;
          event.preventDefault();
          let submitter = event.nativeEvent.submitter;
          let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
          submit(submitter || event.currentTarget, {
            fetcherKey,
            method: submitMethod,
            navigate,
            replace: replace3,
            state,
            relative,
            preventScrollReset,
            viewTransition
          });
        };
        return /* @__PURE__ */ React2.createElement("form", _extends3({
          ref: forwardedRef,
          method: formMethod,
          action: formAction,
          onSubmit: reloadDocument ? onSubmit : submitHandler
        }, props));
      });
      if (true) {
        Form.displayName = "Form";
      }
      if (true) {
        ScrollRestoration.displayName = "ScrollRestoration";
      }
      (function(DataRouterHook3) {
        DataRouterHook3["UseScrollRestoration"] = "useScrollRestoration";
        DataRouterHook3["UseSubmit"] = "useSubmit";
        DataRouterHook3["UseSubmitFetcher"] = "useSubmitFetcher";
        DataRouterHook3["UseFetcher"] = "useFetcher";
        DataRouterHook3["useViewTransitionState"] = "useViewTransitionState";
      })(DataRouterHook2 || (DataRouterHook2 = {}));
      (function(DataRouterStateHook3) {
        DataRouterStateHook3["UseFetcher"] = "useFetcher";
        DataRouterStateHook3["UseFetchers"] = "useFetchers";
        DataRouterStateHook3["UseScrollRestoration"] = "useScrollRestoration";
      })(DataRouterStateHook2 || (DataRouterStateHook2 = {}));
      fetcherId = 0;
      getUniqueFetcherId = () => "__" + String(++fetcherId) + "__";
      SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
      savedScrollPositions = {};
    }
  });

  // node_modules/@griffel/core/shorthands/generateStyles.esm.js
  function generateStyles(property, suffix, ...values2) {
    const [firstValue, secondValue = firstValue, thirdValue = firstValue, fourthValue = secondValue] = values2;
    const valuesWithDefaults = [firstValue, secondValue, thirdValue, fourthValue];
    const styles = {};
    for (let i = 0; i < valuesWithDefaults.length; i += 1) {
      if (valuesWithDefaults[i] || valuesWithDefaults[i] === 0) {
        const newKey = property + positionMap[i] + suffix;
        styles[newKey] = valuesWithDefaults[i];
      }
    }
    return styles;
  }
  var positionMap;
  var init_generateStyles_esm = __esm({
    "node_modules/@griffel/core/shorthands/generateStyles.esm.js"() {
      positionMap = ["Top", "Right", "Bottom", "Left"];
    }
  });

  // node_modules/@griffel/core/shorthands/borderWidth.esm.js
  function borderWidth(...values2) {
    return generateStyles("border", "Width", ...values2);
  }
  var init_borderWidth_esm = __esm({
    "node_modules/@griffel/core/shorthands/borderWidth.esm.js"() {
      init_generateStyles_esm();
    }
  });

  // node_modules/@griffel/core/shorthands/borderStyle.esm.js
  function borderStyle(...values2) {
    return generateStyles("border", "Style", ...values2);
  }
  var init_borderStyle_esm = __esm({
    "node_modules/@griffel/core/shorthands/borderStyle.esm.js"() {
      init_generateStyles_esm();
    }
  });

  // node_modules/@griffel/core/shorthands/borderColor.esm.js
  function borderColor(...values2) {
    return generateStyles("border", "Color", ...values2);
  }
  var init_borderColor_esm = __esm({
    "node_modules/@griffel/core/shorthands/borderColor.esm.js"() {
      init_generateStyles_esm();
    }
  });

  // node_modules/@griffel/core/shorthands/utils.esm.js
  function isBorderStyle(value) {
    return LINE_STYLES.includes(value);
  }
  var LINE_STYLES;
  var init_utils_esm = __esm({
    "node_modules/@griffel/core/shorthands/utils.esm.js"() {
      LINE_STYLES = ["none", "hidden", "dotted", "dashed", "solid", "double", "groove", "ridge", "inset", "outset"];
    }
  });

  // node_modules/@griffel/core/shorthands/border.esm.js
  function border(...values2) {
    if (isBorderStyle(values2[0])) {
      return Object.assign({}, borderStyle(values2[0]), values2[1] && borderWidth(values2[1]), values2[2] && borderColor(values2[2]));
    }
    return Object.assign({}, borderWidth(values2[0]), values2[1] && borderStyle(values2[1]), values2[2] && borderColor(values2[2]));
  }
  var init_border_esm = __esm({
    "node_modules/@griffel/core/shorthands/border.esm.js"() {
      init_borderWidth_esm();
      init_borderStyle_esm();
      init_borderColor_esm();
      init_utils_esm();
    }
  });

  // node_modules/@griffel/core/shorthands/borderLeft.esm.js
  function borderLeft(...values2) {
    if (isBorderStyle(values2[0])) {
      return Object.assign({
        borderLeftStyle: values2[0]
      }, values2[1] && {
        borderLeftWidth: values2[1]
      }, values2[2] && {
        borderLeftColor: values2[2]
      });
    }
    return Object.assign({
      borderLeftWidth: values2[0]
    }, values2[1] && {
      borderLeftStyle: values2[1]
    }, values2[2] && {
      borderLeftColor: values2[2]
    });
  }
  var init_borderLeft_esm = __esm({
    "node_modules/@griffel/core/shorthands/borderLeft.esm.js"() {
      init_utils_esm();
    }
  });

  // node_modules/@griffel/core/shorthands/borderBottom.esm.js
  function borderBottom(...values2) {
    if (isBorderStyle(values2[0])) {
      return Object.assign({
        borderBottomStyle: values2[0]
      }, values2[1] && {
        borderBottomWidth: values2[1]
      }, values2[2] && {
        borderBottomColor: values2[2]
      });
    }
    return Object.assign({
      borderBottomWidth: values2[0]
    }, values2[1] && {
      borderBottomStyle: values2[1]
    }, values2[2] && {
      borderBottomColor: values2[2]
    });
  }
  var init_borderBottom_esm = __esm({
    "node_modules/@griffel/core/shorthands/borderBottom.esm.js"() {
      init_utils_esm();
    }
  });

  // node_modules/@griffel/core/shorthands/borderRight.esm.js
  function borderRight(...values2) {
    if (isBorderStyle(values2[0])) {
      return Object.assign({
        borderRightStyle: values2[0]
      }, values2[1] && {
        borderRightWidth: values2[1]
      }, values2[2] && {
        borderRightColor: values2[2]
      });
    }
    return Object.assign({
      borderRightWidth: values2[0]
    }, values2[1] && {
      borderRightStyle: values2[1]
    }, values2[2] && {
      borderRightColor: values2[2]
    });
  }
  var init_borderRight_esm = __esm({
    "node_modules/@griffel/core/shorthands/borderRight.esm.js"() {
      init_utils_esm();
    }
  });

  // node_modules/@griffel/core/shorthands/borderTop.esm.js
  function borderTop(...values2) {
    if (isBorderStyle(values2[0])) {
      return Object.assign({
        borderTopStyle: values2[0]
      }, values2[1] && {
        borderTopWidth: values2[1]
      }, values2[2] && {
        borderTopColor: values2[2]
      });
    }
    return Object.assign({
      borderTopWidth: values2[0]
    }, values2[1] && {
      borderTopStyle: values2[1]
    }, values2[2] && {
      borderTopColor: values2[2]
    });
  }
  var init_borderTop_esm = __esm({
    "node_modules/@griffel/core/shorthands/borderTop.esm.js"() {
      init_utils_esm();
    }
  });

  // node_modules/@griffel/core/shorthands/borderRadius.esm.js
  function borderRadius(value1, value2 = value1, value3 = value1, value4 = value2) {
    return {
      borderBottomRightRadius: value3,
      borderBottomLeftRadius: value4,
      borderTopRightRadius: value2,
      borderTopLeftRadius: value1
    };
  }
  var init_borderRadius_esm = __esm({
    "node_modules/@griffel/core/shorthands/borderRadius.esm.js"() {
    }
  });

  // node_modules/@griffel/core/shorthands/flex.esm.js
  function flex(...values2) {
    const isOneValueSyntax = values2.length === 1;
    const isTwoValueSyntax = values2.length === 2;
    const isThreeValueSyntax = values2.length === 3;
    if (isOneValueSyntax) {
      const [firstValue] = values2;
      if (isInitial(firstValue)) {
        return {
          flexGrow: 0,
          flexShrink: 1,
          flexBasis: "auto"
        };
      }
      if (isAuto(firstValue)) {
        return {
          flexGrow: 1,
          flexShrink: 1,
          flexBasis: "auto"
        };
      }
      if (isNone(firstValue)) {
        return {
          flexGrow: 0,
          flexShrink: 0,
          flexBasis: "auto"
        };
      }
      if (isUnitless(firstValue)) {
        return {
          flexGrow: firstValue,
          flexShrink: 1,
          flexBasis: 0
        };
      }
      if (isWidth(firstValue)) {
        return {
          flexGrow: 1,
          flexShrink: 1,
          flexBasis: firstValue
        };
      }
    }
    if (isTwoValueSyntax) {
      const [firstValue, secondValue] = values2;
      if (isUnitless(secondValue)) {
        return {
          flexGrow: firstValue,
          flexShrink: secondValue,
          flexBasis: 0
        };
      }
      if (isWidth(secondValue)) {
        return {
          flexGrow: firstValue,
          flexShrink: 1,
          flexBasis: secondValue
        };
      }
    }
    if (isThreeValueSyntax) {
      const [firstValue, secondValue, thirdValue] = values2;
      if (isUnitless(firstValue) && isUnitless(secondValue) && (isAuto(thirdValue) || isWidth(thirdValue))) {
        return {
          flexGrow: firstValue,
          flexShrink: secondValue,
          flexBasis: thirdValue
        };
      }
    }
    if (true) {
      console.error(`The value passed to shorthands.flex did not match any flex property specs. The CSS styles were not generated. Please, check the flex documentation.`);
    }
    return {};
  }
  var isUnit, isUnitless, isInitial, isAuto, isNone, widthReservedKeys, isWidth;
  var init_flex_esm = __esm({
    "node_modules/@griffel/core/shorthands/flex.esm.js"() {
      isUnit = (value) => typeof value === "string" && /(\d+(\w+|%))/.test(value);
      isUnitless = (value) => typeof value === "number" && !Number.isNaN(value);
      isInitial = (value) => value === "initial";
      isAuto = (value) => value === "auto";
      isNone = (value) => value === "none";
      widthReservedKeys = ["content", "fit-content", "max-content", "min-content"];
      isWidth = (value) => widthReservedKeys.some((key) => value === key) || isUnit(value);
    }
  });

  // node_modules/@griffel/core/shorthands/gap.esm.js
  function gap(columnGap, rowGap = columnGap) {
    return {
      columnGap,
      rowGap
    };
  }
  var init_gap_esm = __esm({
    "node_modules/@griffel/core/shorthands/gap.esm.js"() {
    }
  });

  // node_modules/@griffel/core/shorthands/gridArea.esm.js
  function isValidGridAreaInput(value) {
    return value === void 0 || typeof value === "number" || typeof value === "string" && !cssVarRegEx.test(value);
  }
  function isCustomIdent(value) {
    return value !== void 0 && typeof value === "string" && customIdentRegEx.test(value) && !nonCustomIdentRegEx.test(value);
  }
  function gridArea(...values2) {
    if (values2.some((value) => !isValidGridAreaInput(value))) {
      if (true) {
        console.error(`The value passed to shorthands.gridArea() did not match any gridArea property specs. The CSS styles were not generated. Please, check the gridArea documentation.`, ["The value passed to shorthands.gridArea() did not match any gridArea property specs. ", "The CSS styles were not generated.\n", "Please, check the `grid-area` documentation:\n", "- https://developer.mozilla.org/docs/Web/CSS/grid-area", "- https://griffel.js.org/react/api/shorthands#shorthandsgridarea"].join(""));
      }
      return {};
    }
    const gridRowStart = values2[0] !== void 0 ? values2[0] : "auto";
    const gridColumnStart = values2[1] !== void 0 ? values2[1] : isCustomIdent(gridRowStart) ? gridRowStart : "auto";
    const gridRowEnd = values2[2] !== void 0 ? values2[2] : isCustomIdent(gridRowStart) ? gridRowStart : "auto";
    const gridColumnEnd = values2[3] !== void 0 ? values2[3] : isCustomIdent(gridColumnStart) ? gridColumnStart : "auto";
    return {
      gridRowStart,
      gridColumnStart,
      gridRowEnd,
      gridColumnEnd
    };
  }
  var cssVarRegEx, customIdentRegEx, nonCustomIdentRegEx;
  var init_gridArea_esm = __esm({
    "node_modules/@griffel/core/shorthands/gridArea.esm.js"() {
      cssVarRegEx = /var\(.*\)/gi;
      customIdentRegEx = /^[a-zA-Z0-9\-_\\#;]+$/;
      nonCustomIdentRegEx = /^-moz-initial$|^auto$|^initial$|^inherit$|^revert$|^unset$|^span \d+$|^\d.*/;
    }
  });

  // node_modules/@griffel/core/shorthands/margin.esm.js
  function margin(...values2) {
    return generateStyles("margin", "", ...values2);
  }
  var init_margin_esm = __esm({
    "node_modules/@griffel/core/shorthands/margin.esm.js"() {
      init_generateStyles_esm();
    }
  });

  // node_modules/@griffel/core/shorthands/marginBlock.esm.js
  function marginBlock(start, end = start) {
    return {
      marginBlockStart: start,
      marginBlockEnd: end
    };
  }
  var init_marginBlock_esm = __esm({
    "node_modules/@griffel/core/shorthands/marginBlock.esm.js"() {
    }
  });

  // node_modules/@griffel/core/shorthands/marginInline.esm.js
  function marginInline(start, end = start) {
    return {
      marginInlineStart: start,
      marginInlineEnd: end
    };
  }
  var init_marginInline_esm = __esm({
    "node_modules/@griffel/core/shorthands/marginInline.esm.js"() {
    }
  });

  // node_modules/@griffel/core/shorthands/padding.esm.js
  function padding(...values2) {
    return generateStyles("padding", "", ...values2);
  }
  var init_padding_esm = __esm({
    "node_modules/@griffel/core/shorthands/padding.esm.js"() {
      init_generateStyles_esm();
    }
  });

  // node_modules/@griffel/core/shorthands/paddingBlock.esm.js
  function paddingBlock(start, end = start) {
    return {
      paddingBlockStart: start,
      paddingBlockEnd: end
    };
  }
  var init_paddingBlock_esm = __esm({
    "node_modules/@griffel/core/shorthands/paddingBlock.esm.js"() {
    }
  });

  // node_modules/@griffel/core/shorthands/paddingInline.esm.js
  function paddingInline(start, end = start) {
    return {
      paddingInlineStart: start,
      paddingInlineEnd: end
    };
  }
  var init_paddingInline_esm = __esm({
    "node_modules/@griffel/core/shorthands/paddingInline.esm.js"() {
    }
  });

  // node_modules/@griffel/core/shorthands/overflow.esm.js
  function overflow(overflowX, overflowY = overflowX) {
    return {
      overflowX,
      overflowY
    };
  }
  var init_overflow_esm = __esm({
    "node_modules/@griffel/core/shorthands/overflow.esm.js"() {
    }
  });

  // node_modules/@griffel/core/shorthands/inset.esm.js
  function inset(...values2) {
    const [firstValue, secondValue = firstValue, thirdValue = firstValue, fourthValue = secondValue] = values2;
    return {
      top: firstValue,
      right: secondValue,
      bottom: thirdValue,
      left: fourthValue
    };
  }
  var init_inset_esm = __esm({
    "node_modules/@griffel/core/shorthands/inset.esm.js"() {
    }
  });

  // node_modules/@griffel/core/shorthands/outline.esm.js
  function outline(outlineWidth, outlineStyle, outlineColor) {
    return Object.assign({
      outlineWidth
    }, outlineStyle && {
      outlineStyle
    }, outlineColor && {
      outlineColor
    });
  }
  var init_outline_esm = __esm({
    "node_modules/@griffel/core/shorthands/outline.esm.js"() {
    }
  });

  // node_modules/@griffel/core/shorthands/transition.esm.js
  function transition(...values2) {
    if (isTransitionGlobalInputs(values2)) {
      return {
        transitionDelay: values2[0],
        transitionDuration: values2[0],
        transitionProperty: values2[0],
        transitionTimingFunction: values2[0]
      };
    }
    const transitionInputs = normalizeTransitionInputs(values2);
    return transitionInputs.reduce((acc, [property, duration = "0s", delay = "0s", timingFunction = "ease"], index) => {
      if (index === 0) {
        acc.transitionProperty = property;
        acc.transitionDuration = duration;
        acc.transitionDelay = delay;
        acc.transitionTimingFunction = timingFunction;
      } else {
        acc.transitionProperty += `, ${property}`;
        acc.transitionDuration += `, ${duration}`;
        acc.transitionDelay += `, ${delay}`;
        acc.transitionTimingFunction += `, ${timingFunction}`;
      }
      return acc;
    }, {});
  }
  function isTransitionGlobalInputs(values2) {
    return values2.length === 1 && transitionGlobalInputs.includes(values2[0]);
  }
  function normalizeTransitionInputs(transitionInputs) {
    if (transitionInputs.length === 1 && Array.isArray(transitionInputs[0])) {
      return transitionInputs[0];
    }
    return [transitionInputs];
  }
  var transitionGlobalInputs;
  var init_transition_esm = __esm({
    "node_modules/@griffel/core/shorthands/transition.esm.js"() {
      transitionGlobalInputs = ["-moz-initial", "inherit", "initial", "revert", "unset"];
    }
  });

  // node_modules/@griffel/core/shorthands/textDecoration.esm.js
  function textDecoration(value, ...values2) {
    if (values2.length === 0) {
      return isTextDecorationStyleInput(value) ? {
        textDecorationStyle: value
      } : {
        textDecorationLine: value
      };
    }
    const [textDecorationStyle, textDecorationColor, textDecorationThickness] = values2;
    return Object.assign({
      textDecorationLine: value
    }, textDecorationStyle && {
      textDecorationStyle
    }, textDecorationColor && {
      textDecorationColor
    }, textDecorationThickness && {
      textDecorationThickness
    });
  }
  function isTextDecorationStyleInput(value) {
    return textDecorationStyleInputs.includes(value);
  }
  var textDecorationStyleInputs;
  var init_textDecoration_esm = __esm({
    "node_modules/@griffel/core/shorthands/textDecoration.esm.js"() {
      textDecorationStyleInputs = ["dashed", "dotted", "double", "solid", "wavy"];
    }
  });

  // node_modules/@griffel/core/constants.esm.js
  function getGlobalVar(name, defaultValue) {
    if (!__GLOBAL__[Symbol.for(__NAMESPACE_PREFIX__ + name)]) {
      __GLOBAL__[Symbol.for(__NAMESPACE_PREFIX__ + name)] = defaultValue;
    }
    return __GLOBAL__[Symbol.for(__NAMESPACE_PREFIX__ + name)];
  }
  var __GLOBAL__, __NAMESPACE_PREFIX__, DEBUG_RESET_CLASSES, DEFINITION_LOOKUP_TABLE, DATA_BUCKET_ATTR, DATA_PRIORITY_ATTR, HASH_PREFIX, RESET_HASH_PREFIX, SEQUENCE_HASH_LENGTH, SEQUENCE_PREFIX, DEBUG_SEQUENCE_SEPARATOR, SEQUENCE_SIZE, LOOKUP_DEFINITIONS_INDEX, LOOKUP_DIR_INDEX, UNSUPPORTED_CSS_PROPERTIES, RESET;
  var init_constants_esm = __esm({
    "node_modules/@griffel/core/constants.esm.js"() {
      __GLOBAL__ = typeof window === "undefined" ? global : window;
      __NAMESPACE_PREFIX__ = "@griffel/";
      DEBUG_RESET_CLASSES = /* @__PURE__ */ getGlobalVar("DEBUG_RESET_CLASSES", {});
      DEFINITION_LOOKUP_TABLE = /* @__PURE__ */ getGlobalVar("DEFINITION_LOOKUP_TABLE", {});
      DATA_BUCKET_ATTR = "data-make-styles-bucket";
      DATA_PRIORITY_ATTR = "data-priority";
      HASH_PREFIX = "f";
      RESET_HASH_PREFIX = "r";
      SEQUENCE_HASH_LENGTH = 7;
      SEQUENCE_PREFIX = "___";
      DEBUG_SEQUENCE_SEPARATOR = "_";
      SEQUENCE_SIZE = false ? SEQUENCE_PREFIX.length + SEQUENCE_HASH_LENGTH : SEQUENCE_PREFIX.length + SEQUENCE_HASH_LENGTH + DEBUG_SEQUENCE_SEPARATOR.length + SEQUENCE_HASH_LENGTH;
      LOOKUP_DEFINITIONS_INDEX = 0;
      LOOKUP_DIR_INDEX = 1;
      UNSUPPORTED_CSS_PROPERTIES = {
        all: 1,
        borderColor: 1,
        borderStyle: 1,
        borderWidth: 1,
        borderBlock: 1,
        borderBlockEnd: 1,
        borderBlockStart: 1,
        borderInline: 1,
        borderInlineEnd: 1,
        borderInlineStart: 1
      };
      RESET = "DO_NOT_USE_DIRECTLY: @griffel/reset-value";
    }
  });

  // node_modules/@emotion/hash/dist/emotion-hash.esm.js
  function murmur2(str) {
    var h = 0;
    var k, i = 0, len = str.length;
    for (; len >= 4; ++i, len -= 4) {
      k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
      k = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
      k ^= /* k >>> r: */
      k >>> 24;
      h = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
      (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h ^= (str.charCodeAt(i + 2) & 255) << 16;
      case 2:
        h ^= (str.charCodeAt(i + 1) & 255) << 8;
      case 1:
        h ^= str.charCodeAt(i) & 255;
        h = /* Math.imul(h, m): */
        (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    h ^= h >>> 13;
    h = /* Math.imul(h, m): */
    (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
  }
  var init_emotion_hash_esm = __esm({
    "node_modules/@emotion/hash/dist/emotion-hash.esm.js"() {
    }
  });

  // node_modules/@griffel/core/runtime/utils/hashSequence.esm.js
  function padEndHash(value) {
    const hashLength = value.length;
    if (hashLength === SEQUENCE_HASH_LENGTH) {
      return value;
    }
    for (let i = hashLength; i < SEQUENCE_HASH_LENGTH; i++) {
      value += "0";
    }
    return value;
  }
  function hashSequence(classes, dir, sequenceIds = []) {
    if (false) {
      return SEQUENCE_PREFIX + padEndHash(murmur2(classes + dir));
    }
    return SEQUENCE_PREFIX + padEndHash(murmur2(classes + dir)) + DEBUG_SEQUENCE_SEPARATOR + padEndHash(murmur2(sequenceIds.join("")));
  }
  var init_hashSequence_esm = __esm({
    "node_modules/@griffel/core/runtime/utils/hashSequence.esm.js"() {
      init_emotion_hash_esm();
      init_constants_esm();
    }
  });

  // node_modules/@griffel/core/runtime/reduceToClassNameForSlots.esm.js
  function reduceToClassName(classMap, dir) {
    let classString = "";
    let hashString = "";
    for (const propertyHash in classMap) {
      const classNameMapping = classMap[propertyHash];
      if (classNameMapping === 0) {
        hashString += propertyHash + " ";
        continue;
      }
      const hasRTLClassName = Array.isArray(classNameMapping);
      const className = dir === "rtl" ? (hasRTLClassName ? classNameMapping[1] : classNameMapping) + " " : (hasRTLClassName ? classNameMapping[0] : classNameMapping) + " ";
      classString += className;
      hashString += className;
    }
    return [classString.slice(0, -1), hashString.slice(0, -1)];
  }
  function reduceToClassNameForSlots(classesMapBySlot, dir) {
    const classNamesForSlots = {};
    for (const slotName in classesMapBySlot) {
      const [slotClasses, slotClassesHash] = reduceToClassName(classesMapBySlot[slotName], dir);
      if (slotClassesHash === "") {
        classNamesForSlots[slotName] = "";
        continue;
      }
      const sequenceHash = hashSequence(slotClassesHash, dir);
      const resultSlotClasses = sequenceHash + (slotClasses === "" ? "" : " " + slotClasses);
      DEFINITION_LOOKUP_TABLE[sequenceHash] = [classesMapBySlot[slotName], dir];
      classNamesForSlots[slotName] = resultSlotClasses;
    }
    return classNamesForSlots;
  }
  var init_reduceToClassNameForSlots_esm = __esm({
    "node_modules/@griffel/core/runtime/reduceToClassNameForSlots.esm.js"() {
      init_constants_esm();
      init_hashSequence_esm();
    }
  });

  // node_modules/@griffel/core/mergeClasses.esm.js
  function mergeClasses() {
    let dir = null;
    let resultClassName = "";
    let sequenceMatch = "";
    const sequencesIds = new Array(arguments.length);
    let containsResetClassName = "";
    for (let i = 0; i < arguments.length; i++) {
      const className = arguments[i];
      if (typeof className === "string" && className !== "") {
        const sequenceIndex = className.indexOf(SEQUENCE_PREFIX);
        if (sequenceIndex === -1) {
          if (true) {
            className.split(" ").forEach((entry) => {
              if (entry.startsWith(RESET_HASH_PREFIX) && DEBUG_RESET_CLASSES[entry]) {
                if (containsResetClassName) {
                  console.error(`mergeClasses(): a passed string contains multiple classes produced by makeResetStyles (${className} & ${resultClassName}, this will lead to non-deterministic behavior. Learn more:https://griffel.js.org/react/api/make-reset-styles#limitations
Source string: ${className}`);
                } else {
                  containsResetClassName = entry;
                }
              }
            });
          }
          resultClassName += className + " ";
        } else {
          const sequenceId = className.substr(sequenceIndex, SEQUENCE_SIZE);
          if (sequenceIndex > 0) {
            resultClassName += className.slice(0, sequenceIndex);
          }
          sequenceMatch += sequenceId;
          sequencesIds[i] = sequenceId;
        }
        if (true) {
          if (className.indexOf(SEQUENCE_PREFIX, sequenceIndex + 1) !== -1) {
            console.error(`mergeClasses(): a passed string contains multiple identifiers of atomic classes (classes that start with "${SEQUENCE_PREFIX}"), it's possible that passed classes were concatenated in a wrong way. Source string: ${className}`);
          }
        }
      }
    }
    if (sequenceMatch === "") {
      return resultClassName.slice(0, -1);
    }
    const mergeClassesResult = mergeClassesCachedResults[sequenceMatch];
    if (mergeClassesResult !== void 0) {
      return resultClassName + mergeClassesResult;
    }
    const sequenceMappings = [];
    for (let i = 0; i < arguments.length; i++) {
      const sequenceId = sequencesIds[i];
      if (sequenceId) {
        const sequenceMapping = DEFINITION_LOOKUP_TABLE[sequenceId];
        if (sequenceMapping) {
          sequenceMappings.push(sequenceMapping[LOOKUP_DEFINITIONS_INDEX]);
          if (true) {
            if (dir !== null && dir !== sequenceMapping[LOOKUP_DIR_INDEX]) {
              console.error(`mergeClasses(): a passed string contains an identifier (${sequenceId}) that has different direction (dir="${sequenceMapping[1] ? "rtl" : "ltr"}") setting than other classes. This is not supported. Source string: ${arguments[i]}`);
            }
          }
          dir = sequenceMapping[LOOKUP_DIR_INDEX];
        } else {
          if (true) {
            console.error(`mergeClasses(): a passed string contains an identifier (${sequenceId}) that does not match any entry in cache. Source string: ${arguments[i]}`);
          }
        }
      }
    }
    const resultClassesMap = Object.assign.apply(
      Object,
      // .assign() mutates the first object, we can't mutate mappings as it will produce invalid results later
      [{}].concat(sequenceMappings)
    );
    const [atomicClasses, classesMapHash] = reduceToClassName(resultClassesMap, dir);
    const newSequenceHash = hashSequence(classesMapHash, dir, sequencesIds);
    const newClassName = newSequenceHash + " " + atomicClasses;
    mergeClassesCachedResults[sequenceMatch] = newClassName;
    DEFINITION_LOOKUP_TABLE[newSequenceHash] = [resultClassesMap, dir];
    return resultClassName + newClassName;
  }
  var mergeClassesCachedResults;
  var init_mergeClasses_esm = __esm({
    "node_modules/@griffel/core/mergeClasses.esm.js"() {
      init_constants_esm();
      init_hashSequence_esm();
      init_reduceToClassNameForSlots_esm();
      mergeClassesCachedResults = {};
    }
  });

  // node_modules/@griffel/core/devtools/store.esm.js
  var sequenceDetails, cssRules, debugData;
  var init_store_esm = __esm({
    "node_modules/@griffel/core/devtools/store.esm.js"() {
      init_constants_esm();
      init_mergeClasses_esm();
      sequenceDetails = {};
      cssRules = /* @__PURE__ */ new Set();
      debugData = {
        getChildrenSequences: (debugSequenceHash) => {
          const key = Object.keys(mergeClassesCachedResults).find((key2) => mergeClassesCachedResults[key2].startsWith(debugSequenceHash));
          if (key) {
            return key.split(SEQUENCE_PREFIX).filter((sequence) => sequence.length).map((sequence) => SEQUENCE_PREFIX + sequence);
          }
          return [];
        },
        addCSSRule: (rule) => {
          cssRules.add(rule);
        },
        addSequenceDetails: (classNamesForSlots, sourceURL) => {
          Object.entries(classNamesForSlots).forEach(([slotName, sequenceHash]) => {
            sequenceDetails[sequenceHash.substring(0, SEQUENCE_SIZE)] = {
              slotName,
              sourceURL
            };
          });
        },
        getCSSRules: () => {
          return Array.from(cssRules);
        },
        getSequenceDetails: (sequenceHash) => {
          return sequenceDetails[sequenceHash];
        }
      };
    }
  });

  // node_modules/@griffel/core/devtools/utils.esm.js
  function getDirectionalClassName(classes, direction) {
    return Array.isArray(classes) ? direction === "rtl" ? classes[1] : classes[0] : classes || "";
  }
  function getDebugClassNames(lookupItem, parentLookupItem, parentDebugClassNames, overridingSiblings) {
    const classesMapping = lookupItem[0];
    const direction = lookupItem[1];
    return Object.entries(classesMapping).map(([propertyHash, classes]) => {
      const className = getDirectionalClassName(classes, direction);
      let overriddenBy;
      if (parentDebugClassNames && parentLookupItem) {
        const matching = parentDebugClassNames.find(({
          className: parentClassName
        }) => parentClassName === className);
        if (!matching && parentLookupItem[0][propertyHash]) {
          overriddenBy = getDirectionalClassName(parentLookupItem[0][propertyHash], parentLookupItem[1]);
        } else if (matching && parentLookupItem[0][propertyHash]) {
          const siblingHasSameRule = overridingSiblings ? overridingSiblings.filter(({
            debugClassNames
          }) => debugClassNames.filter(({
            className: siblingClassName
          }) => siblingClassName === className).length > 0).length > 0 : false;
          overriddenBy = siblingHasSameRule ? matching.className : matching.overriddenBy;
        } else if (!matching && !parentLookupItem[0][propertyHash]) {
          overriddenBy = void 0;
        } else if (matching && !parentLookupItem[0][propertyHash]) {
          overriddenBy = void 0;
        }
      }
      return {
        className,
        overriddenBy
      };
    });
  }
  var init_utils_esm2 = __esm({
    "node_modules/@griffel/core/devtools/utils.esm.js"() {
    }
  });

  // node_modules/@griffel/core/devtools/getAtomicDebugSequenceTree.esm.js
  function getAtomicDebugSequenceTree(debugSequenceHash, parentNode) {
    const lookupItem = DEFINITION_LOOKUP_TABLE[debugSequenceHash];
    if (lookupItem === void 0) {
      return void 0;
    }
    const parentLookupItem = parentNode ? DEFINITION_LOOKUP_TABLE[parentNode.sequenceHash] : void 0;
    const debugClassNames = getDebugClassNames(lookupItem, parentLookupItem, parentNode === null || parentNode === void 0 ? void 0 : parentNode.debugClassNames, parentNode === null || parentNode === void 0 ? void 0 : parentNode.children);
    const node2 = {
      sequenceHash: debugSequenceHash,
      direction: lookupItem[1],
      children: [],
      debugClassNames
    };
    const childrenSequences = debugData.getChildrenSequences(node2.sequenceHash);
    childrenSequences.reverse().forEach((sequence) => {
      const child = getAtomicDebugSequenceTree(sequence, node2);
      if (child) {
        node2.children.push(child);
      }
    });
    if (!node2.children.length) {
      node2.rules = {};
      node2.debugClassNames.forEach(({
        className
      }) => {
        const mapData = debugData.getSequenceDetails(debugSequenceHash);
        if (mapData) {
          node2.slot = mapData.slotName;
          node2.sourceURL = mapData.sourceURL;
        }
        const cssRule = debugData.getCSSRules().find((cssRule2) => {
          return cssRule2.includes(className);
        });
        node2.rules[className] = cssRule;
      });
    }
    return node2;
  }
  var init_getAtomicDebugSequenceTree_esm = __esm({
    "node_modules/@griffel/core/devtools/getAtomicDebugSequenceTree.esm.js"() {
      init_constants_esm();
      init_store_esm();
      init_utils_esm2();
    }
  });

  // node_modules/@griffel/core/devtools/getResetDebugSequence.esm.js
  function getResetDebugSequence(debugSequenceHash) {
    const resetClass = DEBUG_RESET_CLASSES[debugSequenceHash];
    if (resetClass === void 0) {
      return void 0;
    }
    const debugClassNames = [{
      className: debugSequenceHash
    }];
    const node2 = {
      sequenceHash: debugSequenceHash,
      direction: "ltr",
      children: [],
      debugClassNames
    };
    node2.rules = {};
    node2.slot = "makeResetStyles()";
    const [{
      className
    }] = node2.debugClassNames;
    const cssRules2 = debugData.getCSSRules().filter((cssRule) => {
      return cssRule.includes(`.${className}`);
    });
    node2.rules[className] = cssRules2.join("");
    return node2;
  }
  var init_getResetDebugSequence_esm = __esm({
    "node_modules/@griffel/core/devtools/getResetDebugSequence.esm.js"() {
      init_constants_esm();
      init_store_esm();
    }
  });

  // node_modules/@griffel/core/devtools/mergeDebugSequence.esm.js
  function mergeDebugSequence(atomicClases, resetClassName) {
    const debugResultRootAtomic = atomicClases ? getAtomicDebugSequenceTree(atomicClases) : void 0;
    const debugResultRootReset = resetClassName ? getResetDebugSequence(resetClassName) : void 0;
    if (!debugResultRootAtomic && !debugResultRootReset) {
      return void 0;
    }
    if (!debugResultRootAtomic) {
      return debugResultRootReset;
    }
    if (!debugResultRootReset) {
      return debugResultRootAtomic;
    }
    const debugResultRoot = {
      sequenceHash: debugResultRootAtomic.sequenceHash + debugResultRootReset.sequenceHash,
      direction: debugResultRootAtomic.direction,
      children: [debugResultRootAtomic, debugResultRootReset],
      debugClassNames: [...debugResultRootAtomic.debugClassNames, ...debugResultRootReset.debugClassNames]
    };
    return debugResultRoot;
  }
  var init_mergeDebugSequence_esm = __esm({
    "node_modules/@griffel/core/devtools/mergeDebugSequence.esm.js"() {
      init_getAtomicDebugSequenceTree_esm();
      init_getResetDebugSequence_esm();
    }
  });

  // node_modules/@griffel/core/devtools/injectDevTools.esm.js
  function injectDevTools(document2) {
    const window2 = document2.defaultView;
    if (!window2 || window2.__GRIFFEL_DEVTOOLS__) {
      return;
    }
    const devtools = {
      getInfo: (element) => {
        let rootDebugSequenceHash;
        let rootResetDebugClassName;
        for (const className of element.classList) {
          if (className.startsWith(SEQUENCE_PREFIX)) {
            rootDebugSequenceHash = className;
          }
          if (DEBUG_RESET_CLASSES[className]) {
            rootResetDebugClassName = className;
          }
        }
        return mergeDebugSequence(rootDebugSequenceHash, rootResetDebugClassName);
      }
    };
    Object.defineProperty(window2, "__GRIFFEL_DEVTOOLS__", {
      configurable: false,
      enumerable: false,
      get() {
        return devtools;
      }
    });
  }
  var init_injectDevTools_esm = __esm({
    "node_modules/@griffel/core/devtools/injectDevTools.esm.js"() {
      init_constants_esm();
      init_mergeDebugSequence_esm();
    }
  });

  // node_modules/@griffel/core/devtools/isDevToolsEnabled.esm.js
  var isDevToolsEnabled;
  var init_isDevToolsEnabled_esm = __esm({
    "node_modules/@griffel/core/devtools/isDevToolsEnabled.esm.js"() {
      isDevToolsEnabled = /* @__PURE__ */ (() => {
        var _a;
        try {
          return Boolean(typeof window !== "undefined" && ((_a = window.sessionStorage) === null || _a === void 0 ? void 0 : _a.getItem("__GRIFFEL_DEVTOOLS__")));
        } catch (e) {
          return false;
        }
      })();
    }
  });

  // node_modules/@griffel/core/runtime/utils/normalizeCSSBucketEntry.esm.js
  function normalizeCSSBucketEntry(entry) {
    if (!Array.isArray(entry)) {
      return [entry];
    }
    if (entry.length > 2) {
      throw new Error("CSS Bucket contains an entry with greater than 2 items, please report this to https://github.com/microsoft/griffel/issues");
    }
    return entry;
  }
  var init_normalizeCSSBucketEntry_esm = __esm({
    "node_modules/@griffel/core/runtime/utils/normalizeCSSBucketEntry.esm.js"() {
    }
  });

  // node_modules/@griffel/core/renderer/createIsomorphicStyleSheet.esm.js
  function createIsomorphicStyleSheet(styleElement, bucketName, priority, elementAttributes) {
    const __cssRulesForSSR = [];
    elementAttributes[DATA_BUCKET_ATTR] = bucketName;
    elementAttributes[DATA_PRIORITY_ATTR] = String(priority);
    if (styleElement) {
      for (const attrName in elementAttributes) {
        styleElement.setAttribute(attrName, elementAttributes[attrName]);
      }
    }
    function insertRule(rule) {
      if (styleElement === null || styleElement === void 0 ? void 0 : styleElement.sheet) {
        return styleElement.sheet.insertRule(rule, styleElement.sheet.cssRules.length);
      }
      return __cssRulesForSSR.push(rule);
    }
    return {
      elementAttributes,
      insertRule,
      element: styleElement,
      bucketName,
      cssRules() {
        if (styleElement === null || styleElement === void 0 ? void 0 : styleElement.sheet) {
          return Array.from(styleElement.sheet.cssRules).map((cssRule) => cssRule.cssText);
        }
        return __cssRulesForSSR;
      }
    };
  }
  var init_createIsomorphicStyleSheet_esm = __esm({
    "node_modules/@griffel/core/renderer/createIsomorphicStyleSheet.esm.js"() {
      init_constants_esm();
    }
  });

  // node_modules/@griffel/core/renderer/getStyleSheetForBucket.esm.js
  function getStyleSheetKey(bucketName, media, priority) {
    return (bucketName === "m" ? bucketName + media : bucketName) + priority;
  }
  function getStyleSheetForBucket(bucketName, targetDocument, insertionPoint, renderer, metadata = {}) {
    var _a, _b;
    const isMediaBucket = bucketName === "m";
    const media = (_a = metadata["m"]) !== null && _a !== void 0 ? _a : "0";
    const priority = (_b = metadata["p"]) !== null && _b !== void 0 ? _b : 0;
    const stylesheetKey = getStyleSheetKey(bucketName, media, priority);
    if (!renderer.stylesheets[stylesheetKey]) {
      const tag = targetDocument && targetDocument.createElement("style");
      const stylesheet = createIsomorphicStyleSheet(tag, bucketName, priority, Object.assign({}, renderer.styleElementAttributes, isMediaBucket && {
        media
      }));
      renderer.stylesheets[stylesheetKey] = stylesheet;
      if (targetDocument && tag) {
        targetDocument.head.insertBefore(tag, findInsertionPoint(targetDocument, insertionPoint, bucketName, renderer, metadata));
      }
    }
    return renderer.stylesheets[stylesheetKey];
  }
  function isSameInsertionKey(element, bucketName, metadata) {
    var _a, _b;
    const targetKey = bucketName + ((_a = metadata["m"]) !== null && _a !== void 0 ? _a : "");
    const elementKey = element.getAttribute(DATA_BUCKET_ATTR) + ((_b = element.media) !== null && _b !== void 0 ? _b : "");
    return targetKey === elementKey;
  }
  function findInsertionPoint(targetDocument, insertionPoint, targetBucket, renderer, metadata = {}) {
    var _a, _b;
    const targetOrder = styleBucketOrderingMap[targetBucket];
    const media = (_a = metadata["m"]) !== null && _a !== void 0 ? _a : "";
    const priority = (_b = metadata["p"]) !== null && _b !== void 0 ? _b : 0;
    let comparer = (el) => targetOrder - styleBucketOrderingMap[el.getAttribute(DATA_BUCKET_ATTR)];
    let styleElements = targetDocument.head.querySelectorAll(`[${DATA_BUCKET_ATTR}]`);
    if (targetBucket === "m") {
      const mediaElements = targetDocument.head.querySelectorAll(`[${DATA_BUCKET_ATTR}="${targetBucket}"]`);
      if (mediaElements.length) {
        styleElements = mediaElements;
        comparer = (el) => renderer.compareMediaQueries(media, el.media);
      }
    }
    const comparerWithPriority = (el) => {
      if (isSameInsertionKey(el, targetBucket, metadata)) {
        return priority - Number(el.getAttribute("data-priority"));
      }
      return comparer(el);
    };
    const length2 = styleElements.length;
    let index = length2 - 1;
    while (index >= 0) {
      const styleElement = styleElements.item(index);
      if (comparerWithPriority(styleElement) > 0) {
        return styleElement.nextSibling;
      }
      index--;
    }
    if (length2 > 0) {
      return styleElements.item(0);
    }
    return insertionPoint ? insertionPoint.nextSibling : null;
  }
  var styleBucketOrdering, styleBucketOrderingMap;
  var init_getStyleSheetForBucket_esm = __esm({
    "node_modules/@griffel/core/renderer/getStyleSheetForBucket.esm.js"() {
      init_constants_esm();
      init_createIsomorphicStyleSheet_esm();
      styleBucketOrdering = [
        // reset styles
        "r",
        // catch-all
        "d",
        // link
        "l",
        // visited
        "v",
        // focus-within
        "w",
        // focus
        "f",
        // focus-visible
        "i",
        // hover
        "h",
        // active
        "a",
        // at rules for reset styles
        "s",
        // keyframes
        "k",
        // at-rules
        "t",
        // @media rules
        "m",
        // @container rules
        "c"
      ];
      styleBucketOrderingMap = /* @__PURE__ */ styleBucketOrdering.reduce((acc, cur, j) => {
        acc[cur] = j;
        return acc;
      }, {});
    }
  });

  // node_modules/@griffel/core/renderer/safeInsertRule.esm.js
  function safeInsertRule(sheet, ruleCSS) {
    try {
      sheet.insertRule(ruleCSS);
    } catch (e) {
      if (!ignoreSuffixesRegex.test(ruleCSS)) {
        console.error(`There was a problem inserting the following rule: "${ruleCSS}"`, e);
      }
    }
  }
  var ignoreSuffixes, ignoreSuffixesRegex;
  var init_safeInsertRule_esm = __esm({
    "node_modules/@griffel/core/renderer/safeInsertRule.esm.js"() {
      ignoreSuffixes = /* @__PURE__ */ ["-moz-placeholder", "-moz-focus-inner", "-moz-focusring", "-ms-input-placeholder", "-moz-read-write", "-moz-read-only"].join("|");
      ignoreSuffixesRegex = /* @__PURE__ */ new RegExp(`:(${ignoreSuffixes})`);
    }
  });

  // node_modules/@griffel/core/renderer/createDOMRenderer.esm.js
  function createDOMRenderer(targetDocument = typeof document === "undefined" ? void 0 : document, options = {}) {
    const {
      classNameHashSalt,
      unstable_filterCSSRule,
      insertionPoint,
      styleElementAttributes,
      compareMediaQueries = defaultCompareMediaQueries
    } = options;
    const renderer = {
      classNameHashSalt,
      insertionCache: {},
      stylesheets: {},
      styleElementAttributes: Object.freeze(styleElementAttributes),
      compareMediaQueries,
      id: `d${lastIndex++}`,
      insertCSSRules(cssRules2) {
        for (const styleBucketName in cssRules2) {
          const cssRulesForBucket = cssRules2[styleBucketName];
          for (let i = 0, l = cssRulesForBucket.length; i < l; i++) {
            const [ruleCSS, metadata] = normalizeCSSBucketEntry(cssRulesForBucket[i]);
            const sheet = getStyleSheetForBucket(styleBucketName, targetDocument, insertionPoint || null, renderer, metadata);
            if (renderer.insertionCache[ruleCSS]) {
              continue;
            }
            renderer.insertionCache[ruleCSS] = styleBucketName;
            if (isDevToolsEnabled) {
              debugData.addCSSRule(ruleCSS);
            }
            if (unstable_filterCSSRule) {
              if (unstable_filterCSSRule(ruleCSS)) {
                safeInsertRule(sheet, ruleCSS);
              }
            } else {
              safeInsertRule(sheet, ruleCSS);
            }
          }
        }
      }
    };
    if (targetDocument && true && isDevToolsEnabled) {
      injectDevTools(targetDocument);
    }
    return renderer;
  }
  var lastIndex, defaultCompareMediaQueries;
  var init_createDOMRenderer_esm = __esm({
    "node_modules/@griffel/core/renderer/createDOMRenderer.esm.js"() {
      init_injectDevTools_esm();
      init_isDevToolsEnabled_esm();
      init_store_esm();
      init_normalizeCSSBucketEntry_esm();
      init_getStyleSheetForBucket_esm();
      init_safeInsertRule_esm();
      lastIndex = 0;
      defaultCompareMediaQueries = (a, b) => a < b ? -1 : a > b ? 1 : 0;
    }
  });

  // node_modules/@griffel/core/devtools/react-render-tracker/stackTrace.esm.js
  function parseStackTraceLine(line2) {
    return parseChrome(line2) || parseGecko(line2) || parseJSC(line2);
  }
  function parseChrome(line2) {
    const parts = chromeRe.exec(line2) || chromeRe2.exec(line2);
    if (!parts) {
      return null;
    }
    let loc = parts[2];
    const isNative = loc && loc.indexOf("native") === 0;
    const isEval = loc && loc.indexOf("eval") === 0;
    const submatch = chromeEvalRe.exec(loc);
    if (isEval && submatch != null) {
      loc = submatch[1];
    }
    return {
      loc: !isNative ? parts[2] : null,
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }
  function parseGecko(line2) {
    const parts = geckoRe.exec(line2);
    if (!parts) {
      return null;
    }
    let loc = parts[3];
    const isEval = loc && loc.indexOf(" > eval") > -1;
    const submatch = geckoEvalRe.exec(loc);
    if (isEval && submatch != null) {
      loc = submatch[1];
    }
    return {
      loc: parts[3],
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }
  function parseJSC(line2) {
    const parts = javaScriptCoreRe.exec(line2);
    if (!parts) {
      return null;
    }
    return {
      loc: parts[3],
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }
  var UNKNOWN_FUNCTION, chromeRe, chromeRe2, chromeEvalRe, geckoRe, geckoEvalRe, javaScriptCoreRe;
  var init_stackTrace_esm = __esm({
    "node_modules/@griffel/core/devtools/react-render-tracker/stackTrace.esm.js"() {
      UNKNOWN_FUNCTION = "<unknown>";
      chromeRe = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)?\)?\s*$/i;
      chromeRe2 = /^\s*at ()((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)\s*$/i;
      chromeEvalRe = /\((\S*)\)/;
      geckoRe = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)\s*$/i;
      geckoEvalRe = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
      javaScriptCoreRe = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?)\s*$/i;
    }
  });

  // node_modules/@griffel/core/devtools/getSourceURLfromError.esm.js
  function getSourceURLfromError() {
    const stacks = String(new Error().stack).split("\n");
    const userMakeStyleCallLine = findUserMakeStyleCallInStacks(stacks);
    if (userMakeStyleCallLine === void 0) {
      return void 0;
    }
    const result = parseStackTraceLine(userMakeStyleCallLine);
    return result === null || result === void 0 ? void 0 : result.loc;
  }
  function findUserMakeStyleCallInStacks(stacks) {
    for (let i = stacks.length - 1; i >= 0; --i) {
      if (stacks[i].includes("at getSourceURLfromError")) {
        return stacks[i + 3];
      }
    }
    return void 0;
  }
  var init_getSourceURLfromError_esm = __esm({
    "node_modules/@griffel/core/devtools/getSourceURLfromError.esm.js"() {
      init_stackTrace_esm();
    }
  });

  // node_modules/@griffel/core/insertionFactory.esm.js
  var insertionFactory;
  var init_insertionFactory_esm = __esm({
    "node_modules/@griffel/core/insertionFactory.esm.js"() {
      insertionFactory = () => {
        const insertionCache = {};
        return function insertStyles(renderer, cssRules2) {
          if (insertionCache[renderer.id] === void 0) {
            renderer.insertCSSRules(cssRules2);
            insertionCache[renderer.id] = true;
          }
        };
      };
    }
  });

  // node_modules/rtl-css-js/dist/esm/convert-9768a965.js
  function arrayToObject(array) {
    return array.reduce(function(obj, _ref) {
      var prop1 = _ref[0], prop2 = _ref[1];
      obj[prop1] = prop2;
      obj[prop2] = prop1;
      return obj;
    }, {});
  }
  function isBoolean(val) {
    return typeof val === "boolean";
  }
  function isFunction(val) {
    return typeof val === "function";
  }
  function isNumber(val) {
    return typeof val === "number";
  }
  function isNullOrUndefined(val) {
    return val === null || typeof val === "undefined";
  }
  function isObject(val) {
    return val && typeof val === "object";
  }
  function isString(val) {
    return typeof val === "string";
  }
  function includes(inclusive, inclusee) {
    return inclusive.indexOf(inclusee) !== -1;
  }
  function flipSign(value) {
    if (parseFloat(value) === 0) {
      return value;
    }
    if (value[0] === "-") {
      return value.slice(1);
    }
    return "-" + value;
  }
  function flipTransformSign(match2, prefix2, offset, suffix) {
    return prefix2 + flipSign(offset) + suffix;
  }
  function calculateNewBackgroundPosition(value) {
    var idx = value.indexOf(".");
    if (idx === -1) {
      value = 100 - parseFloat(value) + "%";
    } else {
      var len = value.length - idx - 2;
      value = 100 - parseFloat(value);
      value = value.toFixed(len) + "%";
    }
    return value;
  }
  function getValuesAsList(value) {
    return value.replace(/ +/g, " ").split(" ").map(function(i) {
      return i.trim();
    }).filter(Boolean).reduce(function(_ref2, item) {
      var list = _ref2.list, state = _ref2.state;
      var openParansCount = (item.match(/\(/g) || []).length;
      var closedParansCount = (item.match(/\)/g) || []).length;
      if (state.parensDepth > 0) {
        list[list.length - 1] = list[list.length - 1] + " " + item;
      } else {
        list.push(item);
      }
      state.parensDepth += openParansCount - closedParansCount;
      return {
        list,
        state
      };
    }, {
      list: [],
      state: {
        parensDepth: 0
      }
    }).list;
  }
  function handleQuartetValues(value) {
    var splitValues = getValuesAsList(value);
    if (splitValues.length <= 3 || splitValues.length > 4) {
      return value;
    }
    var top = splitValues[0], right = splitValues[1], bottom = splitValues[2], left = splitValues[3];
    return [top, left, bottom, right].join(" ");
  }
  function canConvertValue(value) {
    return !isBoolean(value) && !isNullOrUndefined(value);
  }
  function splitShadow(value) {
    var shadows = [];
    var start = 0;
    var end = 0;
    var rgba = false;
    while (end < value.length) {
      if (!rgba && value[end] === ",") {
        shadows.push(value.substring(start, end).trim());
        end++;
        start = end;
      } else if (value[end] === "(") {
        rgba = true;
        end++;
      } else if (value[end] === ")") {
        rgba = false;
        end++;
      } else {
        end++;
      }
    }
    if (start != end) {
      shadows.push(value.substring(start, end + 1));
    }
    return shadows;
  }
  function convert(object) {
    return Object.keys(object).reduce(function(newObj, originalKey) {
      var originalValue = object[originalKey];
      if (isString(originalValue)) {
        originalValue = originalValue.trim();
      }
      if (includes(propsToIgnore, originalKey)) {
        newObj[originalKey] = originalValue;
        return newObj;
      }
      var _convertProperty = convertProperty(originalKey, originalValue), key = _convertProperty.key, value = _convertProperty.value;
      newObj[key] = value;
      return newObj;
    }, Array.isArray(object) ? [] : {});
  }
  function convertProperty(originalKey, originalValue) {
    var isNoFlip = /\/\*\s?@noflip\s?\*\//.test(originalValue);
    var key = isNoFlip ? originalKey : getPropertyDoppelganger(originalKey);
    var value = isNoFlip ? originalValue : getValueDoppelganger(key, originalValue);
    return {
      key,
      value
    };
  }
  function getPropertyDoppelganger(property) {
    return propertiesToConvert[property] || property;
  }
  function getValueDoppelganger(key, originalValue) {
    if (!canConvertValue(originalValue)) {
      return originalValue;
    }
    if (isObject(originalValue)) {
      return convert(originalValue);
    }
    var isNum = isNumber(originalValue);
    var isFunc = isFunction(originalValue);
    var importantlessValue = isNum || isFunc ? originalValue : originalValue.replace(/ !important.*?$/, "");
    var isImportant = !isNum && importantlessValue.length !== originalValue.length;
    var valueConverter = propertyValueConverters[key];
    var newValue;
    if (valueConverter) {
      newValue = valueConverter({
        value: importantlessValue,
        valuesToConvert,
        propertiesToConvert,
        isRtl: true,
        bgImgDirectionRegex,
        bgPosDirectionRegex
      });
    } else {
      newValue = valuesToConvert[importantlessValue] || importantlessValue;
    }
    if (isImportant) {
      return newValue + " !important";
    }
    return newValue;
  }
  var propertyValueConverters, propertiesToConvert, propsToIgnore, valuesToConvert, bgImgDirectionRegex, bgPosDirectionRegex;
  var init_convert_9768a965 = __esm({
    "node_modules/rtl-css-js/dist/esm/convert-9768a965.js"() {
      propertyValueConverters = {
        padding: function padding2(_ref) {
          var value = _ref.value;
          if (isNumber(value)) {
            return value;
          }
          return handleQuartetValues(value);
        },
        textShadow: function textShadow(_ref2) {
          var value = _ref2.value;
          var flippedShadows = splitShadow(value).map(function(shadow) {
            return shadow.replace(/(^|\s)(-*)([.|\d]+)/, function(match2, whiteSpace, negative, number) {
              if (number === "0") {
                return match2;
              }
              var doubleNegative = negative === "" ? "-" : "";
              return "" + whiteSpace + doubleNegative + number;
            });
          });
          return flippedShadows.join(",");
        },
        borderColor: function borderColor2(_ref3) {
          var value = _ref3.value;
          return handleQuartetValues(value);
        },
        borderRadius: function borderRadius2(_ref4) {
          var value = _ref4.value;
          if (isNumber(value)) {
            return value;
          }
          if (includes(value, "/")) {
            var _value$split = value.split("/"), radius1 = _value$split[0], radius2 = _value$split[1];
            var convertedRadius1 = propertyValueConverters.borderRadius({
              value: radius1.trim()
            });
            var convertedRadius2 = propertyValueConverters.borderRadius({
              value: radius2.trim()
            });
            return convertedRadius1 + " / " + convertedRadius2;
          }
          var splitValues = getValuesAsList(value);
          switch (splitValues.length) {
            case 2: {
              return splitValues.reverse().join(" ");
            }
            case 4: {
              var topLeft = splitValues[0], topRight = splitValues[1], bottomRight = splitValues[2], bottomLeft = splitValues[3];
              return [topRight, topLeft, bottomLeft, bottomRight].join(" ");
            }
            default: {
              return value;
            }
          }
        },
        background: function background(_ref5) {
          var value = _ref5.value, valuesToConvert2 = _ref5.valuesToConvert, isRtl = _ref5.isRtl, bgImgDirectionRegex2 = _ref5.bgImgDirectionRegex, bgPosDirectionRegex2 = _ref5.bgPosDirectionRegex;
          if (isNumber(value)) {
            return value;
          }
          var backgroundPositionValue = value.replace(/(url\(.*?\))|(rgba?\(.*?\))|(hsl\(.*?\))|(#[a-fA-F0-9]+)|((^| )(\D)+( |$))/g, "").trim();
          value = value.replace(backgroundPositionValue, propertyValueConverters.backgroundPosition({
            value: backgroundPositionValue,
            valuesToConvert: valuesToConvert2,
            isRtl,
            bgPosDirectionRegex: bgPosDirectionRegex2
          }));
          return propertyValueConverters.backgroundImage({
            value,
            valuesToConvert: valuesToConvert2,
            bgImgDirectionRegex: bgImgDirectionRegex2
          });
        },
        backgroundImage: function backgroundImage(_ref6) {
          var value = _ref6.value, valuesToConvert2 = _ref6.valuesToConvert, bgImgDirectionRegex2 = _ref6.bgImgDirectionRegex;
          if (!includes(value, "url(") && !includes(value, "linear-gradient(")) {
            return value;
          }
          return value.replace(bgImgDirectionRegex2, function(match2, g1, group2) {
            return match2.replace(group2, valuesToConvert2[group2]);
          });
        },
        backgroundPosition: function backgroundPosition(_ref7) {
          var value = _ref7.value, valuesToConvert2 = _ref7.valuesToConvert, isRtl = _ref7.isRtl, bgPosDirectionRegex2 = _ref7.bgPosDirectionRegex;
          return value.replace(isRtl ? /^((-|\d|\.)+%)/ : null, function(match2, group) {
            return calculateNewBackgroundPosition(group);
          }).replace(bgPosDirectionRegex2, function(match2) {
            return valuesToConvert2[match2];
          });
        },
        backgroundPositionX: function backgroundPositionX(_ref8) {
          var value = _ref8.value, valuesToConvert2 = _ref8.valuesToConvert, isRtl = _ref8.isRtl, bgPosDirectionRegex2 = _ref8.bgPosDirectionRegex;
          if (isNumber(value)) {
            return value;
          }
          return propertyValueConverters.backgroundPosition({
            value,
            valuesToConvert: valuesToConvert2,
            isRtl,
            bgPosDirectionRegex: bgPosDirectionRegex2
          });
        },
        transition: function transition2(_ref9) {
          var value = _ref9.value, propertiesToConvert2 = _ref9.propertiesToConvert;
          return value.split(/,\s*/g).map(function(transition3) {
            var values2 = transition3.split(" ");
            values2[0] = propertiesToConvert2[values2[0]] || values2[0];
            return values2.join(" ");
          }).join(", ");
        },
        transitionProperty: function transitionProperty(_ref10) {
          var value = _ref10.value, propertiesToConvert2 = _ref10.propertiesToConvert;
          return value.split(/,\s*/g).map(function(prop) {
            return propertiesToConvert2[prop] || prop;
          }).join(", ");
        },
        transform: function transform(_ref11) {
          var value = _ref11.value;
          var nonAsciiPattern = "[^\\u0020-\\u007e]";
          var escapePattern = "(?:(?:(?:\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)|\\\\[^\\r\\n\\f0-9a-f])";
          var signedQuantPattern = "((?:-?" + ("(?:[0-9]*\\.[0-9]+|[0-9]+)(?:\\s*(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)|" + ("-?" + ("(?:[_a-z]|" + nonAsciiPattern + "|" + escapePattern + ")") + ("(?:[_a-z0-9-]|" + nonAsciiPattern + "|" + escapePattern + ")") + "*") + ")?") + ")|(?:inherit|auto))";
          var translateXRegExp = new RegExp("(translateX\\s*\\(\\s*)" + signedQuantPattern + "(\\s*\\))", "gi");
          var translateRegExp = new RegExp("(translate\\s*\\(\\s*)" + signedQuantPattern + "((?:\\s*,\\s*" + signedQuantPattern + "){0,1}\\s*\\))", "gi");
          var translate3dRegExp = new RegExp("(translate3d\\s*\\(\\s*)" + signedQuantPattern + "((?:\\s*,\\s*" + signedQuantPattern + "){0,2}\\s*\\))", "gi");
          var rotateRegExp = new RegExp("(rotate[ZY]?\\s*\\(\\s*)" + signedQuantPattern + "(\\s*\\))", "gi");
          return value.replace(translateXRegExp, flipTransformSign).replace(translateRegExp, flipTransformSign).replace(translate3dRegExp, flipTransformSign).replace(rotateRegExp, flipTransformSign);
        }
      };
      propertyValueConverters.objectPosition = propertyValueConverters.backgroundPosition;
      propertyValueConverters.margin = propertyValueConverters.padding;
      propertyValueConverters.borderWidth = propertyValueConverters.padding;
      propertyValueConverters.boxShadow = propertyValueConverters.textShadow;
      propertyValueConverters.webkitBoxShadow = propertyValueConverters.boxShadow;
      propertyValueConverters.mozBoxShadow = propertyValueConverters.boxShadow;
      propertyValueConverters.WebkitBoxShadow = propertyValueConverters.boxShadow;
      propertyValueConverters.MozBoxShadow = propertyValueConverters.boxShadow;
      propertyValueConverters.borderStyle = propertyValueConverters.borderColor;
      propertyValueConverters.webkitTransform = propertyValueConverters.transform;
      propertyValueConverters.mozTransform = propertyValueConverters.transform;
      propertyValueConverters.WebkitTransform = propertyValueConverters.transform;
      propertyValueConverters.MozTransform = propertyValueConverters.transform;
      propertyValueConverters.transformOrigin = propertyValueConverters.backgroundPosition;
      propertyValueConverters.webkitTransformOrigin = propertyValueConverters.transformOrigin;
      propertyValueConverters.mozTransformOrigin = propertyValueConverters.transformOrigin;
      propertyValueConverters.WebkitTransformOrigin = propertyValueConverters.transformOrigin;
      propertyValueConverters.MozTransformOrigin = propertyValueConverters.transformOrigin;
      propertyValueConverters.webkitTransition = propertyValueConverters.transition;
      propertyValueConverters.mozTransition = propertyValueConverters.transition;
      propertyValueConverters.WebkitTransition = propertyValueConverters.transition;
      propertyValueConverters.MozTransition = propertyValueConverters.transition;
      propertyValueConverters.webkitTransitionProperty = propertyValueConverters.transitionProperty;
      propertyValueConverters.mozTransitionProperty = propertyValueConverters.transitionProperty;
      propertyValueConverters.WebkitTransitionProperty = propertyValueConverters.transitionProperty;
      propertyValueConverters.MozTransitionProperty = propertyValueConverters.transitionProperty;
      propertyValueConverters["text-shadow"] = propertyValueConverters.textShadow;
      propertyValueConverters["border-color"] = propertyValueConverters.borderColor;
      propertyValueConverters["border-radius"] = propertyValueConverters.borderRadius;
      propertyValueConverters["background-image"] = propertyValueConverters.backgroundImage;
      propertyValueConverters["background-position"] = propertyValueConverters.backgroundPosition;
      propertyValueConverters["background-position-x"] = propertyValueConverters.backgroundPositionX;
      propertyValueConverters["object-position"] = propertyValueConverters.objectPosition;
      propertyValueConverters["border-width"] = propertyValueConverters.padding;
      propertyValueConverters["box-shadow"] = propertyValueConverters.textShadow;
      propertyValueConverters["-webkit-box-shadow"] = propertyValueConverters.textShadow;
      propertyValueConverters["-moz-box-shadow"] = propertyValueConverters.textShadow;
      propertyValueConverters["border-style"] = propertyValueConverters.borderColor;
      propertyValueConverters["-webkit-transform"] = propertyValueConverters.transform;
      propertyValueConverters["-moz-transform"] = propertyValueConverters.transform;
      propertyValueConverters["transform-origin"] = propertyValueConverters.transformOrigin;
      propertyValueConverters["-webkit-transform-origin"] = propertyValueConverters.transformOrigin;
      propertyValueConverters["-moz-transform-origin"] = propertyValueConverters.transformOrigin;
      propertyValueConverters["-webkit-transition"] = propertyValueConverters.transition;
      propertyValueConverters["-moz-transition"] = propertyValueConverters.transition;
      propertyValueConverters["transition-property"] = propertyValueConverters.transitionProperty;
      propertyValueConverters["-webkit-transition-property"] = propertyValueConverters.transitionProperty;
      propertyValueConverters["-moz-transition-property"] = propertyValueConverters.transitionProperty;
      propertiesToConvert = arrayToObject([
        ["paddingLeft", "paddingRight"],
        ["marginLeft", "marginRight"],
        ["left", "right"],
        ["borderLeft", "borderRight"],
        ["borderLeftColor", "borderRightColor"],
        ["borderLeftStyle", "borderRightStyle"],
        ["borderLeftWidth", "borderRightWidth"],
        ["borderTopLeftRadius", "borderTopRightRadius"],
        ["borderBottomLeftRadius", "borderBottomRightRadius"],
        // kebab-case versions
        ["padding-left", "padding-right"],
        ["margin-left", "margin-right"],
        ["border-left", "border-right"],
        ["border-left-color", "border-right-color"],
        ["border-left-style", "border-right-style"],
        ["border-left-width", "border-right-width"],
        ["border-top-left-radius", "border-top-right-radius"],
        ["border-bottom-left-radius", "border-bottom-right-radius"]
      ]);
      propsToIgnore = ["content"];
      valuesToConvert = arrayToObject([["ltr", "rtl"], ["left", "right"], ["w-resize", "e-resize"], ["sw-resize", "se-resize"], ["nw-resize", "ne-resize"]]);
      bgImgDirectionRegex = new RegExp("(^|\\W|_)((ltr)|(rtl)|(left)|(right))(\\W|_|$)", "g");
      bgPosDirectionRegex = new RegExp("(left)|(right)");
    }
  });

  // node_modules/rtl-css-js/dist/esm/core.js
  var init_core = __esm({
    "node_modules/rtl-css-js/dist/esm/core.js"() {
      init_convert_9768a965();
    }
  });

  // node_modules/@griffel/core/runtime/utils/hyphenateProperty.esm.js
  function toHyphenLower(match2) {
    return "-" + match2.toLowerCase();
  }
  function hyphenateProperty(name) {
    if (Object.prototype.hasOwnProperty.call(cache, name)) {
      return cache[name];
    }
    if (name.substr(0, 2) === "--") {
      return name;
    }
    const hName = name.replace(uppercasePattern, toHyphenLower);
    return cache[name] = msPattern.test(hName) ? "-" + hName : hName;
  }
  var uppercasePattern, msPattern, cache;
  var init_hyphenateProperty_esm = __esm({
    "node_modules/@griffel/core/runtime/utils/hyphenateProperty.esm.js"() {
      uppercasePattern = /[A-Z]/g;
      msPattern = /^ms-/;
      cache = {};
    }
  });

  // node_modules/@griffel/core/runtime/utils/normalizeNestedProperty.esm.js
  function normalizeNestedProperty(nestedProperty) {
    if (nestedProperty.charAt(0) === "&") {
      return nestedProperty.slice(1);
    }
    return nestedProperty;
  }
  var init_normalizeNestedProperty_esm = __esm({
    "node_modules/@griffel/core/runtime/utils/normalizeNestedProperty.esm.js"() {
    }
  });

  // node_modules/stylis/src/Enum.js
  var MOZ, WEBKIT, COMMENT, RULESET, DECLARATION, MEDIA, IMPORT, SUPPORTS, NAMESPACE, KEYFRAMES, LAYER;
  var init_Enum = __esm({
    "node_modules/stylis/src/Enum.js"() {
      MOZ = "-moz-";
      WEBKIT = "-webkit-";
      COMMENT = "comm";
      RULESET = "rule";
      DECLARATION = "decl";
      MEDIA = "@media";
      IMPORT = "@import";
      SUPPORTS = "@supports";
      NAMESPACE = "@namespace";
      KEYFRAMES = "@keyframes";
      LAYER = "@layer";
    }
  });

  // node_modules/stylis/src/Utility.js
  function hash(value, length2) {
    return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace2(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search, position2) {
    return value.indexOf(search, position2);
  }
  function charat(value, index) {
    return value.charCodeAt(index) | 0;
  }
  function substr(value, begin, end) {
    return value.slice(begin, end);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }
  var abs, from, assign;
  var init_Utility = __esm({
    "node_modules/stylis/src/Utility.js"() {
      abs = Math.abs;
      from = String.fromCharCode;
      assign = Object.assign;
    }
  });

  // node_modules/stylis/src/Tokenizer.js
  function node(value, root, parent, type, props, children, length2, siblings) {
    return { value, root, parent, type, props, children, line, column, length: length2, return: "", siblings };
  }
  function copy(root, props) {
    return assign(node("", null, null, "", null, null, 0, root.siblings), root, { length: -root.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice(begin, end) {
    return substr(characters, begin, end);
  }
  function token(type) {
    switch (type) {
      // \0 \t \n \r \s whitespace token
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      // ! + , / > @ ~ isolate token
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      // ; { } breakpoint token
      case 59:
      case 123:
      case 125:
        return 4;
      // : accompanied token
      case 58:
        return 3;
      // " ' ( [ opening delimit token
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      // ) ] closing delimit token
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function tokenize(value) {
    return dealloc(tokenizer(alloc(value)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function tokenizer(children) {
    while (next())
      switch (token(character)) {
        case 0:
          append(identifier(position - 1), children);
          break;
        case 2:
          append(delimit(character), children);
          break;
        default:
          append(from(character), children);
      }
    return children;
  }
  function escaping(index, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        // ] ) " '
        case type:
          return position;
        // " '
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        // (
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        // \
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type, index) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index) {
    while (!token(peek()))
      next();
    return slice(index, position);
  }
  var line, column, length, position, character, characters;
  var init_Tokenizer = __esm({
    "node_modules/stylis/src/Tokenizer.js"() {
      init_Utility();
      line = 1;
      column = 1;
      length = 0;
      position = 0;
      character = 0;
      characters = "";
    }
  });

  // node_modules/stylis/src/Parser.js
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index = 0;
    var offset = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules;
    var children = rulesets;
    var reference = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        // (
        case 40:
          if (previous != 108 && charat(characters2, length2 - 1) == 58) {
            if (indexof(characters2 += replace2(delimit(character2), "&", "&\f"), "&\f", abs(index ? points[index - 1] : 0)) != -1)
              ampersand = -1;
            break;
          }
        // " ' [
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        // \t \n \r \s
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        // \
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        // /
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root, parent, declarations), declarations);
              if ((token(previous || 1) == 5 || token(peek() || 1) == 5) && strlen(characters2) && substr(characters2, -1, void 0) !== " ") characters2 += " ";
              break;
            default:
              characters2 += "/";
          }
          break;
        // {
        case 123 * variable:
          points[index++] = strlen(characters2) * ampersand;
        // } ; \0
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            // \0 }
            case 0:
            case 125:
              scanning = 0;
            // ;
            case 59 + offset:
              if (ampersand == -1) characters2 = replace2(characters2, /\f/g, "");
              if (property > 0 && (strlen(characters2) - length2 || variable === 0 && previous === 47))
                append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1, declarations) : declaration(replace2(characters2, " ", "") + ";", rule, parent, length2 - 2, declarations), declarations);
              break;
            // @ ;
            case 59:
              characters2 += ";";
            // { rule/at-rule
            default:
              append(reference = ruleset(characters2, root, parent, index, offset, rules, points, type, props = [], children = [], length2, rulesets), rulesets);
              if (character2 === 123)
                if (offset === 0)
                  parse(characters2, root, reference, reference, props, rulesets, length2, points, children);
                else {
                  switch (atrule) {
                    // c(ontainer)
                    case 99:
                      if (charat(characters2, 3) === 110) break;
                    // l(ayer)
                    case 108:
                      if (charat(characters2, 2) === 97) break;
                    default:
                      offset = 0;
                    // d(ocument) m(edia) s(upports)
                    case 100:
                    case 109:
                    case 115:
                  }
                  if (offset) parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2, children), children), rules, children, length2, points, rule ? props : children);
                  else parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                }
          }
          index = offset = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        // :
        case 58:
          length2 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            // &
            case 38:
              ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
              break;
            // ,
            case 44:
              points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            // @
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            // -
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length2, siblings) {
    var post = offset - 1;
    var rule = offset === 0 ? rules : [""];
    var size = sizeof(rule);
    for (var i = 0, j = 0, k = 0; i < index; ++i)
      for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
        if (z = trim(j > 0 ? rule[x] + " " + y : replace2(y, /&\f/g, rule[x])))
          props[k++] = z;
    return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length2, siblings);
  }
  function comment(value, root, parent, siblings) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0, siblings);
  }
  function declaration(value, root, parent, length2, siblings) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2, siblings);
  }
  var init_Parser = __esm({
    "node_modules/stylis/src/Parser.js"() {
      init_Enum();
      init_Utility();
      init_Tokenizer();
    }
  });

  // node_modules/stylis/src/Prefixer.js
  var init_Prefixer = __esm({
    "node_modules/stylis/src/Prefixer.js"() {
    }
  });

  // node_modules/stylis/src/Serializer.js
  function serialize(children, callback) {
    var output = "";
    for (var i = 0; i < children.length; i++)
      output += callback(children[i], i, children, callback) || "";
    return output;
  }
  function stringify(element, index, children, callback) {
    switch (element.type) {
      case LAYER:
        if (element.children.length) break;
      case IMPORT:
      case NAMESPACE:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        if (!strlen(element.value = element.props.join(","))) return "";
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }
  var init_Serializer = __esm({
    "node_modules/stylis/src/Serializer.js"() {
      init_Enum();
      init_Utility();
    }
  });

  // node_modules/stylis/src/Middleware.js
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element, index, children, callback) {
      var output = "";
      for (var i = 0; i < length2; i++)
        output += collection[i](element, index, children, callback) || "";
      return output;
    };
  }
  function rulesheet(callback) {
    return function(element) {
      if (!element.root) {
        if (element = element.return)
          callback(element);
      }
    };
  }
  var init_Middleware = __esm({
    "node_modules/stylis/src/Middleware.js"() {
      init_Utility();
    }
  });

  // node_modules/stylis/index.js
  var init_stylis = __esm({
    "node_modules/stylis/index.js"() {
      init_Enum();
      init_Utility();
      init_Parser();
      init_Prefixer();
      init_Tokenizer();
      init_Serializer();
      init_Middleware();
    }
  });

  // node_modules/@griffel/core/runtime/stylis/globalPlugin.esm.js
  var globalPlugin;
  var init_globalPlugin_esm = __esm({
    "node_modules/@griffel/core/runtime/stylis/globalPlugin.esm.js"() {
      init_stylis();
      globalPlugin = (element) => {
        switch (element.type) {
          case RULESET:
            if (typeof element.props === "string") {
              if (true) {
                throw new Error(`"element.props" has type "string" (${JSON.stringify(element.props, null, 2)}), it's not expected. Please report a bug if it happens.`);
              }
              return;
            }
            element.props = element.props.map((value) => {
              if (value.indexOf(":global(") === -1) {
                return value;
              }
              return tokenize(value).reduce((acc, value2, index, children) => {
                if (value2 === "") {
                  return acc;
                }
                if (value2 === ":" && children[index + 1] === "global") {
                  const selector = (
                    // An inner part of ":global()"
                    children[index + 2].slice(1, -1) + // A separator between selectors i.e. "body .class"
                    " "
                  );
                  acc.unshift(selector);
                  children[index + 1] = "";
                  children[index + 2] = "";
                  return acc;
                }
                acc.push(value2);
                return acc;
              }, []).join("");
            });
        }
      };
    }
  });

  // node_modules/@griffel/core/runtime/stylis/prefixerPlugin.esm.js
  function prefix(value, length2, children) {
    switch (hash(value, length2)) {
      // color-adjust
      case 5103:
        return WEBKIT + "print-" + value + value;
      // backface-visibility, column, box-decoration-break
      case 3191:
      case 6645:
      case 3005:
      // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
        return WEBKIT + value + value;
      // backdrop-filter, background-clip: text
      case 4215:
        if (charat(value, 9) === 102) {
          return WEBKIT + value + value;
        }
        if (charat(value, length2 + 1) === 116) {
          return WEBKIT + value + value;
        }
        break;
      // tab-size
      case 4789:
        return MOZ + value + value;
      // appearance, user-select, hyphens
      case 5349:
      case 4246:
      case 6968:
        return WEBKIT + value + MOZ + value + value;
      // cursor
      // @ts-expect-error fall through is intentional here
      case 6187:
        if (!match(value, /grab/)) {
          return replace2(replace2(replace2(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
        }
      // background, background-image
      case 5495:
      case 3959:
        return replace2(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      // (margin|padding)-inline-(start|end)
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace2(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      // (min|max)?(width|height|inline-size|block-size)
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6) switch (charat(value, length2 + 1)) {
          // (f)ill-available
          // @ts-expect-error fall through is intentional here
          case 102:
            if (charat(value, length2 + 3) === 108) {
              return replace2(
                value,
                /(.+:)(.+)-([^]+)/,
                // eslint-disable-next-line no-useless-concat, eqeqeq
                "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")
              ) + value;
            }
          // (s)tretch
          case 115:
            return ~indexof(value, "stretch") ? prefix(replace2(value, "stretch", "fill-available"), length2) + value : value;
        }
        break;
    }
    return value;
  }
  function prefixerPlugin(element, index, children, callback) {
    if (element.length > -1) {
      if (!element.return) switch (element.type) {
        case DECLARATION:
          element.return = prefix(element.value, element.length);
          return;
        case RULESET:
          if (element.length)
            return combine(element.props, function(value) {
              switch (match(value, /(::plac\w+|:read-\w+)/)) {
                // :read-(only|write)
                case ":read-only":
                case ":read-write":
                  return serialize(
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    [copy(element, {
                      props: [replace2(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                    })],
                    callback
                  );
                // :placeholder
                case "::placeholder":
                  return serialize([
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    copy(element, {
                      props: [replace2(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                    }),
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    copy(element, {
                      props: [replace2(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                    })
                  ], callback);
              }
              return "";
            });
      }
    }
    return void 0;
  }
  var init_prefixerPlugin_esm = __esm({
    "node_modules/@griffel/core/runtime/stylis/prefixerPlugin.esm.js"() {
      init_stylis();
    }
  });

  // node_modules/@griffel/core/runtime/stylis/isAtRuleElement.esm.js
  function isAtRuleElement(element) {
    switch (element.type) {
      case "@container":
      case MEDIA:
      case SUPPORTS:
      case LAYER:
        return true;
    }
    return false;
  }
  var init_isAtRuleElement_esm = __esm({
    "node_modules/@griffel/core/runtime/stylis/isAtRuleElement.esm.js"() {
      init_stylis();
    }
  });

  // node_modules/@griffel/core/runtime/stylis/sortClassesInAtRulesPlugin.esm.js
  var sortClassesInAtRulesPlugin;
  var init_sortClassesInAtRulesPlugin_esm = __esm({
    "node_modules/@griffel/core/runtime/stylis/sortClassesInAtRulesPlugin.esm.js"() {
      init_isAtRuleElement_esm();
      sortClassesInAtRulesPlugin = (element) => {
        if (isAtRuleElement(element) && Array.isArray(element.children)) {
          element.children.sort((a, b) => a.props[0] > b.props[0] ? 1 : -1);
        }
      };
    }
  });

  // node_modules/@griffel/core/runtime/compileCSSRules.esm.js
  function noop() {
  }
  function compileCSSRules(cssRules2, sortClassesInAtRules) {
    const rules = [];
    serialize(compile(cssRules2), middleware([
      globalPlugin,
      sortClassesInAtRules ? sortClassesInAtRulesPlugin : noop,
      prefixerPlugin,
      stringify,
      // 💡 we are using `.insertRule()` API for DOM operations, which does not support
      // insertion of multiple CSS rules in a single call. `rulesheet` plugin extracts
      // individual rules to be used with this API
      rulesheet((rule) => rules.push(rule))
    ]));
    return rules;
  }
  var init_compileCSSRules_esm = __esm({
    "node_modules/@griffel/core/runtime/compileCSSRules.esm.js"() {
      init_stylis();
      init_globalPlugin_esm();
      init_prefixerPlugin_esm();
      init_sortClassesInAtRulesPlugin_esm();
    }
  });

  // node_modules/@griffel/core/runtime/compileAtomicCSSRule.esm.js
  function normalizePseudoSelector(pseudoSelector) {
    return "&" + normalizeNestedProperty(
      // Regex there replaces a comma, spaces and an ampersand if it's present with comma and an ampersand.
      // This allows to normalize input, see examples in JSDoc.
      pseudoSelector.replace(PSEUDO_SELECTOR_REGEX, ",&$1")
    );
  }
  function createCSSRule(classNameSelector, cssDeclaration, pseudos) {
    let cssRule = cssDeclaration;
    if (pseudos.length > 0) {
      cssRule = pseudos.reduceRight((acc, selector) => {
        return `${normalizePseudoSelector(selector)} { ${acc} }`;
      }, cssDeclaration);
    }
    return `${classNameSelector}{${cssRule}}`;
  }
  function compileAtomicCSSRule(options, atRules) {
    const {
      className,
      selectors,
      property,
      rtlClassName,
      rtlProperty,
      rtlValue,
      value
    } = options;
    const {
      container,
      layer,
      media,
      supports
    } = atRules;
    const classNameSelector = `.${className}`;
    const cssDeclaration = Array.isArray(value) ? `${value.map((v) => `${hyphenateProperty(property)}: ${v}`).join(";")};` : `${hyphenateProperty(property)}: ${value};`;
    let cssRule = createCSSRule(classNameSelector, cssDeclaration, selectors);
    if (rtlProperty && rtlClassName) {
      const rtlClassNameSelector = `.${rtlClassName}`;
      const rtlCSSDeclaration = Array.isArray(rtlValue) ? `${rtlValue.map((v) => `${hyphenateProperty(rtlProperty)}: ${v}`).join(";")};` : `${hyphenateProperty(rtlProperty)}: ${rtlValue};`;
      cssRule += createCSSRule(rtlClassNameSelector, rtlCSSDeclaration, selectors);
    }
    if (media) {
      cssRule = `@media ${media} { ${cssRule} }`;
    }
    if (layer) {
      cssRule = `@layer ${layer} { ${cssRule} }`;
    }
    if (supports) {
      cssRule = `@supports ${supports} { ${cssRule} }`;
    }
    if (container) {
      cssRule = `@container ${container} { ${cssRule} }`;
    }
    return compileCSSRules(cssRule, true);
  }
  var PSEUDO_SELECTOR_REGEX;
  var init_compileAtomicCSSRule_esm = __esm({
    "node_modules/@griffel/core/runtime/compileAtomicCSSRule.esm.js"() {
      init_hyphenateProperty_esm();
      init_normalizeNestedProperty_esm();
      init_compileCSSRules_esm();
      PSEUDO_SELECTOR_REGEX = /,( *[^ &])/g;
    }
  });

  // node_modules/@griffel/core/runtime/utils/cssifyObject.esm.js
  function cssifyObject(style) {
    let css = "";
    for (const property in style) {
      const value = style[property];
      if (typeof value === "string" || typeof value === "number") {
        css += hyphenateProperty(property) + ":" + value + ";";
        continue;
      }
      if (Array.isArray(value)) {
        for (const arrValue of value) {
          css += hyphenateProperty(property) + ":" + arrValue + ";";
        }
      }
    }
    return css;
  }
  var init_cssifyObject_esm = __esm({
    "node_modules/@griffel/core/runtime/utils/cssifyObject.esm.js"() {
      init_hyphenateProperty_esm();
    }
  });

  // node_modules/@griffel/core/runtime/compileKeyframeCSS.esm.js
  function compileKeyframeRule(keyframeObject) {
    let css = "";
    for (const percentage in keyframeObject) {
      css += `${percentage}{${cssifyObject(keyframeObject[percentage])}}`;
    }
    return css;
  }
  function compileKeyframesCSS(keyframeName, keyframeCSS) {
    const cssRule = `@keyframes ${keyframeName} {${keyframeCSS}}`;
    const rules = [];
    serialize(compile(cssRule), middleware([
      stringify,
      prefixerPlugin,
      // 💡 we are using `.insertRule()` API for DOM operations, which does not support
      // insertion of multiple CSS rules in a single call. `rulesheet` plugin extracts
      // individual rules to be used with this API
      rulesheet((rule) => rules.push(rule))
    ]));
    return rules;
  }
  var init_compileKeyframeCSS_esm = __esm({
    "node_modules/@griffel/core/runtime/compileKeyframeCSS.esm.js"() {
      init_stylis();
      init_prefixerPlugin_esm();
      init_cssifyObject_esm();
    }
  });

  // node_modules/@griffel/core/runtime/shorthands.esm.js
  var shorthands;
  var init_shorthands_esm = __esm({
    "node_modules/@griffel/core/runtime/shorthands.esm.js"() {
      shorthands = {
        animation: [-1, ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimeline", "animationTimingFunction"]],
        animationRange: [-1, ["animationRangeEnd", "animationRangeStart"]],
        background: [-2, ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPosition", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"]],
        backgroundPosition: [-1, ["backgroundPositionX", "backgroundPositionY"]],
        border: [-2, ["borderBottom", "borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderLeft", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRight", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTop", "borderTopColor", "borderTopStyle", "borderTopWidth"]],
        borderBottom: [-1, ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"]],
        borderImage: [-1, ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"]],
        borderLeft: [-1, ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"]],
        borderRadius: [-1, ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"]],
        borderRight: [-1, ["borderRightColor", "borderRightStyle", "borderRightWidth"]],
        borderTop: [-1, ["borderTopColor", "borderTopStyle", "borderTopWidth"]],
        caret: [-1, ["caretColor", "caretShape"]],
        columnRule: [-1, ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"]],
        columns: [-1, ["columnCount", "columnWidth"]],
        containIntrinsicSize: [-1, ["containIntrinsicHeight", "containIntrinsicWidth"]],
        container: [-1, ["containerName", "containerType"]],
        flex: [-1, ["flexBasis", "flexGrow", "flexShrink"]],
        flexFlow: [-1, ["flexDirection", "flexWrap"]],
        font: [-1, ["fontFamily", "fontSize", "fontStretch", "fontStyle", "fontVariant", "fontWeight", "lineHeight"]],
        gap: [-1, ["columnGap", "rowGap"]],
        grid: [-1, ["columnGap", "gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridColumnGap", "gridRowGap", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows", "rowGap"]],
        gridArea: [-1, ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"]],
        gridColumn: [-1, ["gridColumnEnd", "gridColumnStart"]],
        gridRow: [-1, ["gridRowEnd", "gridRowStart"]],
        gridTemplate: [-1, ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"]],
        inset: [-1, ["bottom", "left", "right", "top"]],
        insetBlock: [-1, ["insetBlockEnd", "insetBlockStart"]],
        insetInline: [-1, ["insetInlineEnd", "insetInlineStart"]],
        listStyle: [-1, ["listStyleImage", "listStylePosition", "listStyleType"]],
        margin: [-1, ["marginBottom", "marginLeft", "marginRight", "marginTop"]],
        marginBlock: [-1, ["marginBlockEnd", "marginBlockStart"]],
        marginInline: [-1, ["marginInlineEnd", "marginInlineStart"]],
        mask: [-1, ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPosition", "maskRepeat", "maskSize"]],
        maskBorder: [-1, ["maskBorderMode", "maskBorderOutset", "maskBorderRepeat", "maskBorderSlice", "maskBorderSource", "maskBorderWidth"]],
        offset: [-1, ["offsetAnchor", "offsetDistance", "offsetPath", "offsetPosition", "offsetRotate"]],
        outline: [-1, ["outlineColor", "outlineStyle", "outlineWidth"]],
        overflow: [-1, ["overflowX", "overflowY"]],
        overscrollBehavior: [-1, ["overscrollBehaviorX", "overscrollBehaviorY"]],
        padding: [-1, ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"]],
        paddingBlock: [-1, ["paddingBlockEnd", "paddingBlockStart"]],
        paddingInline: [-1, ["paddingInlineEnd", "paddingInlineStart"]],
        placeContent: [-1, ["alignContent", "justifyContent"]],
        placeItems: [-1, ["alignItems", "justifyItems"]],
        placeSelf: [-1, ["alignSelf", "justifySelf"]],
        scrollMargin: [-1, ["scrollMarginBottom", "scrollMarginLeft", "scrollMarginRight", "scrollMarginTop"]],
        scrollMarginBlock: [-1, ["scrollMarginBlockEnd", "scrollMarginBlockStart"]],
        scrollMarginInline: [-1, ["scrollMarginInlineEnd", "scrollMarginInlineStart"]],
        scrollPadding: [-1, ["scrollPaddingBottom", "scrollPaddingLeft", "scrollPaddingRight", "scrollPaddingTop"]],
        scrollPaddingBlock: [-1, ["scrollPaddingBlockEnd", "scrollPaddingBlockStart"]],
        scrollPaddingInline: [-1, ["scrollPaddingInlineEnd", "scrollPaddingInlineStart"]],
        scrollTimeline: [-1, ["scrollTimelineAxis", "scrollTimelineName"]],
        textDecoration: [-1, ["textDecorationColor", "textDecorationLine", "textDecorationStyle", "textDecorationThickness"]],
        textEmphasis: [-1, ["textEmphasisColor", "textEmphasisStyle"]],
        transition: [-1, ["transitionBehavior", "transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"]],
        viewTimeline: [-1, ["viewTimelineAxis", "viewTimelineName"]]
      };
    }
  });

  // node_modules/@griffel/core/runtime/utils/generateCombinedMediaQuery.esm.js
  function generateCombinedQuery(currentMediaQuery, nestedMediaQuery) {
    if (currentMediaQuery.length === 0) {
      return nestedMediaQuery;
    }
    return `${currentMediaQuery} and ${nestedMediaQuery}`;
  }
  var init_generateCombinedMediaQuery_esm = __esm({
    "node_modules/@griffel/core/runtime/utils/generateCombinedMediaQuery.esm.js"() {
    }
  });

  // node_modules/@griffel/core/runtime/utils/isMediaQuerySelector.esm.js
  function isMediaQuerySelector(property) {
    return property.substr(0, 6) === "@media";
  }
  var init_isMediaQuerySelector_esm = __esm({
    "node_modules/@griffel/core/runtime/utils/isMediaQuerySelector.esm.js"() {
    }
  });

  // node_modules/@griffel/core/runtime/utils/isLayerSelector.esm.js
  function isLayerSelector(property) {
    return property.substr(0, 6) === "@layer";
  }
  var init_isLayerSelector_esm = __esm({
    "node_modules/@griffel/core/runtime/utils/isLayerSelector.esm.js"() {
    }
  });

  // node_modules/@griffel/core/runtime/utils/isNestedSelector.esm.js
  function isNestedSelector(property) {
    return regex.test(property);
  }
  var regex;
  var init_isNestedSelector_esm = __esm({
    "node_modules/@griffel/core/runtime/utils/isNestedSelector.esm.js"() {
      regex = /^(:|\[|>|&)/;
    }
  });

  // node_modules/@griffel/core/runtime/utils/isSupportQuerySelector.esm.js
  function isSupportQuerySelector(property) {
    return property.substr(0, 9) === "@supports";
  }
  var init_isSupportQuerySelector_esm = __esm({
    "node_modules/@griffel/core/runtime/utils/isSupportQuerySelector.esm.js"() {
    }
  });

  // node_modules/@griffel/core/runtime/utils/isContainerQuerySelector.esm.js
  function isContainerQuerySelector(property) {
    return property.substring(0, 10) === "@container";
  }
  var init_isContainerQuerySelector_esm = __esm({
    "node_modules/@griffel/core/runtime/utils/isContainerQuerySelector.esm.js"() {
    }
  });

  // node_modules/@griffel/core/runtime/utils/isObject.esm.js
  function isObject2(val) {
    return val != null && typeof val === "object" && Array.isArray(val) === false;
  }
  var init_isObject_esm = __esm({
    "node_modules/@griffel/core/runtime/utils/isObject.esm.js"() {
    }
  });

  // node_modules/@griffel/core/runtime/getStyleBucketName.esm.js
  function getStyleBucketName(selectors, atRules) {
    if (atRules.media) {
      return "m";
    }
    if (atRules.layer || atRules.supports) {
      return "t";
    }
    if (atRules.container) {
      return "c";
    }
    if (selectors.length > 0) {
      const normalizedPseudo = selectors[0].trim();
      if (normalizedPseudo.charCodeAt(0) === 58) {
        return pseudosMap[normalizedPseudo.slice(4, 8)] || pseudosMap[normalizedPseudo.slice(3, 5)] || "d";
      }
    }
    return "d";
  }
  var pseudosMap;
  var init_getStyleBucketName_esm = __esm({
    "node_modules/@griffel/core/runtime/getStyleBucketName.esm.js"() {
      pseudosMap = {
        // :focus-within
        "us-w": "w",
        // :focus-visible
        "us-v": "i",
        // :link
        nk: "l",
        // :visited
        si: "v",
        // :focus
        cu: "f",
        // :hover
        ve: "h",
        // :active
        ti: "a"
      };
    }
  });

  // node_modules/@griffel/core/runtime/utils/hashPropertyKey.esm.js
  function addAtRulePrefix(atRule, prefix2) {
    return atRule ? prefix2 + atRule : atRule;
  }
  function atRulesToString(atRules) {
    return addAtRulePrefix(atRules.container, "c") + addAtRulePrefix(atRules.media, "m") + addAtRulePrefix(atRules.layer, "l") + addAtRulePrefix(atRules.supports, "s");
  }
  function hashPropertyKey(selector, property, atRules) {
    const computedKey = selector + atRulesToString(atRules) + property;
    const hashedKey = murmur2(computedKey);
    const firstCharCode = hashedKey.charCodeAt(0);
    const startsWithNumber = firstCharCode >= 48 && firstCharCode <= 57;
    if (startsWithNumber) {
      return String.fromCharCode(firstCharCode + 17) + hashedKey.slice(1);
    }
    return hashedKey;
  }
  var init_hashPropertyKey_esm = __esm({
    "node_modules/@griffel/core/runtime/utils/hashPropertyKey.esm.js"() {
      init_emotion_hash_esm();
    }
  });

  // node_modules/@griffel/core/runtime/utils/hashClassName.esm.js
  function hashClassName({
    property,
    selector,
    salt,
    value
  }, atRules) {
    return HASH_PREFIX + murmur2(salt + selector + atRulesToString(atRules) + property + // Trimming of value is required to generate consistent hashes
    value.trim());
  }
  var init_hashClassName_esm = __esm({
    "node_modules/@griffel/core/runtime/utils/hashClassName.esm.js"() {
      init_emotion_hash_esm();
      init_constants_esm();
      init_hashPropertyKey_esm();
    }
  });

  // node_modules/@griffel/core/runtime/utils/isResetValue.esm.js
  function isResetValue(value) {
    return value === RESET;
  }
  var init_isResetValue_esm = __esm({
    "node_modules/@griffel/core/runtime/utils/isResetValue.esm.js"() {
      init_constants_esm();
    }
  });

  // node_modules/@griffel/core/runtime/utils/trimSelector.esm.js
  function trimSelector(selector) {
    return selector.replace(/>\s+/g, ">");
  }
  var init_trimSelector_esm = __esm({
    "node_modules/@griffel/core/runtime/utils/trimSelector.esm.js"() {
    }
  });

  // node_modules/@griffel/core/runtime/warnings/logError.esm.js
  function logError(...args) {
    if (typeof document !== "undefined") {
      console.error(...args);
    }
  }
  var init_logError_esm = __esm({
    "node_modules/@griffel/core/runtime/warnings/logError.esm.js"() {
    }
  });

  // node_modules/@griffel/core/runtime/warnings/warnAboutUnresolvedRule.esm.js
  function warnAboutUnresolvedRule(property, value) {
    const message = /* @__PURE__ */ (() => {
      const ruleText = JSON.stringify(value, null, 2);
      const message2 = ["@griffel/react: A rule was not resolved to CSS properly. Please check your `makeStyles` or `makeResetStyles` calls for following:", " ".repeat(2) + "makeStyles({", " ".repeat(4) + `[slot]: {`, " ".repeat(6) + `"${property}": ${ruleText.split("\n").map((l, n) => " ".repeat(n === 0 ? 0 : 6) + l).join("\n")}`, " ".repeat(4) + "}", " ".repeat(2) + `})`, ""];
      if (property.indexOf("&") === -1) {
        message2.push(`It looks that you're are using a nested selector, but it is missing an ampersand placeholder where the generated class name should be injected.`);
        message2.push(`Try to update a property to include it i.e "${property}" => "&${property}".`);
      } else {
        message2.push("");
        message2.push("If it's not obvious what triggers a problem, please report an issue at https://github.com/microsoft/griffel/issues");
      }
      return message2.join("\n");
    })();
    logError(message);
  }
  var init_warnAboutUnresolvedRule_esm = __esm({
    "node_modules/@griffel/core/runtime/warnings/warnAboutUnresolvedRule.esm.js"() {
      init_logError_esm();
    }
  });

  // node_modules/@griffel/core/runtime/warnings/warnAboutUnsupportedProperties.esm.js
  function warnAboutUnsupportedProperties(property, value) {
    const message = /* @__PURE__ */ (() => [`@griffel/react: You are using unsupported shorthand CSS property "${property}". Please check your "makeStyles" calls, there *should not* be following:`, " ".repeat(2) + `makeStyles({`, " ".repeat(4) + `[slot]: { ${property}: "${value}" }`, " ".repeat(2) + `})`, "", "Learn why CSS shorthands are not supported: https://aka.ms/griffel-css-shorthands"].join("\n"))();
    logError(message);
  }
  var init_warnAboutUnsupportedProperties_esm = __esm({
    "node_modules/@griffel/core/runtime/warnings/warnAboutUnsupportedProperties.esm.js"() {
      init_logError_esm();
    }
  });

  // node_modules/@griffel/core/runtime/resolveStyleRules.esm.js
  function getShorthandDefinition(property) {
    return shorthands[property];
  }
  function computePropertyPriority(shorthand) {
    var _a;
    return (_a = shorthand === null || shorthand === void 0 ? void 0 : shorthand[0]) !== null && _a !== void 0 ? _a : 0;
  }
  function pushToClassesMap(classesMap, propertyKey, ltrClassname, rtlClassname) {
    classesMap[propertyKey] = rtlClassname ? [ltrClassname, rtlClassname] : ltrClassname;
  }
  function createBucketEntry(cssRule, metadata) {
    if (metadata.length > 0) {
      return [cssRule, Object.fromEntries(metadata)];
    }
    return cssRule;
  }
  function pushToCSSRules(cssRulesByBucket, styleBucketName, ltrCSS, rtlCSS, media, priority) {
    var _a;
    const metadata = [];
    if (priority !== 0) {
      metadata.push(["p", priority]);
    }
    if (styleBucketName === "m" && media) {
      metadata.push(["m", media]);
    }
    (_a = cssRulesByBucket[styleBucketName]) !== null && _a !== void 0 ? _a : cssRulesByBucket[styleBucketName] = [];
    if (ltrCSS) {
      cssRulesByBucket[styleBucketName].push(createBucketEntry(ltrCSS, metadata));
    }
    if (rtlCSS) {
      cssRulesByBucket[styleBucketName].push(createBucketEntry(rtlCSS, metadata));
    }
  }
  function resolveStyleRules(styles, classNameHashSalt = "", selectors = [], atRules = {
    container: "",
    layer: "",
    media: "",
    supports: ""
  }, cssClassesMap = {}, cssRulesByBucket = {}, rtlValue) {
    for (const property in styles) {
      if (UNSUPPORTED_CSS_PROPERTIES.hasOwnProperty(property)) {
        warnAboutUnsupportedProperties(property, styles[property]);
        continue;
      }
      const value = styles[property];
      if (value == null) {
        continue;
      }
      if (isResetValue(value)) {
        const selector = trimSelector(selectors.join(""));
        const key = hashPropertyKey(selector, property, atRules);
        pushToClassesMap(cssClassesMap, key, 0, void 0);
        continue;
      }
      if (typeof value === "string" || typeof value === "number") {
        const selector = trimSelector(selectors.join(""));
        const shorthand = getShorthandDefinition(property);
        if (shorthand) {
          const shorthandProperties = shorthand[1];
          const shorthandResetStyles = Object.fromEntries(shorthandProperties.map((property2) => [property2, RESET]));
          resolveStyleRules(shorthandResetStyles, classNameHashSalt, selectors, atRules, cssClassesMap, cssRulesByBucket);
        }
        const key = hashPropertyKey(selector, property, atRules);
        const className = hashClassName({
          value: value.toString(),
          salt: classNameHashSalt,
          selector,
          property
        }, atRules);
        const rtlDefinition = rtlValue && {
          key: property,
          value: rtlValue
        } || convertProperty(property, value);
        const flippedInRtl = rtlDefinition.key !== property || rtlDefinition.value !== value;
        const rtlClassName = flippedInRtl ? hashClassName({
          value: rtlDefinition.value.toString(),
          property: rtlDefinition.key,
          salt: classNameHashSalt,
          selector
        }, atRules) : void 0;
        const rtlCompileOptions = flippedInRtl ? {
          rtlClassName,
          rtlProperty: rtlDefinition.key,
          rtlValue: rtlDefinition.value
        } : void 0;
        const styleBucketName = getStyleBucketName(selectors, atRules);
        const [ltrCSS, rtlCSS] = compileAtomicCSSRule(Object.assign({
          className,
          selectors,
          property,
          value
        }, rtlCompileOptions), atRules);
        pushToClassesMap(cssClassesMap, key, className, rtlClassName);
        pushToCSSRules(cssRulesByBucket, styleBucketName, ltrCSS, rtlCSS, atRules.media, computePropertyPriority(shorthand));
      } else if (property === "animationName") {
        const animationNameValue = Array.isArray(value) ? value : [value];
        const animationNames = [];
        const rtlAnimationNames = [];
        for (const keyframeObject of animationNameValue) {
          const keyframeCSS = compileKeyframeRule(keyframeObject);
          const rtlKeyframeCSS = compileKeyframeRule(convert(keyframeObject));
          const animationName = HASH_PREFIX + murmur2(keyframeCSS);
          let rtlAnimationName;
          const keyframeRules = compileKeyframesCSS(animationName, keyframeCSS);
          let rtlKeyframeRules = [];
          if (keyframeCSS === rtlKeyframeCSS) {
            rtlAnimationName = animationName;
          } else {
            rtlAnimationName = HASH_PREFIX + murmur2(rtlKeyframeCSS);
            rtlKeyframeRules = compileKeyframesCSS(rtlAnimationName, rtlKeyframeCSS);
          }
          for (let i = 0; i < keyframeRules.length; i++) {
            pushToCSSRules(
              cssRulesByBucket,
              // keyframes styles should be inserted into own bucket
              "k",
              keyframeRules[i],
              rtlKeyframeRules[i],
              atRules.media,
              // keyframes always have default priority
              0
            );
          }
          animationNames.push(animationName);
          rtlAnimationNames.push(rtlAnimationName);
        }
        resolveStyleRules({
          animationName: animationNames.join(", ")
        }, classNameHashSalt, selectors, atRules, cssClassesMap, cssRulesByBucket, rtlAnimationNames.join(", "));
      } else if (Array.isArray(value)) {
        if (value.length === 0) {
          if (true) {
            console.warn(`makeStyles(): An empty array was passed as input to "${property}", the property will be omitted in the styles.`);
          }
          continue;
        }
        const selector = trimSelector(selectors.join(""));
        const shorthand = getShorthandDefinition(property);
        if (shorthand) {
          const shorthandProperties = shorthand[1];
          const shorthandResetStyles = Object.fromEntries(shorthandProperties.map((property2) => [property2, RESET]));
          resolveStyleRules(shorthandResetStyles, classNameHashSalt, selectors, atRules, cssClassesMap, cssRulesByBucket);
        }
        const key = hashPropertyKey(selector, property, atRules);
        const className = hashClassName({
          value: value.map((v) => (v !== null && v !== void 0 ? v : "").toString()).join(";"),
          salt: classNameHashSalt,
          selector,
          property
        }, atRules);
        const rtlDefinitions = value.map((v) => convertProperty(property, v));
        const rtlPropertyConsistent = !rtlDefinitions.some((v) => v.key !== rtlDefinitions[0].key);
        if (!rtlPropertyConsistent) {
          if (true) {
            console.error("makeStyles(): mixing CSS fallback values which result in multiple CSS properties in RTL is not supported.");
          }
          continue;
        }
        const flippedInRtl = rtlDefinitions[0].key !== property || rtlDefinitions.some((v, i) => v.value !== value[i]);
        const rtlClassName = flippedInRtl ? hashClassName({
          value: rtlDefinitions.map((v) => {
            var _a;
            return ((_a = v === null || v === void 0 ? void 0 : v.value) !== null && _a !== void 0 ? _a : "").toString();
          }).join(";"),
          salt: classNameHashSalt,
          property: rtlDefinitions[0].key,
          selector
        }, atRules) : void 0;
        const rtlCompileOptions = flippedInRtl ? {
          rtlClassName,
          rtlProperty: rtlDefinitions[0].key,
          rtlValue: rtlDefinitions.map((d) => d.value)
        } : void 0;
        const styleBucketName = getStyleBucketName(selectors, atRules);
        const [ltrCSS, rtlCSS] = compileAtomicCSSRule(Object.assign({
          className,
          selectors,
          property,
          value
        }, rtlCompileOptions), atRules);
        pushToClassesMap(cssClassesMap, key, className, rtlClassName);
        pushToCSSRules(cssRulesByBucket, styleBucketName, ltrCSS, rtlCSS, atRules.media, computePropertyPriority(shorthand));
      } else if (isObject2(value)) {
        if (isNestedSelector(property)) {
          resolveStyleRules(value, classNameHashSalt, selectors.concat(normalizeNestedProperty(property)), atRules, cssClassesMap, cssRulesByBucket);
        } else if (isMediaQuerySelector(property)) {
          const combinedMediaQuery = generateCombinedQuery(atRules.media, property.slice(6).trim());
          resolveStyleRules(value, classNameHashSalt, selectors, Object.assign({}, atRules, {
            media: combinedMediaQuery
          }), cssClassesMap, cssRulesByBucket);
        } else if (isLayerSelector(property)) {
          const combinedLayerQuery = (atRules.layer ? `${atRules.layer}.` : "") + property.slice(6).trim();
          resolveStyleRules(value, classNameHashSalt, selectors, Object.assign({}, atRules, {
            layer: combinedLayerQuery
          }), cssClassesMap, cssRulesByBucket);
        } else if (isSupportQuerySelector(property)) {
          const combinedSupportQuery = generateCombinedQuery(atRules.supports, property.slice(9).trim());
          resolveStyleRules(value, classNameHashSalt, selectors, Object.assign({}, atRules, {
            supports: combinedSupportQuery
          }), cssClassesMap, cssRulesByBucket);
        } else if (isContainerQuerySelector(property)) {
          const containerQuery = property.slice(10).trim();
          resolveStyleRules(value, classNameHashSalt, selectors, Object.assign({}, atRules, {
            container: containerQuery
          }), cssClassesMap, cssRulesByBucket);
        } else {
          warnAboutUnresolvedRule(property, value);
        }
      }
    }
    return [cssClassesMap, cssRulesByBucket];
  }
  var init_resolveStyleRules_esm = __esm({
    "node_modules/@griffel/core/runtime/resolveStyleRules.esm.js"() {
      init_emotion_hash_esm();
      init_core();
      init_constants_esm();
      init_compileAtomicCSSRule_esm();
      init_compileKeyframeCSS_esm();
      init_shorthands_esm();
      init_generateCombinedMediaQuery_esm();
      init_isMediaQuerySelector_esm();
      init_isLayerSelector_esm();
      init_isNestedSelector_esm();
      init_isSupportQuerySelector_esm();
      init_isContainerQuerySelector_esm();
      init_normalizeNestedProperty_esm();
      init_isObject_esm();
      init_getStyleBucketName_esm();
      init_hashClassName_esm();
      init_hashPropertyKey_esm();
      init_isResetValue_esm();
      init_trimSelector_esm();
      init_warnAboutUnresolvedRule_esm();
      init_warnAboutUnsupportedProperties_esm();
    }
  });

  // node_modules/@griffel/core/resolveStyleRulesForSlots.esm.js
  function resolveStyleRulesForSlots(stylesBySlots, classNameHashSalt = "") {
    const classesMapBySlot = {};
    const cssRules2 = {};
    for (const slotName in stylesBySlots) {
      const slotStyles = stylesBySlots[slotName];
      const [cssClassMap, cssRulesByBucket] = resolveStyleRules(slotStyles, classNameHashSalt);
      classesMapBySlot[slotName] = cssClassMap;
      Object.keys(cssRulesByBucket).forEach((styleBucketName) => {
        cssRules2[styleBucketName] = (cssRules2[styleBucketName] || []).concat(cssRulesByBucket[styleBucketName]);
      });
    }
    return [classesMapBySlot, cssRules2];
  }
  var init_resolveStyleRulesForSlots_esm = __esm({
    "node_modules/@griffel/core/resolveStyleRulesForSlots.esm.js"() {
      init_resolveStyleRules_esm();
    }
  });

  // node_modules/@griffel/core/makeStyles.esm.js
  function makeStyles(stylesBySlots, factory = insertionFactory) {
    const insertStyles = factory();
    let classesMapBySlot = null;
    let cssRules2 = null;
    let ltrClassNamesForSlots = null;
    let rtlClassNamesForSlots = null;
    let sourceURL;
    if (isDevToolsEnabled) {
      sourceURL = getSourceURLfromError();
    }
    let classNameHashSalt;
    function computeClasses(options) {
      const {
        dir,
        renderer
      } = options;
      if (classesMapBySlot === null) {
        [classesMapBySlot, cssRules2] = resolveStyleRulesForSlots(stylesBySlots, renderer.classNameHashSalt);
        if (true) {
          if (renderer.classNameHashSalt) {
            if (classNameHashSalt !== renderer.classNameHashSalt) {
              console.error(["@griffel/core:", "\n\n", 'A provided renderer has different "classNameHashSalt".', "This is not supported and WILL cause issues with classnames generation.", 'Ensure that all renderers created with "createDOMRenderer()" have the same "classNameHashSalt".'].join(" "));
            }
            classNameHashSalt = renderer.classNameHashSalt;
          }
        }
      }
      const isLTR = dir === "ltr";
      if (isLTR) {
        if (ltrClassNamesForSlots === null) {
          ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      } else {
        if (rtlClassNamesForSlots === null) {
          rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      }
      insertStyles(renderer, cssRules2);
      const classNamesForSlots = isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;
      if (isDevToolsEnabled) {
        debugData.addSequenceDetails(classNamesForSlots, sourceURL);
      }
      return classNamesForSlots;
    }
    return computeClasses;
  }
  var init_makeStyles_esm = __esm({
    "node_modules/@griffel/core/makeStyles.esm.js"() {
      init_store_esm();
      init_isDevToolsEnabled_esm();
      init_getSourceURLfromError_esm();
      init_insertionFactory_esm();
      init_resolveStyleRulesForSlots_esm();
      init_reduceToClassNameForSlots_esm();
    }
  });

  // node_modules/@griffel/core/__styles.esm.js
  function __styles(classesMapBySlot, cssRules2, factory = insertionFactory) {
    const insertStyles = factory();
    let ltrClassNamesForSlots = null;
    let rtlClassNamesForSlots = null;
    let sourceURL;
    if (isDevToolsEnabled) {
      sourceURL = getSourceURLfromError();
    }
    function computeClasses(options) {
      const {
        dir,
        renderer
      } = options;
      const isLTR = dir === "ltr";
      if (isLTR) {
        if (ltrClassNamesForSlots === null) {
          ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      } else {
        if (rtlClassNamesForSlots === null) {
          rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      }
      insertStyles(renderer, cssRules2);
      const classNamesForSlots = isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;
      if (isDevToolsEnabled) {
        debugData.addSequenceDetails(classNamesForSlots, sourceURL);
      }
      return classNamesForSlots;
    }
    return computeClasses;
  }
  var init_styles_esm = __esm({
    "node_modules/@griffel/core/__styles.esm.js"() {
      init_store_esm();
      init_isDevToolsEnabled_esm();
      init_getSourceURLfromError_esm();
      init_insertionFactory_esm();
      init_reduceToClassNameForSlots_esm();
    }
  });

  // node_modules/@griffel/core/__resetStyles.esm.js
  function __resetStyles(ltrClassName, rtlClassName, cssRules2, factory = insertionFactory) {
    const insertStyles = factory();
    function computeClassName(options) {
      const {
        dir,
        renderer
      } = options;
      const className = dir === "ltr" ? ltrClassName : rtlClassName || ltrClassName;
      insertStyles(renderer, Array.isArray(cssRules2) ? {
        r: cssRules2
      } : cssRules2);
      if (true) {
        DEBUG_RESET_CLASSES[className] = 1;
      }
      return className;
    }
    return computeClassName;
  }
  var init_resetStyles_esm = __esm({
    "node_modules/@griffel/core/__resetStyles.esm.js"() {
      init_constants_esm();
      init_insertionFactory_esm();
    }
  });

  // node_modules/@griffel/core/index.esm.js
  var shorthands2;
  var init_index_esm = __esm({
    "node_modules/@griffel/core/index.esm.js"() {
      init_border_esm();
      init_borderLeft_esm();
      init_borderBottom_esm();
      init_borderRight_esm();
      init_borderTop_esm();
      init_borderColor_esm();
      init_borderStyle_esm();
      init_borderRadius_esm();
      init_borderWidth_esm();
      init_flex_esm();
      init_gap_esm();
      init_gridArea_esm();
      init_margin_esm();
      init_marginBlock_esm();
      init_marginInline_esm();
      init_padding_esm();
      init_paddingBlock_esm();
      init_paddingInline_esm();
      init_overflow_esm();
      init_inset_esm();
      init_outline_esm();
      init_transition_esm();
      init_textDecoration_esm();
      init_createDOMRenderer_esm();
      init_mergeClasses_esm();
      init_makeStyles_esm();
      init_styles_esm();
      init_resetStyles_esm();
      shorthands2 = {
        border,
        borderLeft,
        borderBottom,
        borderRight,
        borderTop,
        borderColor,
        borderStyle,
        borderRadius,
        borderWidth,
        flex,
        gap,
        gridArea,
        margin,
        marginBlock,
        marginInline,
        padding,
        paddingBlock,
        paddingInline,
        overflow,
        inset,
        outline,
        transition,
        textDecoration
      };
    }
  });

  // node_modules/@griffel/react/utils/canUseDOM.esm.js
  function canUseDOM() {
    return typeof window !== "undefined" && !!(window.document && window.document.createElement);
  }
  var init_canUseDOM_esm = __esm({
    "node_modules/@griffel/react/utils/canUseDOM.esm.js"() {
    }
  });

  // node_modules/@griffel/react/useInsertionEffect.esm.js
  var React3, useInsertionEffect2;
  var init_useInsertionEffect_esm = __esm({
    "node_modules/@griffel/react/useInsertionEffect.esm.js"() {
      React3 = __toESM(require_react());
      useInsertionEffect2 = // @ts-expect-error Hack to make sure that `useInsertionEffect` will not cause bundling issues in older React versions
      // eslint-disable-next-line no-useless-concat
      React3["useInsertionEffect"] ? React3["useInsertionEffect"] : void 0;
    }
  });

  // node_modules/@griffel/react/insertionFactory.esm.js
  var insertionFactory2;
  var init_insertionFactory_esm2 = __esm({
    "node_modules/@griffel/react/insertionFactory.esm.js"() {
      init_canUseDOM_esm();
      init_useInsertionEffect_esm();
      insertionFactory2 = () => {
        const insertionCache = {};
        return function insert(renderer, cssRules2) {
          if (useInsertionEffect2 && canUseDOM()) {
            useInsertionEffect2(() => {
              renderer.insertCSSRules(cssRules2);
            }, [renderer, cssRules2]);
            return;
          }
          if (insertionCache[renderer.id] === void 0) {
            renderer.insertCSSRules(cssRules2);
            insertionCache[renderer.id] = true;
          }
        };
      };
    }
  });

  // node_modules/@griffel/react/RendererContext.esm.js
  function useRenderer() {
    return React4.useContext(RendererContext);
  }
  var React4, RendererContext;
  var init_RendererContext_esm = __esm({
    "node_modules/@griffel/react/RendererContext.esm.js"() {
      init_index_esm();
      React4 = __toESM(require_react());
      RendererContext = /* @__PURE__ */ React4.createContext(/* @__PURE__ */ createDOMRenderer());
    }
  });

  // node_modules/@griffel/react/TextDirectionContext.esm.js
  function useTextDirection() {
    return React5.useContext(TextDirectionContext);
  }
  var React5, TextDirectionContext, TextDirectionProvider;
  var init_TextDirectionContext_esm = __esm({
    "node_modules/@griffel/react/TextDirectionContext.esm.js"() {
      React5 = __toESM(require_react());
      TextDirectionContext = /* @__PURE__ */ React5.createContext("ltr");
      TextDirectionProvider = ({
        children,
        dir
      }) => {
        return /* @__PURE__ */ React5.createElement(TextDirectionContext.Provider, {
          value: dir
        }, children);
      };
    }
  });

  // node_modules/@griffel/react/utils/isInsideComponent.esm.js
  function isInsideComponent() {
    try {
      const dispatcher = React6.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher.current;
      if (dispatcher === null || dispatcher === void 0) {
        return false;
      }
      dispatcher.useContext({});
      return true;
    } catch (e) {
      return false;
    }
  }
  var React6;
  var init_isInsideComponent_esm = __esm({
    "node_modules/@griffel/react/utils/isInsideComponent.esm.js"() {
      React6 = __toESM(require_react());
    }
  });

  // node_modules/@griffel/react/makeStyles.esm.js
  function makeStyles2(stylesBySlots) {
    const getStyles = makeStyles(stylesBySlots, insertionFactory2);
    if (true) {
      if (isInsideComponent()) {
        throw new Error(["makeStyles(): this function cannot be called in component's scope.", "All makeStyles() calls should be top level i.e. in a root scope of a file."].join(" "));
      }
    }
    return function useClasses() {
      const dir = useTextDirection();
      const renderer = useRenderer();
      return getStyles({
        dir,
        renderer
      });
    };
  }
  var init_makeStyles_esm2 = __esm({
    "node_modules/@griffel/react/makeStyles.esm.js"() {
      init_index_esm();
      init_insertionFactory_esm2();
      init_RendererContext_esm();
      init_TextDirectionContext_esm();
      init_isInsideComponent_esm();
    }
  });

  // node_modules/@griffel/react/__styles.esm.js
  function __styles2(classesMapBySlot, cssRules2) {
    const getStyles = __styles(classesMapBySlot, cssRules2, insertionFactory2);
    return function useClasses() {
      const dir = useTextDirection();
      const renderer = useRenderer();
      return getStyles({
        dir,
        renderer
      });
    };
  }
  var init_styles_esm2 = __esm({
    "node_modules/@griffel/react/__styles.esm.js"() {
      init_index_esm();
      init_insertionFactory_esm2();
      init_RendererContext_esm();
      init_TextDirectionContext_esm();
    }
  });

  // node_modules/@griffel/react/__resetStyles.esm.js
  function __resetStyles2(ltrClassName, rtlClassName, cssRules2) {
    const getStyles = __resetStyles(ltrClassName, rtlClassName, cssRules2, insertionFactory2);
    return function useClasses() {
      const dir = useTextDirection();
      const renderer = useRenderer();
      return getStyles({
        dir,
        renderer
      });
    };
  }
  var init_resetStyles_esm2 = __esm({
    "node_modules/@griffel/react/__resetStyles.esm.js"() {
      init_index_esm();
      init_insertionFactory_esm2();
      init_RendererContext_esm();
      init_TextDirectionContext_esm();
    }
  });

  // node_modules/@griffel/react/index.esm.js
  var init_index_esm2 = __esm({
    "node_modules/@griffel/react/index.esm.js"() {
      init_index_esm();
      init_makeStyles_esm2();
      init_RendererContext_esm();
      init_TextDirectionContext_esm();
      init_styles_esm2();
      init_resetStyles_esm2();
    }
  });

  // node_modules/@fluentui/react-provider/lib/components/FluentProvider/createCSSRuleFromTheme.js
  function createCSSRuleFromTheme(selector, theme) {
    if (theme) {
      const cssVarsAsString = Object.keys(theme).reduce((cssVarRule, cssVar) => {
        return `${cssVarRule}--${cssVar}: ${theme[cssVar]}; `;
      }, "");
      return `${selector} { ${cssVarsAsString} }`;
    }
    return `${selector} {}`;
  }
  var init_createCSSRuleFromTheme = __esm({
    "node_modules/@fluentui/react-provider/lib/components/FluentProvider/createCSSRuleFromTheme.js"() {
    }
  });

  // node_modules/@fluentui/react-utilities/lib/compose/constants.js
  var SLOT_RENDER_FUNCTION_SYMBOL, SLOT_ELEMENT_TYPE_SYMBOL;
  var init_constants = __esm({
    "node_modules/@fluentui/react-utilities/lib/compose/constants.js"() {
      SLOT_RENDER_FUNCTION_SYMBOL = Symbol.for("fui.slotRenderFunction");
      SLOT_ELEMENT_TYPE_SYMBOL = Symbol.for("fui.slotElementType");
    }
  });

  // node_modules/@fluentui/react-utilities/lib/compose/slot.js
  var slot_exports = {};
  __export(slot_exports, {
    always: () => always,
    optional: () => optional,
    resolveShorthand: () => resolveShorthand
  });
  function always(value, options) {
    const { defaultProps: defaultProps2, elementType } = options;
    const props = resolveShorthand(value);
    const propsWithMetadata = {
      ...defaultProps2,
      ...props,
      [SLOT_ELEMENT_TYPE_SYMBOL]: elementType
    };
    if (props && typeof props.children === "function") {
      propsWithMetadata[SLOT_RENDER_FUNCTION_SYMBOL] = props.children;
      propsWithMetadata.children = defaultProps2 === null || defaultProps2 === void 0 ? void 0 : defaultProps2.children;
    }
    return propsWithMetadata;
  }
  function optional(value, options) {
    if (value === null || value === void 0 && !options.renderByDefault) {
      return void 0;
    }
    return always(value, options);
  }
  function resolveShorthand(value) {
    if (typeof value === "string" || typeof value === "number" || Array.isArray(value) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    React7.isValidElement(value)) {
      return {
        children: value
      };
    }
    if (value && typeof value !== "object" && true) {
      console.error(`@fluentui/react-utilities [slot.${resolveShorthand.name}]:
A slot got an invalid value "${value}" (${typeof value}).
A valid value for a slot is a slot shorthand or slot properties object.
Slot shorthands can be strings, numbers, arrays or JSX elements`);
    }
    return value;
  }
  var React7;
  var init_slot = __esm({
    "node_modules/@fluentui/react-utilities/lib/compose/slot.js"() {
      React7 = __toESM(require_react());
      init_constants();
    }
  });

  // node_modules/@fluentui/react-utilities/lib/compose/isSlot.js
  function isSlot(element) {
    return Boolean(element === null || element === void 0 ? void 0 : element.hasOwnProperty(SLOT_ELEMENT_TYPE_SYMBOL));
  }
  var init_isSlot = __esm({
    "node_modules/@fluentui/react-utilities/lib/compose/isSlot.js"() {
      init_constants();
    }
  });

  // node_modules/@fluentui/react-utilities/lib/compose/assertSlots.js
  function assertSlots(state) {
    if (true) {
      const typedState = state;
      for (const slotName of Object.keys(typedState.components)) {
        const slotElement = typedState[slotName];
        if (slotElement === void 0) {
          continue;
        }
        if (!isSlot(slotElement)) {
          typedState[slotName] = always(slotElement, {
            elementType: typedState.components[slotName]
          });
          console.warn(`@fluentui/react-utilities [${assertSlots.name}]:
"state.${slotName}" is not a slot!
Be sure to create slots properly by using "slot.always" or "slot.optional".`);
        } else {
          const { [SLOT_ELEMENT_TYPE_SYMBOL]: elementType } = slotElement;
          if (elementType !== typedState.components[slotName]) {
            slotElement[SLOT_ELEMENT_TYPE_SYMBOL] = typedState.components[slotName];
            console.warn(`@fluentui/react-utilities [${assertSlots.name}]:
"state.${slotName}" element type differs from "state.components.${slotName}",
${elementType} !== ${typedState.components[slotName]}.
Be sure to create slots properly by using "slot.always" or "slot.optional" with the correct elementType.`);
          }
        }
      }
    }
  }
  var React8;
  var init_assertSlots = __esm({
    "node_modules/@fluentui/react-utilities/lib/compose/assertSlots.js"() {
      React8 = __toESM(require_react());
      init_constants();
      init_isSlot();
      init_slot();
    }
  });

  // node_modules/@fluentui/react-utilities/lib/utils/properties.js
  function getNativeProps(props, allowedPropNames, excludedPropNames) {
    const isArray2 = Array.isArray(allowedPropNames);
    const result = {};
    const keys = Object.keys(props);
    for (const key of keys) {
      const isNativeProp = !isArray2 && allowedPropNames[key] || isArray2 && allowedPropNames.indexOf(key) >= 0 || key.indexOf("data-") === 0 || key.indexOf("aria-") === 0;
      if (isNativeProp && (!excludedPropNames || (excludedPropNames === null || excludedPropNames === void 0 ? void 0 : excludedPropNames.indexOf(key)) === -1)) {
        result[key] = props[key];
      }
    }
    return result;
  }
  var toObjectMap, baseElementEvents, baseElementProperties, microdataProperties, htmlElementProperties, labelProperties, audioProperties, videoProperties, olProperties, liProperties, anchorProperties, timeProperties, buttonProperties, inputProperties, textAreaProperties, selectProperties, optionProperties, tableProperties, trProperties, thProperties, tdProperties, colGroupProperties, colProperties, fieldsetProperties, formProperties, iframeProperties, imgProperties, dialogProperties;
  var init_properties = __esm({
    "node_modules/@fluentui/react-utilities/lib/utils/properties.js"() {
      toObjectMap = (...items) => {
        const result = {};
        for (const item of items) {
          const keys = Array.isArray(item) ? item : Object.keys(item);
          for (const key of keys) {
            result[key] = 1;
          }
        }
        return result;
      };
      baseElementEvents = toObjectMap([
        "onAuxClick",
        "onAnimationEnd",
        "onAnimationStart",
        "onCopy",
        "onCut",
        "onPaste",
        "onCompositionEnd",
        "onCompositionStart",
        "onCompositionUpdate",
        "onFocus",
        "onFocusCapture",
        "onBlur",
        "onBlurCapture",
        "onChange",
        "onInput",
        "onSubmit",
        "onLoad",
        "onError",
        "onKeyDown",
        "onKeyDownCapture",
        "onKeyPress",
        "onKeyUp",
        "onAbort",
        "onCanPlay",
        "onCanPlayThrough",
        "onDurationChange",
        "onEmptied",
        "onEncrypted",
        "onEnded",
        "onLoadedData",
        "onLoadedMetadata",
        "onLoadStart",
        "onPause",
        "onPlay",
        "onPlaying",
        "onProgress",
        "onRateChange",
        "onSeeked",
        "onSeeking",
        "onStalled",
        "onSuspend",
        "onTimeUpdate",
        "onVolumeChange",
        "onWaiting",
        "onClick",
        "onClickCapture",
        "onContextMenu",
        "onDoubleClick",
        "onDrag",
        "onDragEnd",
        "onDragEnter",
        "onDragExit",
        "onDragLeave",
        "onDragOver",
        "onDragStart",
        "onDrop",
        "onMouseDown",
        "onMouseDownCapture",
        "onMouseEnter",
        "onMouseLeave",
        "onMouseMove",
        "onMouseOut",
        "onMouseOver",
        "onMouseUp",
        "onMouseUpCapture",
        "onSelect",
        "onTouchCancel",
        "onTouchEnd",
        "onTouchMove",
        "onTouchStart",
        "onScroll",
        "onWheel",
        "onPointerCancel",
        "onPointerDown",
        "onPointerEnter",
        "onPointerLeave",
        "onPointerMove",
        "onPointerOut",
        "onPointerOver",
        "onPointerUp",
        "onGotPointerCapture",
        "onLostPointerCapture"
      ]);
      baseElementProperties = toObjectMap([
        "accessKey",
        "children",
        "className",
        "contentEditable",
        "dir",
        "draggable",
        "hidden",
        "htmlFor",
        "id",
        "lang",
        "ref",
        "role",
        "style",
        "tabIndex",
        "title",
        "translate",
        "spellCheck",
        "name"
      ]);
      microdataProperties = toObjectMap([
        "itemID",
        "itemProp",
        "itemRef",
        "itemScope",
        "itemType"
      ]);
      htmlElementProperties = toObjectMap(baseElementProperties, baseElementEvents, microdataProperties);
      labelProperties = toObjectMap(htmlElementProperties, [
        "form"
      ]);
      audioProperties = toObjectMap(htmlElementProperties, [
        "height",
        "loop",
        "muted",
        "preload",
        "src",
        "width"
      ]);
      videoProperties = toObjectMap(audioProperties, [
        "poster"
      ]);
      olProperties = toObjectMap(htmlElementProperties, [
        "start"
      ]);
      liProperties = toObjectMap(htmlElementProperties, [
        "value"
      ]);
      anchorProperties = toObjectMap(htmlElementProperties, [
        "download",
        "href",
        "hrefLang",
        "media",
        "rel",
        "target",
        "type"
      ]);
      timeProperties = toObjectMap(htmlElementProperties, [
        "dateTime"
      ]);
      buttonProperties = toObjectMap(htmlElementProperties, [
        "autoFocus",
        "disabled",
        "form",
        "formAction",
        "formEncType",
        "formMethod",
        "formNoValidate",
        "formTarget",
        "type",
        "value"
      ]);
      inputProperties = toObjectMap(buttonProperties, [
        "accept",
        "alt",
        "autoCorrect",
        "autoCapitalize",
        "autoComplete",
        "checked",
        "dirname",
        "form",
        "height",
        "inputMode",
        "list",
        "max",
        "maxLength",
        "min",
        "minLength",
        "multiple",
        "pattern",
        "placeholder",
        "readOnly",
        "required",
        "src",
        "step",
        "size",
        "type",
        "value",
        "width"
      ]);
      textAreaProperties = toObjectMap(buttonProperties, [
        "autoCapitalize",
        "cols",
        "dirname",
        "form",
        "maxLength",
        "placeholder",
        "readOnly",
        "required",
        "rows",
        "wrap"
      ]);
      selectProperties = toObjectMap(buttonProperties, [
        "form",
        "multiple",
        "required"
      ]);
      optionProperties = toObjectMap(htmlElementProperties, [
        "selected",
        "value"
      ]);
      tableProperties = toObjectMap(htmlElementProperties, [
        "cellPadding",
        "cellSpacing"
      ]);
      trProperties = htmlElementProperties;
      thProperties = toObjectMap(htmlElementProperties, [
        "colSpan",
        "rowSpan",
        "scope"
      ]);
      tdProperties = toObjectMap(htmlElementProperties, [
        "colSpan",
        "headers",
        "rowSpan",
        "scope"
      ]);
      colGroupProperties = toObjectMap(htmlElementProperties, [
        "span"
      ]);
      colProperties = toObjectMap(htmlElementProperties, [
        "span"
      ]);
      fieldsetProperties = toObjectMap(htmlElementProperties, [
        "disabled",
        "form"
      ]);
      formProperties = toObjectMap(htmlElementProperties, [
        "acceptCharset",
        "action",
        "encType",
        "encType",
        "method",
        "noValidate",
        "target"
      ]);
      iframeProperties = toObjectMap(htmlElementProperties, [
        "allow",
        "allowFullScreen",
        "allowPaymentRequest",
        "allowTransparency",
        "csp",
        "height",
        "importance",
        "referrerPolicy",
        "sandbox",
        "src",
        "srcDoc",
        "width"
      ]);
      imgProperties = toObjectMap(htmlElementProperties, [
        "alt",
        "crossOrigin",
        "height",
        "src",
        "srcSet",
        "useMap",
        "width"
      ]);
      dialogProperties = toObjectMap(htmlElementProperties, [
        "open",
        "onCancel",
        "onClose"
      ]);
    }
  });

  // node_modules/@fluentui/react-utilities/lib/utils/getNativeElementProps.js
  function getNativeElementProps(tagName, props, excludedPropNames) {
    const allowedPropNames = tagName && nativeElementMap[tagName] || htmlElementProperties;
    allowedPropNames.as = 1;
    return getNativeProps(props, allowedPropNames, excludedPropNames);
  }
  var React9, nativeElementMap, getPartitionedNativeProps;
  var init_getNativeElementProps = __esm({
    "node_modules/@fluentui/react-utilities/lib/utils/getNativeElementProps.js"() {
      React9 = __toESM(require_react());
      init_properties();
      nativeElementMap = {
        label: labelProperties,
        audio: audioProperties,
        video: videoProperties,
        ol: olProperties,
        li: liProperties,
        a: anchorProperties,
        button: buttonProperties,
        input: inputProperties,
        textarea: textAreaProperties,
        select: selectProperties,
        option: optionProperties,
        table: tableProperties,
        tr: trProperties,
        th: thProperties,
        td: tdProperties,
        colGroup: colGroupProperties,
        col: colProperties,
        fieldset: fieldsetProperties,
        form: formProperties,
        iframe: iframeProperties,
        img: imgProperties,
        time: timeProperties,
        dialog: dialogProperties
      };
      getPartitionedNativeProps = ({ primarySlotTagName, props, excludedPropNames }) => {
        return {
          root: {
            style: props.style,
            className: props.className
          },
          // eslint-disable-next-line @typescript-eslint/no-deprecated
          primary: getNativeElementProps(primarySlotTagName, props, [
            ...excludedPropNames || [],
            "style",
            "className"
          ])
        };
      };
    }
  });

  // node_modules/@fluentui/react-utilities/lib/compose/getIntrinsicElementProps.js
  var React10, getIntrinsicElementProps;
  var init_getIntrinsicElementProps = __esm({
    "node_modules/@fluentui/react-utilities/lib/compose/getIntrinsicElementProps.js"() {
      React10 = __toESM(require_react());
      init_getNativeElementProps();
      getIntrinsicElementProps = (tagName, props, excludedPropNames) => {
        var _props_as;
        return getNativeElementProps((_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : tagName, props, excludedPropNames);
      };
    }
  });

  // node_modules/@fluentui/react-utilities/lib/compose/index.js
  var init_compose = __esm({
    "node_modules/@fluentui/react-utilities/lib/compose/index.js"() {
      init_slot();
      init_constants();
      init_isSlot();
      init_assertSlots();
      init_getIntrinsicElementProps();
    }
  });

  // node_modules/@fluentui/react-utilities/lib/hooks/useBrowserTimer.js
  function useBrowserTimer(setTimer, cancelTimer) {
    const id = React11.useRef(void 0);
    const set = React11.useCallback((fn, delay) => {
      if (id.current !== void 0) {
        cancelTimer(id.current);
      }
      id.current = setTimer(fn, delay);
      return id.current;
    }, [
      cancelTimer,
      setTimer
    ]);
    const cancel = React11.useCallback(() => {
      if (id.current !== void 0) {
        cancelTimer(id.current);
        id.current = void 0;
      }
    }, [
      cancelTimer
    ]);
    React11.useEffect(() => cancel, [
      cancel
    ]);
    return [
      set,
      cancel
    ];
  }
  var React11;
  var init_useBrowserTimer = __esm({
    "node_modules/@fluentui/react-utilities/lib/hooks/useBrowserTimer.js"() {
      React11 = __toESM(require_react());
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/ThemeContext/ThemeContext.js
  var React12, ThemeContext, ThemeProvider;
  var init_ThemeContext = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/ThemeContext/ThemeContext.js"() {
      React12 = __toESM(require_react());
      ThemeContext = React12.createContext(void 0);
      ThemeProvider = ThemeContext.Provider;
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/ThemeContext/index.js
  var init_ThemeContext2 = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/ThemeContext/index.js"() {
      init_ThemeContext();
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/ThemeContext.js
  var init_ThemeContext3 = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/ThemeContext.js"() {
      init_ThemeContext2();
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/ThemeClassNameContext/ThemeClassNameContext.js
  var React13, ThemeClassNameContext, ThemeClassNameProvider;
  var init_ThemeClassNameContext = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/ThemeClassNameContext/ThemeClassNameContext.js"() {
      React13 = __toESM(require_react());
      ThemeClassNameContext = React13.createContext(void 0);
      ThemeClassNameProvider = ThemeClassNameContext.Provider;
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/ThemeClassNameContext/index.js
  var init_ThemeClassNameContext2 = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/ThemeClassNameContext/index.js"() {
      init_ThemeClassNameContext();
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/ThemeClassNameContext.js
  var init_ThemeClassNameContext3 = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/ThemeClassNameContext.js"() {
      init_ThemeClassNameContext2();
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/TooltipVisibilityContext/TooltipContext.js
  var React14, TooltipVisibilityContext, TooltipVisibilityProvider;
  var init_TooltipContext = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/TooltipVisibilityContext/TooltipContext.js"() {
      React14 = __toESM(require_react());
      TooltipVisibilityContext = React14.createContext(void 0);
      TooltipVisibilityProvider = TooltipVisibilityContext.Provider;
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/TooltipVisibilityContext/index.js
  var init_TooltipVisibilityContext = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/TooltipVisibilityContext/index.js"() {
      init_TooltipContext();
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/TooltipVisibilityContext.js
  var init_TooltipVisibilityContext2 = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/TooltipVisibilityContext.js"() {
      init_TooltipVisibilityContext();
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/ProviderContext/ProviderContext.js
  function useFluent() {
    var _React_useContext;
    return (_React_useContext = React15.useContext(ProviderContext)) !== null && _React_useContext !== void 0 ? _React_useContext : providerContextDefaultValue;
  }
  var React15, ProviderContext, providerContextDefaultValue, Provider;
  var init_ProviderContext = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/ProviderContext/ProviderContext.js"() {
      React15 = __toESM(require_react());
      ProviderContext = React15.createContext(void 0);
      providerContextDefaultValue = {
        // eslint-disable-next-line @nx/workspace-no-restricted-globals -- expected ignore ( SSR friendly acquisition of globals )
        targetDocument: typeof document === "object" ? document : void 0,
        dir: "ltr"
      };
      Provider = ProviderContext.Provider;
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/ProviderContext/index.js
  var init_ProviderContext2 = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/ProviderContext/index.js"() {
      init_ProviderContext();
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/ProviderContext.js
  var init_ProviderContext3 = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/ProviderContext.js"() {
      init_ProviderContext2();
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/OverridesContext/OverridesContext.js
  function useOverrides() {
    var _React_useContext;
    return (_React_useContext = React16.useContext(OverridesContext)) !== null && _React_useContext !== void 0 ? _React_useContext : {};
  }
  var React16, OverridesContext, OverridesProvider;
  var init_OverridesContext = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/OverridesContext/OverridesContext.js"() {
      React16 = __toESM(require_react());
      OverridesContext = React16.createContext(void 0);
      OverridesProvider = OverridesContext.Provider;
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/OverridesContext/index.js
  var init_OverridesContext2 = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/OverridesContext/index.js"() {
      init_OverridesContext();
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/CustomStyleHooksContext/CustomStyleHooksContext.js
  var React17, CustomStyleHooksContext, noop2, CustomStyleHooksProvider, useCustomStyleHook;
  var init_CustomStyleHooksContext = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/CustomStyleHooksContext/CustomStyleHooksContext.js"() {
      React17 = __toESM(require_react());
      CustomStyleHooksContext = React17.createContext(void 0);
      noop2 = () => {
      };
      CustomStyleHooksProvider = CustomStyleHooksContext.Provider;
      useCustomStyleHook = (hook) => {
        var _React_useContext;
        var _React_useContext_hook;
        return (_React_useContext_hook = (_React_useContext = React17.useContext(CustomStyleHooksContext)) === null || _React_useContext === void 0 ? void 0 : _React_useContext[hook]) !== null && _React_useContext_hook !== void 0 ? _React_useContext_hook : noop2;
      };
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/CustomStyleHooksContext/index.js
  var init_CustomStyleHooksContext2 = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/CustomStyleHooksContext/index.js"() {
      init_CustomStyleHooksContext();
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/CustomStyleHooksContext.js
  var init_CustomStyleHooksContext3 = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/CustomStyleHooksContext.js"() {
      init_CustomStyleHooksContext2();
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/BackgroundAppearanceContext/BackgroundAppearanceContext.js
  function useBackgroundAppearance() {
    return React18.useContext(BackgroundAppearanceContext);
  }
  var React18, BackgroundAppearanceContext, BackgroundAppearanceProvider;
  var init_BackgroundAppearanceContext = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/BackgroundAppearanceContext/BackgroundAppearanceContext.js"() {
      React18 = __toESM(require_react());
      BackgroundAppearanceContext = React18.createContext(void 0);
      BackgroundAppearanceProvider = BackgroundAppearanceContext.Provider;
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/BackgroundAppearanceContext/index.js
  var init_BackgroundAppearanceContext2 = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/BackgroundAppearanceContext/index.js"() {
      init_BackgroundAppearanceContext();
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/AnnounceContext/AnnounceContext.js
  function useAnnounce() {
    var _React_useContext;
    return (_React_useContext = React19.useContext(AnnounceContext)) !== null && _React_useContext !== void 0 ? _React_useContext : {
      announce: () => void 0
    };
  }
  var React19, AnnounceContext, AnnounceProvider;
  var init_AnnounceContext = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/AnnounceContext/AnnounceContext.js"() {
      React19 = __toESM(require_react());
      AnnounceContext = React19.createContext(void 0);
      AnnounceProvider = AnnounceContext.Provider;
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/AnnounceContext/index.js
  var init_AnnounceContext2 = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/AnnounceContext/index.js"() {
      init_AnnounceContext();
    }
  });

  // node_modules/@fluentui/react-shared-contexts/lib/index.js
  var init_lib = __esm({
    "node_modules/@fluentui/react-shared-contexts/lib/index.js"() {
      init_ThemeContext3();
      init_ThemeClassNameContext3();
      init_TooltipVisibilityContext2();
      init_ProviderContext3();
      init_OverridesContext2();
      init_CustomStyleHooksContext3();
      init_BackgroundAppearanceContext2();
      init_AnnounceContext2();
    }
  });

  // node_modules/@fluentui/react-utilities/lib/hooks/useControllableState.js
  function isFactoryDispatch(newState) {
    return typeof newState === "function";
  }
  function isInitializer(value) {
    return typeof value === "function";
  }
  var React20, useControllableState, useIsControlled;
  var init_useControllableState = __esm({
    "node_modules/@fluentui/react-utilities/lib/hooks/useControllableState.js"() {
      React20 = __toESM(require_react());
      useControllableState = (options) => {
        "use no memo";
        if (true) {
          if (options.state !== void 0 && options.defaultState !== void 0) {
            console.error(`@fluentui/react-utilities [useControllableState]:
A component must be either controlled or uncontrolled (specify either the state or the defaultState, but not both).
Decide between using a controlled or uncontrolled component and remove one of this props.
More info: https://reactjs.org/link/controlled-components
${new Error().stack}`);
          }
        }
        const [internalState, setInternalState] = React20.useState(() => {
          if (options.defaultState === void 0) {
            return options.initialState;
          }
          return isInitializer(options.defaultState) ? options.defaultState() : options.defaultState;
        });
        const stateValueRef = React20.useRef(options.state);
        React20.useEffect(() => {
          stateValueRef.current = options.state;
        }, [
          options.state
        ]);
        const setControlledState = React20.useCallback((newState) => {
          if (isFactoryDispatch(newState)) {
            newState(stateValueRef.current);
          }
        }, []);
        return useIsControlled(options.state) ? [
          options.state,
          setControlledState
        ] : [
          internalState,
          setInternalState
        ];
      };
      useIsControlled = (controlledValue) => {
        "use no memo";
        const [isControlled] = React20.useState(() => controlledValue !== void 0);
        if (true) {
          React20.useEffect(() => {
            if (isControlled !== (controlledValue !== void 0)) {
              const error = new Error();
              const controlWarning = isControlled ? "a controlled value to be uncontrolled" : "an uncontrolled value to be controlled";
              const undefinedWarning = isControlled ? "defined to an undefined" : "undefined to a defined";
              console.error(`@fluentui/react-utilities [useControllableState]:
A component is changing ${controlWarning}. This is likely caused by the value changing from ${undefinedWarning} value, which should not happen.
Decide between using a controlled or uncontrolled input element for the lifetime of the component.
More info: https://reactjs.org/link/controlled-components
${error.stack}`);
            }
          }, [
            isControlled,
            controlledValue
          ]);
        }
        return isControlled;
      };
    }
  });

  // node_modules/@fluentui/react-utilities/lib/ssr/canUseDOM.js
  function canUseDOM2() {
    return (
      /* eslint-disable @nx/workspace-no-restricted-globals -- expected ignore ( SSR friendly acquisition of globals )*/
      typeof window !== "undefined" && !!(window.document && // eslint-disable-next-line @typescript-eslint/no-deprecated
      window.document.createElement)
    );
  }
  var init_canUseDOM = __esm({
    "node_modules/@fluentui/react-utilities/lib/ssr/canUseDOM.js"() {
    }
  });

  // node_modules/@fluentui/react-utilities/lib/ssr/SSRContext.js
  function useSSRContext() {
    var _React_useContext;
    return (_React_useContext = React21.useContext(SSRContext)) !== null && _React_useContext !== void 0 ? _React_useContext : defaultSSRContextValue;
  }
  var React21, defaultSSRContextValue, SSRContext;
  var init_SSRContext = __esm({
    "node_modules/@fluentui/react-utilities/lib/ssr/SSRContext.js"() {
      React21 = __toESM(require_react());
      defaultSSRContextValue = {
        current: 0
      };
      SSRContext = /* @__PURE__ */ React21.createContext(void 0);
    }
  });

  // node_modules/@fluentui/react-utilities/lib/ssr/index.js
  var init_ssr = __esm({
    "node_modules/@fluentui/react-utilities/lib/ssr/index.js"() {
      init_canUseDOM();
      init_SSRContext();
    }
  });

  // node_modules/@fluentui/react-utilities/lib/hooks/useIsomorphicLayoutEffect.js
  var React22, useIsomorphicLayoutEffect2;
  var init_useIsomorphicLayoutEffect = __esm({
    "node_modules/@fluentui/react-utilities/lib/hooks/useIsomorphicLayoutEffect.js"() {
      React22 = __toESM(require_react());
      init_ssr();
      useIsomorphicLayoutEffect2 = canUseDOM2() ? React22.useLayoutEffect : React22.useEffect;
    }
  });

  // node_modules/@fluentui/react-utilities/lib/hooks/useEventCallback.js
  var React23, useEventCallback;
  var init_useEventCallback = __esm({
    "node_modules/@fluentui/react-utilities/lib/hooks/useEventCallback.js"() {
      React23 = __toESM(require_react());
      init_useIsomorphicLayoutEffect();
      useEventCallback = (fn) => {
        const callbackRef = React23.useRef(() => {
          throw new Error("Cannot call an event handler while rendering");
        });
        useIsomorphicLayoutEffect2(() => {
          callbackRef.current = fn;
        }, [
          fn
        ]);
        return React23.useCallback((...args) => {
          const callback = callbackRef.current;
          return callback(...args);
        }, [
          callbackRef
        ]);
      };
    }
  });

  // node_modules/@fluentui/react-utilities/lib/hooks/useId.js
  function useIdPrefix() {
    return React24.useContext(IdPrefixContext) || "";
  }
  function useId2(prefix2 = "fui-", providedId) {
    "use no memo";
    const contextValue = useSSRContext();
    const idPrefix = useIdPrefix();
    const _useId = React24["useId"];
    if (_useId) {
      const generatedId = _useId();
      const escapedId = React24.useMemo(() => generatedId.replace(/:/g, ""), [
        generatedId
      ]);
      return providedId || `${idPrefix}${prefix2}${escapedId}`;
    }
    return React24.useMemo(() => {
      if (providedId) {
        return providedId;
      }
      return `${idPrefix}${prefix2}${++contextValue.current}`;
    }, [
      idPrefix,
      prefix2,
      providedId,
      contextValue
    ]);
  }
  var React24, IdPrefixContext, IdPrefixProvider;
  var init_useId = __esm({
    "node_modules/@fluentui/react-utilities/lib/hooks/useId.js"() {
      React24 = __toESM(require_react());
      init_ssr();
      IdPrefixContext = React24.createContext(void 0);
      IdPrefixProvider = IdPrefixContext.Provider;
    }
  });

  // node_modules/@fluentui/react-utilities/lib/hooks/useMergedRefs.js
  function useMergedRefs(...refs) {
    "use no memo";
    const mergedCallback = React25.useCallback(
      (value) => {
        mergedCallback.current = value;
        for (const ref of refs) {
          if (typeof ref === "function") {
            ref(value);
          } else if (ref) {
            ref.current = value;
          }
        }
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps -- already exhaustive
      [
        ...refs
      ]
    );
    return mergedCallback;
  }
  var React25;
  var init_useMergedRefs = __esm({
    "node_modules/@fluentui/react-utilities/lib/hooks/useMergedRefs.js"() {
      React25 = __toESM(require_react());
    }
  });

  // node_modules/@fluentui/react-utilities/lib/hooks/usePrevious.js
  var React26, usePrevious;
  var init_usePrevious = __esm({
    "node_modules/@fluentui/react-utilities/lib/hooks/usePrevious.js"() {
      React26 = __toESM(require_react());
      usePrevious = (value) => {
        const ref = React26.useRef(null);
        React26.useEffect(() => {
          ref.current = value;
        }, [
          value
        ]);
        return ref.current;
      };
    }
  });

  // node_modules/@fluentui/react-utilities/lib/hooks/useTimeout.js
  function useTimeout() {
    const { targetDocument } = useFluent();
    const win = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView;
    const setTimerFn = win ? win.setTimeout : setTimeoutNoop;
    const clearTimerFn = win ? win.clearTimeout : clearTimeoutNoop;
    return useBrowserTimer(setTimerFn, clearTimerFn);
  }
  var setTimeoutNoop, clearTimeoutNoop;
  var init_useTimeout = __esm({
    "node_modules/@fluentui/react-utilities/lib/hooks/useTimeout.js"() {
      init_useBrowserTimer();
      init_lib();
      setTimeoutNoop = (_callback) => -1;
      clearTimeoutNoop = (_handle) => void 0;
    }
  });

  // node_modules/@fluentui/react-utilities/lib/hooks/index.js
  var init_hooks = __esm({
    "node_modules/@fluentui/react-utilities/lib/hooks/index.js"() {
      init_useControllableState();
      init_useEventCallback();
      init_useId();
      init_useIsomorphicLayoutEffect();
      init_useMergedRefs();
      init_usePrevious();
      init_useTimeout();
    }
  });

  // node_modules/@fluentui/react-utilities/lib/utils/mergeCallbacks.js
  function mergeCallbacks(callback1, callback2) {
    return (...args) => {
      callback1 === null || callback1 === void 0 ? void 0 : callback1(...args);
      callback2 === null || callback2 === void 0 ? void 0 : callback2(...args);
    };
  }
  var init_mergeCallbacks = __esm({
    "node_modules/@fluentui/react-utilities/lib/utils/mergeCallbacks.js"() {
    }
  });

  // node_modules/@fluentui/react-utilities/lib/utils/isHTMLElement.js
  function isHTMLElement(element, options) {
    var _typedElement_ownerDocument;
    const typedElement = element;
    var _options_constructorName;
    return Boolean((typedElement === null || typedElement === void 0 ? void 0 : (_typedElement_ownerDocument = typedElement.ownerDocument) === null || _typedElement_ownerDocument === void 0 ? void 0 : _typedElement_ownerDocument.defaultView) && typedElement instanceof typedElement.ownerDocument.defaultView[(_options_constructorName = options === null || options === void 0 ? void 0 : options.constructorName) !== null && _options_constructorName !== void 0 ? _options_constructorName : "HTMLElement"]);
  }
  var init_isHTMLElement = __esm({
    "node_modules/@fluentui/react-utilities/lib/utils/isHTMLElement.js"() {
    }
  });

  // node_modules/@fluentui/react-utilities/lib/utils/index.js
  var init_utils = __esm({
    "node_modules/@fluentui/react-utilities/lib/utils/index.js"() {
      init_getNativeElementProps();
      init_mergeCallbacks();
      init_isHTMLElement();
    }
  });

  // node_modules/@fluentui/react-utilities/lib/virtualParent/isVirtualElement.js
  function isVirtualElement(element) {
    return element && !!element._virtual;
  }
  var init_isVirtualElement = __esm({
    "node_modules/@fluentui/react-utilities/lib/virtualParent/isVirtualElement.js"() {
    }
  });

  // node_modules/@fluentui/react-utilities/lib/virtualParent/getParent.js
  function getVirtualParent(child) {
    return isVirtualElement(child) ? child._virtual.parent || null : null;
  }
  function getParent(child, options = {}) {
    if (!child) {
      return null;
    }
    if (!options.skipVirtual) {
      const virtualParent = getVirtualParent(child);
      if (virtualParent) {
        return virtualParent;
      }
    }
    const parent = child.parentNode;
    if (parent && parent.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
      return parent.host;
    }
    return parent;
  }
  var init_getParent = __esm({
    "node_modules/@fluentui/react-utilities/lib/virtualParent/getParent.js"() {
      init_isVirtualElement();
    }
  });

  // node_modules/@fluentui/react-utilities/lib/virtualParent/index.js
  var init_virtualParent = __esm({
    "node_modules/@fluentui/react-utilities/lib/virtualParent/index.js"() {
      init_getParent();
    }
  });

  // node_modules/@fluentui/react-utilities/lib/index.js
  var init_lib2 = __esm({
    "node_modules/@fluentui/react-utilities/lib/index.js"() {
      init_compose();
      init_hooks();
      init_ssr();
      init_utils();
      init_virtualParent();
    }
  });

  // node_modules/@fluentui/react-jsx-runtime/lib/utils/createCompatSlotComponent.js
  function createCompatSlotComponent(type, props) {
    return {
      ...props,
      [SLOT_ELEMENT_TYPE_SYMBOL]: type
    };
  }
  var React27;
  var init_createCompatSlotComponent = __esm({
    "node_modules/@fluentui/react-jsx-runtime/lib/utils/createCompatSlotComponent.js"() {
      React27 = __toESM(require_react());
      init_lib2();
    }
  });

  // node_modules/@fluentui/react-jsx-runtime/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/@fluentui/react-jsx-runtime/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var enableScopeAPI = false;
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment7 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment7;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/@fluentui/react-jsx-runtime/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/@fluentui/react-jsx-runtime/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/@fluentui/react-jsx-runtime/lib/utils/warnIfElementTypeIsInvalid.js
  function warnIfElementTypeIsInvalid(type) {
    if (typeof type === "object" && !(0, import_react_is.isValidElementType)(type)) {
      console.error(`@fluentui/react-jsx-runtime:
Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: ${type}.

If this happened in a slot of Fluent UI component, you might be facing package resolution issues.
Please make sure you don't have multiple versions of "@fluentui/react-utilities" installed in your dependencies or sub-dependencies.
You can check this by searching up for matching entries in a lockfile produced by your package manager (yarn.lock, pnpm-lock.yaml or package-lock.json).`);
    }
  }
  var React28, import_react_is;
  var init_warnIfElementTypeIsInvalid = __esm({
    "node_modules/@fluentui/react-jsx-runtime/lib/utils/warnIfElementTypeIsInvalid.js"() {
      React28 = __toESM(require_react());
      import_react_is = __toESM(require_react_is());
    }
  });

  // node_modules/@fluentui/react-jsx-runtime/lib/jsx/createJSX.js
  function createJSX(runtime, slotRuntime) {
    return function jsx2(type, overrideProps, key, source, self2) {
      if (isSlot(overrideProps)) {
        return slotRuntime(createCompatSlotComponent(type, overrideProps), null, key, source, self2);
      }
      if (isSlot(type)) {
        return slotRuntime(type, overrideProps, key, source, self2);
      }
      warnIfElementTypeIsInvalid(type);
      return runtime(type, overrideProps, key, source, self2);
    };
  }
  var React29;
  var init_createJSX = __esm({
    "node_modules/@fluentui/react-jsx-runtime/lib/jsx/createJSX.js"() {
      init_lib2();
      React29 = __toESM(require_react());
      init_createCompatSlotComponent();
      init_warnIfElementTypeIsInvalid();
    }
  });

  // node_modules/@fluentui/react-jsx-runtime/lib/utils/getMetadataFromSlotComponent.js
  function getMetadataFromSlotComponent(type) {
    const { as, [SLOT_ELEMENT_TYPE_SYMBOL]: baseElementType, [SLOT_RENDER_FUNCTION_SYMBOL]: renderFunction, ...propsWithoutMetadata } = type;
    const props = propsWithoutMetadata;
    const elementType = typeof baseElementType === "string" ? as !== null && as !== void 0 ? as : baseElementType : baseElementType;
    if (typeof elementType !== "string" && as) {
      props.as = as;
    }
    return {
      elementType,
      props,
      renderFunction
    };
  }
  var init_getMetadataFromSlotComponent = __esm({
    "node_modules/@fluentui/react-jsx-runtime/lib/utils/getMetadataFromSlotComponent.js"() {
      init_lib2();
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React100 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React100.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype3 = Component2.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps2 = type.defaultProps;
                for (propName in defaultProps2) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps2[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement5(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            {
              if (typeof node2 !== "object") {
                return;
              }
              if (isArray2(node2)) {
                for (var i = 0; i < node2.length; i++) {
                  var child = node2[i];
                  if (isValidElement5(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement5(node2)) {
                if (node2._store) {
                  node2._store.validated = true;
                }
              } else if (node2) {
                var iteratorFn = getIteratorFn(node2);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node2.entries) {
                    var iterator = iteratorFn.call(node2);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement5(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          var didWarnAboutKeySpread = {};
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType2(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray2(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray2(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              {
                if (hasOwnProperty2.call(props, "key")) {
                  var componentName = getComponentNameFromType(type);
                  var keys = Object.keys(props).filter(function(k) {
                    return k !== "key";
                  });
                  var beforeExample = keys.length > 0 ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
                  if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                    var afterExample = keys.length > 0 ? "{" + keys.join(": ..., ") + ": ...}" : "{}";
                    error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                    didWarnAboutKeySpread[componentName + beforeExample] = true;
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx2 = jsxWithValidationDynamic;
          var jsxs2 = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx2;
          exports.jsxs = jsxs2;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/@fluentui/react-jsx-runtime/lib/utils/Runtime.js
  var ReactRuntime, Runtime;
  var init_Runtime = __esm({
    "node_modules/@fluentui/react-jsx-runtime/lib/utils/Runtime.js"() {
      ReactRuntime = __toESM(require_jsx_runtime());
      Runtime = ReactRuntime;
    }
  });

  // node_modules/@fluentui/react-jsx-runtime/lib/jsx/jsxSlot.js
  var React30, jsxSlot;
  var init_jsxSlot = __esm({
    "node_modules/@fluentui/react-jsx-runtime/lib/jsx/jsxSlot.js"() {
      React30 = __toESM(require_react());
      init_getMetadataFromSlotComponent();
      init_Runtime();
      jsxSlot = (type, overrideProps, key) => {
        const { elementType, renderFunction, props: slotProps } = getMetadataFromSlotComponent(type);
        const props = {
          ...slotProps,
          ...overrideProps
        };
        if (renderFunction) {
          return Runtime.jsx(React30.Fragment, {
            children: renderFunction(elementType, props)
          }, key);
        }
        return Runtime.jsx(elementType, props, key);
      };
    }
  });

  // node_modules/@fluentui/react-jsx-runtime/lib/jsx/jsxsSlot.js
  var React31, jsxsSlot;
  var init_jsxsSlot = __esm({
    "node_modules/@fluentui/react-jsx-runtime/lib/jsx/jsxsSlot.js"() {
      React31 = __toESM(require_react());
      init_getMetadataFromSlotComponent();
      init_Runtime();
      jsxsSlot = (type, overrideProps, key) => {
        const { elementType, renderFunction, props: slotProps } = getMetadataFromSlotComponent(type);
        const props = {
          ...slotProps,
          ...overrideProps
        };
        if (renderFunction) {
          return Runtime.jsx(React31.Fragment, {
            children: renderFunction(elementType, {
              ...props,
              children: Runtime.jsxs(React31.Fragment, {
                children: props.children
              }, void 0)
            })
          }, key);
        }
        return Runtime.jsxs(elementType, props, key);
      };
    }
  });

  // node_modules/@fluentui/react-jsx-runtime/lib/jsx-runtime.js
  var import_react, jsx, jsxs;
  var init_jsx_runtime = __esm({
    "node_modules/@fluentui/react-jsx-runtime/lib/jsx-runtime.js"() {
      init_createJSX();
      init_jsxSlot();
      init_jsxsSlot();
      init_Runtime();
      import_react = __toESM(require_react());
      jsx = createJSX(Runtime.jsx, jsxSlot);
      jsxs = createJSX(Runtime.jsxs, jsxsSlot);
    }
  });

  // node_modules/@fluentui/react-icons/lib/contexts/IconDirectionContext.js
  var React32, IconDirectionContext, IconDirectionContextDefaultValue, IconDirectionContextProvider, useIconContext;
  var init_IconDirectionContext = __esm({
    "node_modules/@fluentui/react-icons/lib/contexts/IconDirectionContext.js"() {
      React32 = __toESM(require_react());
      IconDirectionContext = React32.createContext(void 0);
      IconDirectionContextDefaultValue = {};
      IconDirectionContextProvider = IconDirectionContext.Provider;
      useIconContext = () => React32.useContext(IconDirectionContext) ? React32.useContext(IconDirectionContext) : IconDirectionContextDefaultValue;
    }
  });

  // node_modules/@fluentui/react-icons/lib/contexts/index.js
  var init_contexts = __esm({
    "node_modules/@fluentui/react-icons/lib/contexts/index.js"() {
      init_IconDirectionContext();
    }
  });

  // node_modules/@fluentui/react-icons/lib/providers.js
  var init_providers = __esm({
    "node_modules/@fluentui/react-icons/lib/providers.js"() {
      init_contexts();
    }
  });

  // node_modules/@fluentui/react-provider/lib/components/FluentProvider/renderFluentProvider.js
  var renderFluentProvider_unstable;
  var init_renderFluentProvider = __esm({
    "node_modules/@fluentui/react-provider/lib/components/FluentProvider/renderFluentProvider.js"() {
      init_jsx_runtime();
      init_lib2();
      init_index_esm2();
      init_lib();
      init_providers();
      renderFluentProvider_unstable = (state, contextValues) => {
        assertSlots(state);
        return /* @__PURE__ */ jsx(Provider, {
          value: contextValues.provider,
          children: /* @__PURE__ */ jsx(ThemeProvider, {
            value: contextValues.theme,
            children: /* @__PURE__ */ jsx(ThemeClassNameProvider, {
              value: contextValues.themeClassName,
              children: /* @__PURE__ */ jsx(CustomStyleHooksProvider, {
                value: contextValues.customStyleHooks_unstable,
                children: /* @__PURE__ */ jsx(TooltipVisibilityProvider, {
                  value: contextValues.tooltip,
                  children: /* @__PURE__ */ jsx(TextDirectionProvider, {
                    dir: contextValues.textDirection,
                    children: /* @__PURE__ */ jsx(IconDirectionContextProvider, {
                      value: contextValues.iconDirection,
                      children: /* @__PURE__ */ jsx(OverridesProvider, {
                        value: contextValues.overrides_unstable,
                        children: /* @__PURE__ */ jsxs(state.root, {
                          children: [
                            canUseDOM2() ? null : /* @__PURE__ */ jsx("style", {
                              // Using dangerous HTML because react can escape characters
                              // which can lead to invalid CSS.
                              // eslint-disable-next-line react/no-danger
                              dangerouslySetInnerHTML: {
                                __html: state.serverStyleProps.cssRule
                              },
                              ...state.serverStyleProps.attributes
                            }),
                            state.root.children
                          ]
                        })
                      })
                    })
                  })
                })
              })
            })
          })
        });
      };
    }
  });

  // node_modules/keyborg/dist/esm/index.js
  function canOverrideNativeFocus(win) {
    const HTMLElement = win.HTMLElement;
    const origFocus = HTMLElement.prototype.focus;
    let isCustomFocusCalled = false;
    HTMLElement.prototype.focus = function focus() {
      isCustomFocusCalled = true;
    };
    const btn = win.document.createElement("button");
    btn.focus();
    HTMLElement.prototype.focus = origFocus;
    return isCustomFocusCalled;
  }
  function nativeFocus(element) {
    const focus = element.focus;
    if (focus.__keyborgNativeFocus) {
      focus.__keyborgNativeFocus.call(element);
    } else {
      element.focus();
    }
  }
  function setupFocusEvent(win) {
    const kwin = win;
    if (!_canOverrideNativeFocus) {
      _canOverrideNativeFocus = canOverrideNativeFocus(kwin);
    }
    const origFocus = kwin.HTMLElement.prototype.focus;
    if (origFocus.__keyborgNativeFocus) {
      return;
    }
    kwin.HTMLElement.prototype.focus = focus;
    const shadowTargets = /* @__PURE__ */ new Set();
    const focusOutHandler = (e) => {
      const target = e.target;
      if (!target) {
        return;
      }
      const event = new CustomEvent(KEYBORG_FOCUSOUT, {
        cancelable: true,
        bubbles: true,
        // Allows the event to bubble past an open shadow root
        composed: true,
        detail: {
          originalEvent: e
        }
      });
      target.dispatchEvent(event);
    };
    const focusInHandler = (e) => {
      const target = e.target;
      if (!target) {
        return;
      }
      let node2 = e.composedPath()[0];
      const currentShadows = /* @__PURE__ */ new Set();
      while (node2) {
        if (node2.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
          currentShadows.add(node2);
          node2 = node2.host;
        } else {
          node2 = node2.parentNode;
        }
      }
      for (const shadowRootWeakRef of shadowTargets) {
        const shadowRoot = shadowRootWeakRef.deref();
        if (!shadowRoot || !currentShadows.has(shadowRoot)) {
          shadowTargets.delete(shadowRootWeakRef);
          if (shadowRoot) {
            shadowRoot.removeEventListener("focusin", focusInHandler, true);
            shadowRoot.removeEventListener("focusout", focusOutHandler, true);
          }
        }
      }
      onFocusIn(target, e.relatedTarget || void 0);
    };
    const onFocusIn = (target, relatedTarget, originalEvent) => {
      var _a;
      const shadowRoot = target.shadowRoot;
      if (shadowRoot) {
        for (const shadowRootWeakRef of shadowTargets) {
          if (shadowRootWeakRef.deref() === shadowRoot) {
            return;
          }
        }
        shadowRoot.addEventListener("focusin", focusInHandler, true);
        shadowRoot.addEventListener("focusout", focusOutHandler, true);
        shadowTargets.add(new WeakRefInstance(shadowRoot));
        return;
      }
      const details = {
        relatedTarget,
        originalEvent
      };
      const event = new CustomEvent(KEYBORG_FOCUSIN, {
        cancelable: true,
        bubbles: true,
        // Allows the event to bubble past an open shadow root
        composed: true,
        detail: details
      });
      event.details = details;
      if (_canOverrideNativeFocus || data.lastFocusedProgrammatically) {
        details.isFocusedProgrammatically = target === ((_a = data.lastFocusedProgrammatically) == null ? void 0 : _a.deref());
        data.lastFocusedProgrammatically = void 0;
      }
      target.dispatchEvent(event);
    };
    const data = kwin.__keyborgData = {
      focusInHandler,
      focusOutHandler,
      shadowTargets
    };
    kwin.document.addEventListener(
      "focusin",
      kwin.__keyborgData.focusInHandler,
      true
    );
    kwin.document.addEventListener(
      "focusout",
      kwin.__keyborgData.focusOutHandler,
      true
    );
    function focus() {
      const keyborgNativeFocusEvent = kwin.__keyborgData;
      if (keyborgNativeFocusEvent) {
        keyborgNativeFocusEvent.lastFocusedProgrammatically = new WeakRefInstance(
          this
        );
      }
      return origFocus.apply(this, arguments);
    }
    let activeElement = kwin.document.activeElement;
    while (activeElement && activeElement.shadowRoot) {
      onFocusIn(activeElement);
      activeElement = activeElement.shadowRoot.activeElement;
    }
    focus.__keyborgNativeFocus = origFocus;
  }
  function disposeFocusEvent(win) {
    const kwin = win;
    const proto = kwin.HTMLElement.prototype;
    const origFocus = proto.focus.__keyborgNativeFocus;
    const keyborgNativeFocusEvent = kwin.__keyborgData;
    if (keyborgNativeFocusEvent) {
      kwin.document.removeEventListener(
        "focusin",
        keyborgNativeFocusEvent.focusInHandler,
        true
      );
      kwin.document.removeEventListener(
        "focusout",
        keyborgNativeFocusEvent.focusOutHandler,
        true
      );
      for (const shadowRootWeakRef of keyborgNativeFocusEvent.shadowTargets) {
        const shadowRoot = shadowRootWeakRef.deref();
        if (shadowRoot) {
          shadowRoot.removeEventListener(
            "focusin",
            keyborgNativeFocusEvent.focusInHandler,
            true
          );
          shadowRoot.removeEventListener(
            "focusout",
            keyborgNativeFocusEvent.focusOutHandler,
            true
          );
        }
      }
      keyborgNativeFocusEvent.shadowTargets.clear();
      delete kwin.__keyborgData;
    }
    if (origFocus) {
      proto.focus = origFocus;
    }
  }
  function createKeyborg(win, props) {
    return Keyborg.create(win, props);
  }
  function disposeKeyborg(instance) {
    Keyborg.dispose(instance);
  }
  var _canUseWeakRef, WeakRefInstance, KEYBORG_FOCUSIN, KEYBORG_FOCUSOUT, _canOverrideNativeFocus, _dismissTimeout, _lastId, KeyborgCore, Keyborg;
  var init_esm = __esm({
    "node_modules/keyborg/dist/esm/index.js"() {
      _canUseWeakRef = typeof WeakRef !== "undefined";
      WeakRefInstance = class {
        constructor(instance) {
          if (_canUseWeakRef && typeof instance === "object") {
            this._weakRef = new WeakRef(instance);
          } else {
            this._instance = instance;
          }
        }
        /**
         * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef/deref}
         */
        deref() {
          var _a, _b;
          let instance;
          if (this._weakRef) {
            instance = (_a = this._weakRef) == null ? void 0 : _a.deref();
            if (!instance) {
              delete this._weakRef;
            }
          } else {
            instance = this._instance;
            if ((_b = instance == null ? void 0 : instance.isDisposed) == null ? void 0 : _b.call(instance)) {
              delete this._instance;
            }
          }
          return instance;
        }
      };
      KEYBORG_FOCUSIN = "keyborg:focusin";
      KEYBORG_FOCUSOUT = "keyborg:focusout";
      _canOverrideNativeFocus = false;
      _dismissTimeout = 500;
      _lastId = 0;
      KeyborgCore = class {
        constructor(win, props) {
          this._isNavigatingWithKeyboard_DO_NOT_USE = false;
          this._onFocusIn = (e) => {
            if (this._isMouseOrTouchUsedTimer) {
              return;
            }
            if (this.isNavigatingWithKeyboard) {
              return;
            }
            const details = e.detail;
            if (!details.relatedTarget) {
              return;
            }
            if (details.isFocusedProgrammatically || details.isFocusedProgrammatically === void 0) {
              return;
            }
            this.isNavigatingWithKeyboard = true;
          };
          this._onMouseDown = (e) => {
            if (e.buttons === 0 || e.clientX === 0 && e.clientY === 0 && e.screenX === 0 && e.screenY === 0) {
              return;
            }
            this._onMouseOrTouch();
          };
          this._onMouseOrTouch = () => {
            const win2 = this._win;
            if (win2) {
              if (this._isMouseOrTouchUsedTimer) {
                win2.clearTimeout(this._isMouseOrTouchUsedTimer);
              }
              this._isMouseOrTouchUsedTimer = win2.setTimeout(() => {
                delete this._isMouseOrTouchUsedTimer;
              }, 1e3);
            }
            this.isNavigatingWithKeyboard = false;
          };
          this._onKeyDown = (e) => {
            const isNavigatingWithKeyboard = this.isNavigatingWithKeyboard;
            if (isNavigatingWithKeyboard) {
              if (this._shouldDismissKeyboardNavigation(e)) {
                this._scheduleDismiss();
              }
            } else {
              if (this._shouldTriggerKeyboardNavigation(e)) {
                this.isNavigatingWithKeyboard = true;
              }
            }
          };
          this.id = "c" + ++_lastId;
          this._win = win;
          const doc = win.document;
          if (props) {
            const triggerKeys = props.triggerKeys;
            const dismissKeys = props.dismissKeys;
            if (triggerKeys == null ? void 0 : triggerKeys.length) {
              this._triggerKeys = new Set(triggerKeys);
            }
            if (dismissKeys == null ? void 0 : dismissKeys.length) {
              this._dismissKeys = new Set(dismissKeys);
            }
          }
          doc.addEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);
          doc.addEventListener("mousedown", this._onMouseDown, true);
          win.addEventListener("keydown", this._onKeyDown, true);
          doc.addEventListener("touchstart", this._onMouseOrTouch, true);
          doc.addEventListener("touchend", this._onMouseOrTouch, true);
          doc.addEventListener("touchcancel", this._onMouseOrTouch, true);
          setupFocusEvent(win);
        }
        get isNavigatingWithKeyboard() {
          return this._isNavigatingWithKeyboard_DO_NOT_USE;
        }
        set isNavigatingWithKeyboard(val) {
          if (this._isNavigatingWithKeyboard_DO_NOT_USE !== val) {
            this._isNavigatingWithKeyboard_DO_NOT_USE = val;
            this.update();
          }
        }
        dispose() {
          const win = this._win;
          if (win) {
            if (this._isMouseOrTouchUsedTimer) {
              win.clearTimeout(this._isMouseOrTouchUsedTimer);
              this._isMouseOrTouchUsedTimer = void 0;
            }
            if (this._dismissTimer) {
              win.clearTimeout(this._dismissTimer);
              this._dismissTimer = void 0;
            }
            disposeFocusEvent(win);
            const doc = win.document;
            doc.removeEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);
            doc.removeEventListener("mousedown", this._onMouseDown, true);
            win.removeEventListener("keydown", this._onKeyDown, true);
            doc.removeEventListener("touchstart", this._onMouseOrTouch, true);
            doc.removeEventListener("touchend", this._onMouseOrTouch, true);
            doc.removeEventListener("touchcancel", this._onMouseOrTouch, true);
            delete this._win;
          }
        }
        isDisposed() {
          return !!this._win;
        }
        /**
         * Updates all keyborg instances with the keyboard navigation state
         */
        update() {
          var _a, _b;
          const keyborgs = (_b = (_a = this._win) == null ? void 0 : _a.__keyborg) == null ? void 0 : _b.refs;
          if (keyborgs) {
            for (const id of Object.keys(keyborgs)) {
              Keyborg.update(keyborgs[id], this.isNavigatingWithKeyboard);
            }
          }
        }
        /**
         * @returns whether the keyboard event should trigger keyboard navigation mode
         */
        _shouldTriggerKeyboardNavigation(e) {
          var _a;
          if (e.key === "Tab") {
            return true;
          }
          const activeElement = (_a = this._win) == null ? void 0 : _a.document.activeElement;
          const isTriggerKey = !this._triggerKeys || this._triggerKeys.has(e.keyCode);
          const isEditable = activeElement && (activeElement.tagName === "INPUT" || activeElement.tagName === "TEXTAREA" || activeElement.isContentEditable);
          return isTriggerKey && !isEditable;
        }
        /**
         * @returns whether the keyboard event should dismiss keyboard navigation mode
         */
        _shouldDismissKeyboardNavigation(e) {
          var _a;
          return (_a = this._dismissKeys) == null ? void 0 : _a.has(e.keyCode);
        }
        _scheduleDismiss() {
          const win = this._win;
          if (win) {
            if (this._dismissTimer) {
              win.clearTimeout(this._dismissTimer);
              this._dismissTimer = void 0;
            }
            const was = win.document.activeElement;
            this._dismissTimer = win.setTimeout(() => {
              this._dismissTimer = void 0;
              const cur = win.document.activeElement;
              if (was && cur && was === cur) {
                this.isNavigatingWithKeyboard = false;
              }
            }, _dismissTimeout);
          }
        }
      };
      Keyborg = class _Keyborg {
        constructor(win, props) {
          this._cb = [];
          this._id = "k" + ++_lastId;
          this._win = win;
          const current = win.__keyborg;
          if (current) {
            this._core = current.core;
            current.refs[this._id] = this;
          } else {
            this._core = new KeyborgCore(win, props);
            win.__keyborg = {
              core: this._core,
              refs: { [this._id]: this }
            };
          }
        }
        static create(win, props) {
          return new _Keyborg(win, props);
        }
        static dispose(instance) {
          instance.dispose();
        }
        /**
         * Updates all subscribed callbacks with the keyboard navigation state
         */
        static update(instance, isNavigatingWithKeyboard) {
          instance._cb.forEach((callback) => callback(isNavigatingWithKeyboard));
        }
        dispose() {
          var _a;
          const current = (_a = this._win) == null ? void 0 : _a.__keyborg;
          if (current == null ? void 0 : current.refs[this._id]) {
            delete current.refs[this._id];
            if (Object.keys(current.refs).length === 0) {
              current.core.dispose();
              delete this._win.__keyborg;
            }
          } else if (true) {
            console.error(
              `Keyborg instance ${this._id} is being disposed incorrectly.`
            );
          }
          this._cb = [];
          delete this._core;
          delete this._win;
        }
        /**
         * @returns Whether the user is navigating with keyboard
         */
        isNavigatingWithKeyboard() {
          var _a;
          return !!((_a = this._core) == null ? void 0 : _a.isNavigatingWithKeyboard);
        }
        /**
         * @param callback - Called when the keyboard navigation state changes
         */
        subscribe(callback) {
          this._cb.push(callback);
        }
        /**
         * @param callback - Registered with subscribe
         */
        unsubscribe(callback) {
          const index = this._cb.indexOf(callback);
          if (index >= 0) {
            this._cb.splice(index, 1);
          }
        }
        /**
         * Manually set the keyboard navigtion state
         */
        setVal(isNavigatingWithKeyboard) {
          if (this._core) {
            this._core.isNavigatingWithKeyboard = isNavigatingWithKeyboard;
          }
        }
      };
    }
  });

  // node_modules/tabster/dist/tabster.esm.js
  function getTabsterOnElement(tabster, element) {
    var _a;
    return (_a = tabster.storageEntry(element)) === null || _a === void 0 ? void 0 : _a.tabster;
  }
  function updateTabsterByAttribute(tabster, element, dispose) {
    var _a, _b;
    const newAttrValue = dispose || tabster._noop ? void 0 : element.getAttribute(TABSTER_ATTRIBUTE_NAME);
    let entry = tabster.storageEntry(element);
    let newAttr;
    if (newAttrValue) {
      if (newAttrValue !== ((_a = entry === null || entry === void 0 ? void 0 : entry.attr) === null || _a === void 0 ? void 0 : _a.string)) {
        try {
          const newValue = JSON.parse(newAttrValue);
          if (typeof newValue !== "object") {
            throw new Error(`Value is not a JSON object, got '${newAttrValue}'.`);
          }
          newAttr = {
            string: newAttrValue,
            object: newValue
          };
        } catch (e) {
          if (true) {
            console.error(`data-tabster attribute error: ${e}`, element);
          }
        }
      } else {
        return;
      }
    } else if (!entry) {
      return;
    }
    if (!entry) {
      entry = tabster.storageEntry(element, true);
    }
    if (!entry.tabster) {
      entry.tabster = {};
    }
    const tabsterOnElement = entry.tabster || {};
    const oldTabsterProps = ((_b = entry.attr) === null || _b === void 0 ? void 0 : _b.object) || {};
    const newTabsterProps = (newAttr === null || newAttr === void 0 ? void 0 : newAttr.object) || {};
    for (const key of Object.keys(oldTabsterProps)) {
      if (!newTabsterProps[key]) {
        if (key === "root") {
          const root = tabsterOnElement[key];
          if (root) {
            tabster.root.onRoot(root, true);
          }
        }
        switch (key) {
          case "deloser":
          case "root":
          case "groupper":
          case "modalizer":
          case "restorer":
          case "mover":
            const part = tabsterOnElement[key];
            if (part) {
              part.dispose();
              delete tabsterOnElement[key];
            }
            break;
          case "observed":
            delete tabsterOnElement[key];
            if (tabster.observedElement) {
              tabster.observedElement.onObservedElementUpdate(element);
            }
            break;
          case "focusable":
          case "outline":
          case "uncontrolled":
          case "sys":
            delete tabsterOnElement[key];
            break;
        }
      }
    }
    for (const key of Object.keys(newTabsterProps)) {
      const sys = newTabsterProps.sys;
      switch (key) {
        case "deloser":
          if (tabsterOnElement.deloser) {
            tabsterOnElement.deloser.setProps(newTabsterProps.deloser);
          } else {
            if (tabster.deloser) {
              tabsterOnElement.deloser = tabster.deloser.createDeloser(element, newTabsterProps.deloser);
            } else if (true) {
              console.error("Deloser API used before initialization, please call `getDeloser()`");
            }
          }
          break;
        case "root":
          if (tabsterOnElement.root) {
            tabsterOnElement.root.setProps(newTabsterProps.root);
          } else {
            tabsterOnElement.root = tabster.root.createRoot(element, newTabsterProps.root, sys);
          }
          tabster.root.onRoot(tabsterOnElement.root);
          break;
        case "modalizer":
          if (tabsterOnElement.modalizer) {
            tabsterOnElement.modalizer.setProps(newTabsterProps.modalizer);
          } else {
            if (tabster.modalizer) {
              tabsterOnElement.modalizer = tabster.modalizer.createModalizer(element, newTabsterProps.modalizer, sys);
            } else if (true) {
              console.error("Modalizer API used before initialization, please call `getModalizer()`");
            }
          }
          break;
        case "restorer":
          if (tabsterOnElement.restorer) {
            tabsterOnElement.restorer.setProps(newTabsterProps.restorer);
          } else {
            if (tabster.restorer) {
              if (newTabsterProps.restorer) {
                tabsterOnElement.restorer = tabster.restorer.createRestorer(element, newTabsterProps.restorer);
              }
            } else if (true) {
              console.error("Restorer API used before initialization, please call `getRestorer()`");
            }
          }
          break;
        case "focusable":
          tabsterOnElement.focusable = newTabsterProps.focusable;
          break;
        case "groupper":
          if (tabsterOnElement.groupper) {
            tabsterOnElement.groupper.setProps(newTabsterProps.groupper);
          } else {
            if (tabster.groupper) {
              tabsterOnElement.groupper = tabster.groupper.createGroupper(element, newTabsterProps.groupper, sys);
            } else if (true) {
              console.error("Groupper API used before initialization, please call `getGroupper()`");
            }
          }
          break;
        case "mover":
          if (tabsterOnElement.mover) {
            tabsterOnElement.mover.setProps(newTabsterProps.mover);
          } else {
            if (tabster.mover) {
              tabsterOnElement.mover = tabster.mover.createMover(element, newTabsterProps.mover, sys);
            } else if (true) {
              console.error("Mover API used before initialization, please call `getMover()`");
            }
          }
          break;
        case "observed":
          if (tabster.observedElement) {
            tabsterOnElement.observed = newTabsterProps.observed;
            tabster.observedElement.onObservedElementUpdate(element);
          } else if (true) {
            console.error("ObservedElement API used before initialization, please call `getObservedElement()`");
          }
          break;
        case "uncontrolled":
          tabsterOnElement.uncontrolled = newTabsterProps.uncontrolled;
          break;
        case "outline":
          if (tabster.outline) {
            tabsterOnElement.outline = newTabsterProps.outline;
          } else if (true) {
            console.error("Outline API used before initialization, please call `getOutline()`");
          }
          break;
        case "sys":
          tabsterOnElement.sys = newTabsterProps.sys;
          break;
        default:
          console.error(`Unknown key '${key}' in data-tabster attribute value.`);
      }
    }
    if (newAttr) {
      entry.attr = newAttr;
    } else {
      if (Object.keys(tabsterOnElement).length === 0) {
        delete entry.tabster;
        delete entry.attr;
      }
      tabster.storageEntry(element, false);
    }
  }
  function setDOMAPI(domapi) {
    for (const key of Object.keys(domapi)) {
      dom[key] = domapi[key];
    }
  }
  function getInstanceContext(getWindow) {
    const win = getWindow();
    let ctx = win.__tabsterInstanceContext;
    if (!ctx) {
      ctx = {
        elementByUId: {},
        basics: {
          Promise: win.Promise || void 0,
          WeakRef: win.WeakRef || void 0
        },
        containerBoundingRectCache: {},
        lastContainerBoundingRectCacheId: 0,
        fakeWeakRefs: [],
        fakeWeakRefsStarted: false
      };
      win.__tabsterInstanceContext = ctx;
    }
    return ctx;
  }
  function disposeInstanceContext(win) {
    const ctx = win.__tabsterInstanceContext;
    if (ctx) {
      ctx.elementByUId = {};
      delete ctx.WeakRef;
      ctx.containerBoundingRectCache = {};
      if (ctx.containerBoundingRectCacheTimer) {
        win.clearTimeout(ctx.containerBoundingRectCacheTimer);
      }
      if (ctx.fakeWeakRefsTimer) {
        win.clearTimeout(ctx.fakeWeakRefsTimer);
      }
      ctx.fakeWeakRefs = [];
      delete win.__tabsterInstanceContext;
    }
  }
  function createWeakMap(win) {
    const ctx = win.__tabsterInstanceContext;
    return new ((ctx === null || ctx === void 0 ? void 0 : ctx.basics.WeakMap) || WeakMap)();
  }
  function hasSubFocusable(element) {
    return !!element.querySelector(FOCUSABLE_SELECTOR);
  }
  function cleanupFakeWeakRefs(getWindow, forceRemove) {
    const context = getInstanceContext(getWindow);
    context.fakeWeakRefs = context.fakeWeakRefs.filter((e) => !FakeWeakRef.cleanup(e, forceRemove));
  }
  function startFakeWeakRefsCleanup(getWindow) {
    const context = getInstanceContext(getWindow);
    if (!context.fakeWeakRefsStarted) {
      context.fakeWeakRefsStarted = true;
      context.WeakRef = getWeakRef(context);
    }
    if (!context.fakeWeakRefsTimer) {
      context.fakeWeakRefsTimer = getWindow().setTimeout(() => {
        context.fakeWeakRefsTimer = void 0;
        cleanupFakeWeakRefs(getWindow);
        startFakeWeakRefsCleanup(getWindow);
      }, 2 * 60 * 1e3);
    }
  }
  function stopFakeWeakRefsCleanupAndClearStorage(getWindow) {
    const context = getInstanceContext(getWindow);
    context.fakeWeakRefsStarted = false;
    if (context.fakeWeakRefsTimer) {
      getWindow().clearTimeout(context.fakeWeakRefsTimer);
      context.fakeWeakRefsTimer = void 0;
      context.fakeWeakRefs = [];
    }
  }
  function createElementTreeWalker(doc, root, acceptNode) {
    if (root.nodeType !== Node.ELEMENT_NODE) {
      return void 0;
    }
    const filter3 = _isBrokenIE11 ? acceptNode : {
      acceptNode
    };
    return dom.createTreeWalker(
      doc,
      root,
      NodeFilter.SHOW_ELEMENT,
      filter3,
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore: We still don't want to completely break IE11, so, entityReferenceExpansion argument is not optional.
      false
      /* Last argument is not optional for IE11! */
    );
  }
  function getBoundingRect(getWindow, element) {
    let cacheId = element.__tabsterCacheId;
    const context = getInstanceContext(getWindow);
    const cached = cacheId ? context.containerBoundingRectCache[cacheId] : void 0;
    if (cached) {
      return cached.rect;
    }
    const scrollingElement = element.ownerDocument && element.ownerDocument.documentElement;
    if (!scrollingElement) {
      return new _DOMRect();
    }
    let left = 0;
    let top = 0;
    let right = scrollingElement.clientWidth;
    let bottom = scrollingElement.clientHeight;
    if (element !== scrollingElement) {
      const r = element.getBoundingClientRect();
      left = Math.max(left, r.left);
      top = Math.max(top, r.top);
      right = Math.min(right, r.right);
      bottom = Math.min(bottom, r.bottom);
    }
    const rect = new _DOMRect(left < right ? left : -1, top < bottom ? top : -1, left < right ? right - left : 0, top < bottom ? bottom - top : 0);
    if (!cacheId) {
      cacheId = "r-" + ++context.lastContainerBoundingRectCacheId;
      element.__tabsterCacheId = cacheId;
    }
    context.containerBoundingRectCache[cacheId] = {
      rect,
      element
    };
    if (!context.containerBoundingRectCacheTimer) {
      context.containerBoundingRectCacheTimer = window.setTimeout(() => {
        context.containerBoundingRectCacheTimer = void 0;
        for (const cId of Object.keys(context.containerBoundingRectCache)) {
          delete context.containerBoundingRectCache[cId].element.__tabsterCacheId;
        }
        context.containerBoundingRectCache = {};
      }, 50);
    }
    return rect;
  }
  function isElementVerticallyVisibleInContainer(getWindow, element, tolerance) {
    const container = getScrollableContainer(element);
    if (!container) {
      return false;
    }
    const containerRect = getBoundingRect(getWindow, container);
    const elementRect = element.getBoundingClientRect();
    const intersectionTolerance = elementRect.height * (1 - tolerance);
    const topIntersection = Math.max(0, containerRect.top - elementRect.top);
    const bottomIntersection = Math.max(0, elementRect.bottom - containerRect.bottom);
    const totalIntersection = topIntersection + bottomIntersection;
    return totalIntersection === 0 || totalIntersection <= intersectionTolerance;
  }
  function scrollIntoView(getWindow, element, alignToTop) {
    const container = getScrollableContainer(element);
    if (container) {
      const containerRect = getBoundingRect(getWindow, container);
      const elementRect = element.getBoundingClientRect();
      if (alignToTop) {
        container.scrollTop += elementRect.top - containerRect.top;
      } else {
        container.scrollTop += elementRect.bottom - containerRect.bottom;
      }
    }
  }
  function getScrollableContainer(element) {
    const doc = element.ownerDocument;
    if (doc) {
      for (let el = dom.getParentElement(element); el; el = dom.getParentElement(el)) {
        if (el.scrollWidth > el.clientWidth || el.scrollHeight > el.clientHeight) {
          return el;
        }
      }
      return doc.documentElement;
    }
    return null;
  }
  function makeFocusIgnored(element) {
    element.__shouldIgnoreFocus = true;
  }
  function shouldIgnoreFocus(element) {
    return !!element.__shouldIgnoreFocus;
  }
  function getUId(wnd) {
    const rnd = new Uint32Array(4);
    if (wnd.crypto && wnd.crypto.getRandomValues) {
      wnd.crypto.getRandomValues(rnd);
    } else if (wnd.msCrypto && wnd.msCrypto.getRandomValues) {
      wnd.msCrypto.getRandomValues(rnd);
    } else {
      for (let i = 0; i < rnd.length; i++) {
        rnd[i] = 4294967295 * Math.random();
      }
    }
    const srnd = [];
    for (let i = 0; i < rnd.length; i++) {
      srnd.push(rnd[i].toString(36));
    }
    srnd.push("|");
    srnd.push((++_uidCounter).toString(36));
    srnd.push("|");
    srnd.push(Date.now().toString(36));
    return srnd.join("");
  }
  function getElementUId(getWindow, element) {
    const context = getInstanceContext(getWindow);
    let uid = element.__tabsterElementUID;
    if (!uid) {
      uid = element.__tabsterElementUID = getUId(getWindow());
    }
    if (!context.elementByUId[uid] && documentContains(element.ownerDocument, element)) {
      context.elementByUId[uid] = new WeakHTMLElement(getWindow, element);
    }
    return uid;
  }
  function clearElementCache(getWindow, parent) {
    const context = getInstanceContext(getWindow);
    for (const key of Object.keys(context.elementByUId)) {
      const wel = context.elementByUId[key];
      const el = wel && wel.get();
      if (el && parent) {
        if (!dom.nodeContains(parent, el)) {
          continue;
        }
      }
      delete context.elementByUId[key];
    }
  }
  function documentContains(doc, element) {
    return dom.nodeContains(doc === null || doc === void 0 ? void 0 : doc.body, element);
  }
  function matchesSelector(element, selector) {
    const matches = element.matches || element.matchesSelector || element.msMatchesSelector || element.webkitMatchesSelector;
    return matches && matches.call(element, selector);
  }
  function getPromise(getWindow) {
    const context = getInstanceContext(getWindow);
    if (context.basics.Promise) {
      return context.basics.Promise;
    }
    throw new Error("No Promise defined.");
  }
  function getWeakRef(context) {
    return context.basics.WeakRef;
  }
  function setDummyInputDebugValue(dummy, wrappers) {
    var _a;
    const what = {
      1: "Root",
      2: "Modalizer",
      3: "Mover",
      4: "Groupper"
    };
    (_a = dummy.input) === null || _a === void 0 ? void 0 : _a.setAttribute(TABSTER_DUMMY_INPUT_ATTRIBUTE_NAME, [`isFirst=${dummy.isFirst}`, `isOutside=${dummy.isOutside}`, ...wrappers.map((w) => `(${what[w.priority]}, tabbable=${w.tabbable})`)].join(", "));
  }
  function getLastChild$2(container) {
    let lastChild = null;
    for (let i = dom.getLastElementChild(container); i; i = dom.getLastElementChild(i)) {
      lastChild = i;
    }
    return lastChild || void 0;
  }
  function isDisplayNone(element) {
    var _a, _b;
    const elementDocument = element.ownerDocument;
    const computedStyle = (_a = elementDocument.defaultView) === null || _a === void 0 ? void 0 : _a.getComputedStyle(element);
    if (element.offsetParent === null && elementDocument.body !== element && (computedStyle === null || computedStyle === void 0 ? void 0 : computedStyle.position) !== "fixed") {
      return true;
    }
    if ((computedStyle === null || computedStyle === void 0 ? void 0 : computedStyle.visibility) === "hidden") {
      return true;
    }
    if ((computedStyle === null || computedStyle === void 0 ? void 0 : computedStyle.position) === "fixed") {
      if (computedStyle.display === "none") {
        return true;
      }
      if (((_b = element.parentElement) === null || _b === void 0 ? void 0 : _b.offsetParent) === null && elementDocument.body !== element.parentElement) {
        return true;
      }
    }
    return false;
  }
  function isRadio(element) {
    return element.tagName === "INPUT" && !!element.name && element.type === "radio";
  }
  function getRadioButtonGroup(element) {
    if (!isRadio(element)) {
      return;
    }
    const name = element.name;
    let radioButtons = Array.from(dom.getElementsByName(element, name));
    let checked;
    radioButtons = radioButtons.filter((el) => {
      if (isRadio(el)) {
        if (el.checked) {
          checked = el;
        }
        return true;
      }
      return false;
    });
    return {
      name,
      buttons: new Set(radioButtons),
      checked
    };
  }
  function getDummyInputContainer(element) {
    var _a;
    return ((_a = element === null || element === void 0 ? void 0 : element.__tabsterDummyContainer) === null || _a === void 0 ? void 0 : _a.get()) || null;
  }
  function getTabsterAttribute(props, plain) {
    const attr = JSON.stringify(props);
    if (plain === true) {
      return attr;
    }
    return {
      [TABSTER_ATTRIBUTE_NAME]: attr
    };
  }
  function mergeTabsterProps(props, newProps) {
    for (const key of Object.keys(newProps)) {
      const value = newProps[key];
      if (value) {
        props[key] = value;
      } else {
        delete props[key];
      }
    }
  }
  function setTabsterAttribute(element, newProps, update) {
    let props;
    if (update) {
      const attr = element.getAttribute(TABSTER_ATTRIBUTE_NAME);
      if (attr) {
        try {
          props = JSON.parse(attr);
        } catch (e) {
          if (true) {
            console.error(`data-tabster attribute error: ${e}`, element);
          }
        }
      }
    }
    if (!props) {
      props = {};
    }
    mergeTabsterProps(props, newProps);
    if (Object.keys(props).length > 0) {
      element.setAttribute(TABSTER_ATTRIBUTE_NAME, getTabsterAttribute(props, true));
    } else {
      element.removeAttribute(TABSTER_ATTRIBUTE_NAME);
    }
  }
  function _setInformativeStyle$3(weakElement, remove, id) {
    if (true) {
      const element = weakElement.get();
      if (element) {
        if (remove) {
          element.style.removeProperty("--tabster-root");
        } else {
          element.style.setProperty("--tabster-root", id + ",");
        }
      }
    }
  }
  function getUncontrolledCompletelyContainer(tabster, element) {
    var _a;
    const getParent2 = tabster.getParent;
    let el = element;
    do {
      const uncontrolledOnElement = (_a = getTabsterOnElement(tabster, el)) === null || _a === void 0 ? void 0 : _a.uncontrolled;
      if (uncontrolledOnElement && tabster.uncontrolled.isUncontrolledCompletely(el, !!uncontrolledOnElement.completely)) {
        return el;
      }
      el = getParent2(el);
    } while (el);
    return void 0;
  }
  function getDistance(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {
    const xDistance = ax2 < bx1 ? bx1 - ax2 : bx2 < ax1 ? ax1 - bx2 : 0;
    const yDistance = ay2 < by1 ? by1 - ay2 : by2 < ay1 ? ay1 - by2 : 0;
    return xDistance === 0 ? yDistance : yDistance === 0 ? xDistance : Math.sqrt(xDistance * xDistance + yDistance * yDistance);
  }
  function observeMutations(doc, tabster, updateTabsterByAttribute2, syncState) {
    if (typeof MutationObserver === "undefined") {
      return () => {
      };
    }
    const getWindow = tabster.getWindow;
    let elementByUId;
    const onMutation = (mutations) => {
      var _a, _b, _c, _d, _e;
      const removedNodes = /* @__PURE__ */ new Set();
      for (const mutation of mutations) {
        const target = mutation.target;
        const removed = mutation.removedNodes;
        const added = mutation.addedNodes;
        if (mutation.type === "attributes") {
          if (mutation.attributeName === TABSTER_ATTRIBUTE_NAME) {
            if (!removedNodes.has(target)) {
              updateTabsterByAttribute2(tabster, target);
            }
          }
        } else {
          for (let i = 0; i < removed.length; i++) {
            const removedNode = removed[i];
            removedNodes.add(removedNode);
            updateTabsterElements(removedNode, true);
            (_b = (_a = tabster._dummyObserver).domChanged) === null || _b === void 0 ? void 0 : _b.call(_a, target);
          }
          for (let i = 0; i < added.length; i++) {
            updateTabsterElements(added[i]);
            (_d = (_c = tabster._dummyObserver).domChanged) === null || _d === void 0 ? void 0 : _d.call(_c, target);
          }
        }
      }
      removedNodes.clear();
      (_e = tabster.modalizer) === null || _e === void 0 ? void 0 : _e.hiddenUpdate();
    };
    function updateTabsterElements(node2, removed) {
      if (!elementByUId) {
        elementByUId = getInstanceContext(getWindow).elementByUId;
      }
      processNode(node2, removed);
      const walker = createElementTreeWalker(doc, node2, (element) => {
        return processNode(element, removed);
      });
      if (walker) {
        while (walker.nextNode()) {
        }
      }
    }
    function processNode(element, removed) {
      var _a;
      if (!element.getAttribute) {
        return NodeFilter.FILTER_SKIP;
      }
      const uid = element.__tabsterElementUID;
      if (uid && elementByUId) {
        if (removed) {
          delete elementByUId[uid];
        } else {
          (_a = elementByUId[uid]) !== null && _a !== void 0 ? _a : elementByUId[uid] = new WeakHTMLElement(getWindow, element);
        }
      }
      if (getTabsterOnElement(tabster, element) || element.hasAttribute(TABSTER_ATTRIBUTE_NAME)) {
        updateTabsterByAttribute2(tabster, element, removed);
      }
      return NodeFilter.FILTER_SKIP;
    }
    const observer = dom.createMutationObserver(onMutation);
    if (syncState) {
      updateTabsterElements(getWindow().document.body);
    }
    observer.observe(doc, {
      childList: true,
      subtree: true,
      attributes: true,
      attributeFilter: [TABSTER_ATTRIBUTE_NAME]
    });
    return () => {
      observer.disconnect();
    };
  }
  function nodeContains(node2, otherNode) {
    var _a, _b;
    if (!node2 || !otherNode) {
      return false;
    }
    let currentNode = otherNode;
    while (currentNode) {
      if (currentNode === node2) {
        return true;
      }
      if (typeof currentNode.assignedElements !== "function" && ((_a = currentNode.assignedSlot) === null || _a === void 0 ? void 0 : _a.parentNode)) {
        currentNode = (_b = currentNode.assignedSlot) === null || _b === void 0 ? void 0 : _b.parentNode;
      } else if (currentNode.nodeType === document.DOCUMENT_FRAGMENT_NODE) {
        currentNode = currentNode.host;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return false;
  }
  function createTabster(win, props) {
    let tabster = getCurrentTabster(win);
    if (tabster) {
      return tabster.createTabster(false, props);
    }
    tabster = new TabsterCore(win, props);
    win.__tabsterInstance = tabster;
    return tabster.createTabster();
  }
  function getMover(tabster) {
    const tabsterCore = tabster.core;
    if (!tabsterCore.mover) {
      tabsterCore.mover = new MoverAPI(tabsterCore, tabsterCore.getWindow);
    }
    return tabsterCore.mover;
  }
  function disposeTabster(tabster, allInstances) {
    tabster.core.disposeTabster(tabster, allInstances);
  }
  function getCurrentTabster(win) {
    return win.__tabsterInstance;
  }
  var TABSTER_ATTRIBUTE_NAME, TABSTER_DUMMY_INPUT_ATTRIBUTE_NAME, FOCUSABLE_SELECTOR, AsyncFocusSources, Visibilities, MoverDirections, MoverKeys, SysDummyInputsPositions, TabsterFocusInEventName, TabsterFocusOutEventName, TabsterMoveFocusEventName, MoverStateEventName, MoverMoveFocusEventName, MoverMemorizedElementEventName, RootFocusEventName, RootBlurEventName, CustomEvent_, TabsterCustomEvent, TabsterFocusInEvent, TabsterFocusOutEvent, TabsterMoveFocusEvent, MoverStateEvent, RootFocusEvent, RootBlurEvent, _createMutationObserver, _createTreeWalker, _getParentNode, _getParentElement, _nodeContains, _getActiveElement, _querySelector, _querySelectorAll, _getElementById, _getFirstChild, _getLastChild, _getNextSibling, _getPreviousSibling, _getFirstElementChild, _getLastElementChild, _getNextElementSibling, _getPreviousElementSibling, _appendChild, _insertBefore, _getSelection, _getElementsByName, dom, _isBrokenIE11, _DOMRect, _uidCounter, _updateDummyInputsTimeout, FakeWeakRef, WeakHTMLElement, _lastTabsterPartId, TabsterPart, DummyInput, DummyInputManagerPriorities, DummyInputManager, DummyInputObserver, DummyInputManagerCore, RootDummyManager, Root, RootAPI, Subscribable, FocusableAPI, Keys, AsyncFocusIntentPriorityBySource, FocusedElementState, KeyboardNavigationState, _inputSelector, MoverDummyManager, _moverUpdateAdd, _moverUpdateAttr, _moverUpdateRemove, Mover, MoverAPI, UncontrolledAPI, History, ShadowMutationObserver, Tabster, TabsterCore;
  var init_tabster_esm = __esm({
    "node_modules/tabster/dist/tabster.esm.js"() {
      init_esm();
      TABSTER_ATTRIBUTE_NAME = "data-tabster";
      TABSTER_DUMMY_INPUT_ATTRIBUTE_NAME = "data-tabster-dummy";
      FOCUSABLE_SELECTOR = /* @__PURE__ */ ["a[href]", "button:not([disabled])", "input:not([disabled])", "select:not([disabled])", "textarea:not([disabled])", "*[tabindex]", "*[contenteditable]", "details > summary", "audio[controls]", "video[controls]"].join(", ");
      AsyncFocusSources = {
        EscapeGroupper: 1,
        Restorer: 2,
        Deloser: 3
      };
      Visibilities = {
        Invisible: 0,
        PartiallyVisible: 1,
        Visible: 2
      };
      MoverDirections = {
        Both: 0,
        Vertical: 1,
        Horizontal: 2,
        Grid: 3,
        GridLinear: 4
        // Two-dimentional movement depending on the visual placement. Allows linear movement.
      };
      MoverKeys = {
        ArrowUp: 1,
        ArrowDown: 2,
        ArrowLeft: 3,
        ArrowRight: 4,
        PageUp: 5,
        PageDown: 6,
        Home: 7,
        End: 8
      };
      SysDummyInputsPositions = {
        Auto: 0,
        Inside: 1,
        Outside: 2
        // Tabster will always place dummy inputs outside of the container.
      };
      TabsterFocusInEventName = "tabster:focusin";
      TabsterFocusOutEventName = "tabster:focusout";
      TabsterMoveFocusEventName = "tabster:movefocus";
      MoverStateEventName = "tabster:mover:state";
      MoverMoveFocusEventName = "tabster:mover:movefocus";
      MoverMemorizedElementEventName = "tabster:mover:memorized-element";
      RootFocusEventName = "tabster:root:focus";
      RootBlurEventName = "tabster:root:blur";
      CustomEvent_ = typeof CustomEvent !== "undefined" ? CustomEvent : function() {
      };
      TabsterCustomEvent = class extends CustomEvent_ {
        constructor(type, detail) {
          super(type, {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail
          });
          this.details = detail;
        }
      };
      TabsterFocusInEvent = class extends TabsterCustomEvent {
        constructor(detail) {
          super(TabsterFocusInEventName, detail);
        }
      };
      TabsterFocusOutEvent = class extends TabsterCustomEvent {
        constructor(detail) {
          super(TabsterFocusOutEventName, detail);
        }
      };
      TabsterMoveFocusEvent = class extends TabsterCustomEvent {
        constructor(detail) {
          super(TabsterMoveFocusEventName, detail);
        }
      };
      MoverStateEvent = class extends TabsterCustomEvent {
        constructor(detail) {
          super(MoverStateEventName, detail);
        }
      };
      RootFocusEvent = class extends TabsterCustomEvent {
        constructor(detail) {
          super(RootFocusEventName, detail);
        }
      };
      RootBlurEvent = class extends TabsterCustomEvent {
        constructor(detail) {
          super(RootBlurEventName, detail);
        }
      };
      _createMutationObserver = (callback) => new MutationObserver(callback);
      _createTreeWalker = (doc, root, whatToShow, filter3) => doc.createTreeWalker(root, whatToShow, filter3);
      _getParentNode = (node2) => node2 ? node2.parentNode : null;
      _getParentElement = (element) => element ? element.parentElement : null;
      _nodeContains = (parent, child) => !!(child && (parent === null || parent === void 0 ? void 0 : parent.contains(child)));
      _getActiveElement = (doc) => doc.activeElement;
      _querySelector = (element, selector) => element.querySelector(selector);
      _querySelectorAll = (element, selector) => Array.prototype.slice.call(element.querySelectorAll(selector), 0);
      _getElementById = (doc, id) => doc.getElementById(id);
      _getFirstChild = (node2) => (node2 === null || node2 === void 0 ? void 0 : node2.firstChild) || null;
      _getLastChild = (node2) => (node2 === null || node2 === void 0 ? void 0 : node2.lastChild) || null;
      _getNextSibling = (node2) => (node2 === null || node2 === void 0 ? void 0 : node2.nextSibling) || null;
      _getPreviousSibling = (node2) => (node2 === null || node2 === void 0 ? void 0 : node2.previousSibling) || null;
      _getFirstElementChild = (element) => (element === null || element === void 0 ? void 0 : element.firstElementChild) || null;
      _getLastElementChild = (element) => (element === null || element === void 0 ? void 0 : element.lastElementChild) || null;
      _getNextElementSibling = (element) => (element === null || element === void 0 ? void 0 : element.nextElementSibling) || null;
      _getPreviousElementSibling = (element) => (element === null || element === void 0 ? void 0 : element.previousElementSibling) || null;
      _appendChild = (parent, child) => parent.appendChild(child);
      _insertBefore = (parent, child, referenceChild) => parent.insertBefore(child, referenceChild);
      _getSelection = (ref) => {
        var _a;
        return ((_a = ref.ownerDocument) === null || _a === void 0 ? void 0 : _a.getSelection()) || null;
      };
      _getElementsByName = (referenceElement, name) => referenceElement.ownerDocument.getElementsByName(name);
      dom = {
        createMutationObserver: _createMutationObserver,
        createTreeWalker: _createTreeWalker,
        getParentNode: _getParentNode,
        getParentElement: _getParentElement,
        nodeContains: _nodeContains,
        getActiveElement: _getActiveElement,
        querySelector: _querySelector,
        querySelectorAll: _querySelectorAll,
        getElementById: _getElementById,
        getFirstChild: _getFirstChild,
        getLastChild: _getLastChild,
        getNextSibling: _getNextSibling,
        getPreviousSibling: _getPreviousSibling,
        getFirstElementChild: _getFirstElementChild,
        getLastElementChild: _getLastElementChild,
        getNextElementSibling: _getNextElementSibling,
        getPreviousElementSibling: _getPreviousElementSibling,
        appendChild: _appendChild,
        insertBefore: _insertBefore,
        getSelection: _getSelection,
        getElementsByName: _getElementsByName
      };
      _DOMRect = typeof DOMRect !== "undefined" ? DOMRect : class {
        constructor(x, y, width, height) {
          this.left = x || 0;
          this.top = y || 0;
          this.right = (x || 0) + (width || 0);
          this.bottom = (y || 0) + (height || 0);
        }
      };
      _uidCounter = 0;
      try {
        document.createTreeWalker(document, NodeFilter.SHOW_ELEMENT);
        _isBrokenIE11 = false;
      } catch (e) {
        _isBrokenIE11 = true;
      }
      _updateDummyInputsTimeout = 100;
      FakeWeakRef = class {
        constructor(target) {
          this._target = target;
        }
        deref() {
          return this._target;
        }
        static cleanup(fwr, forceRemove) {
          if (!fwr._target) {
            return true;
          }
          if (forceRemove || !documentContains(fwr._target.ownerDocument, fwr._target)) {
            delete fwr._target;
            return true;
          }
          return false;
        }
      };
      WeakHTMLElement = class {
        constructor(getWindow, element, data) {
          const context = getInstanceContext(getWindow);
          let ref;
          if (context.WeakRef) {
            ref = new context.WeakRef(element);
          } else {
            ref = new FakeWeakRef(element);
            context.fakeWeakRefs.push(ref);
          }
          this._ref = ref;
          this._data = data;
        }
        get() {
          const ref = this._ref;
          let element;
          if (ref) {
            element = ref.deref();
            if (!element) {
              delete this._ref;
            }
          }
          return element;
        }
        getData() {
          return this._data;
        }
      };
      _lastTabsterPartId = 0;
      TabsterPart = class {
        constructor(tabster, element, props) {
          const getWindow = tabster.getWindow;
          this._tabster = tabster;
          this._element = new WeakHTMLElement(getWindow, element);
          this._props = {
            ...props
          };
          this.id = "i" + ++_lastTabsterPartId;
        }
        getElement() {
          return this._element.get();
        }
        getProps() {
          return this._props;
        }
        setProps(props) {
          this._props = {
            ...props
          };
        }
      };
      DummyInput = class {
        constructor(getWindow, isOutside, props, element, fixedTarget) {
          var _a;
          this._focusIn = (e) => {
            if (this._fixedTarget) {
              const target = this._fixedTarget.get();
              if (target) {
                nativeFocus(target);
              }
              return;
            }
            const input2 = this.input;
            if (this.onFocusIn && input2) {
              const relatedTarget = e.relatedTarget;
              this.onFocusIn(this, this._isBackward(true, input2, relatedTarget), relatedTarget);
            }
          };
          this._focusOut = (e) => {
            if (this._fixedTarget) {
              return;
            }
            this.useDefaultAction = false;
            const input2 = this.input;
            if (this.onFocusOut && input2) {
              const relatedTarget = e.relatedTarget;
              this.onFocusOut(this, this._isBackward(false, input2, relatedTarget), relatedTarget);
            }
          };
          const win = getWindow();
          const input = win.document.createElement("i");
          input.tabIndex = 0;
          input.setAttribute("role", "none");
          input.setAttribute(TABSTER_DUMMY_INPUT_ATTRIBUTE_NAME, "");
          input.setAttribute("aria-hidden", "true");
          const style = input.style;
          style.position = "fixed";
          style.width = style.height = "1px";
          style.opacity = "0.001";
          style.zIndex = "-1";
          style.setProperty("content-visibility", "hidden");
          makeFocusIgnored(input);
          this.input = input;
          this.isFirst = props.isFirst;
          this.isOutside = isOutside;
          this._isPhantom = (_a = props.isPhantom) !== null && _a !== void 0 ? _a : false;
          this._fixedTarget = fixedTarget;
          input.addEventListener("focusin", this._focusIn);
          input.addEventListener("focusout", this._focusOut);
          input.__tabsterDummyContainer = element;
          if (this._isPhantom) {
            this._disposeTimer = win.setTimeout(() => {
              delete this._disposeTimer;
              this.dispose();
            }, 0);
            this._clearDisposeTimeout = () => {
              if (this._disposeTimer) {
                win.clearTimeout(this._disposeTimer);
                delete this._disposeTimer;
              }
              delete this._clearDisposeTimeout;
            };
          }
        }
        dispose() {
          var _a;
          if (this._clearDisposeTimeout) {
            this._clearDisposeTimeout();
          }
          const input = this.input;
          if (!input) {
            return;
          }
          delete this._fixedTarget;
          delete this.onFocusIn;
          delete this.onFocusOut;
          delete this.input;
          input.removeEventListener("focusin", this._focusIn);
          input.removeEventListener("focusout", this._focusOut);
          delete input.__tabsterDummyContainer;
          (_a = dom.getParentNode(input)) === null || _a === void 0 ? void 0 : _a.removeChild(input);
        }
        setTopLeft(top, left) {
          var _a;
          const style = (_a = this.input) === null || _a === void 0 ? void 0 : _a.style;
          if (style) {
            style.top = `${top}px`;
            style.left = `${left}px`;
          }
        }
        _isBackward(isIn, current, previous) {
          return isIn && !previous ? !this.isFirst : !!(previous && current.compareDocumentPosition(previous) & Node.DOCUMENT_POSITION_FOLLOWING);
        }
      };
      DummyInputManagerPriorities = {
        Root: 1,
        Modalizer: 2,
        Mover: 3,
        Groupper: 4
      };
      DummyInputManager = class {
        constructor(tabster, element, priority, sys, outsideByDefault, callForDefaultAction) {
          this._element = element;
          this._instance = new DummyInputManagerCore(tabster, element, this, priority, sys, outsideByDefault, callForDefaultAction);
        }
        _setHandlers(onFocusIn, onFocusOut) {
          this._onFocusIn = onFocusIn;
          this._onFocusOut = onFocusOut;
        }
        moveOut(backwards) {
          var _a;
          (_a = this._instance) === null || _a === void 0 ? void 0 : _a.moveOut(backwards);
        }
        moveOutWithDefaultAction(backwards, relatedEvent) {
          var _a;
          (_a = this._instance) === null || _a === void 0 ? void 0 : _a.moveOutWithDefaultAction(backwards, relatedEvent);
        }
        getHandler(isIn) {
          return isIn ? this._onFocusIn : this._onFocusOut;
        }
        setTabbable(tabbable) {
          var _a;
          (_a = this._instance) === null || _a === void 0 ? void 0 : _a.setTabbable(this, tabbable);
        }
        dispose() {
          if (this._instance) {
            this._instance.dispose(this);
            delete this._instance;
          }
          delete this._onFocusIn;
          delete this._onFocusOut;
        }
        static moveWithPhantomDummy(tabster, element, moveOutOfElement, isBackward, relatedEvent) {
          const dummy = new DummyInput(tabster.getWindow, true, {
            isPhantom: true,
            isFirst: true
          });
          const input = dummy.input;
          if (input) {
            let parent;
            let insertBefore;
            if (element.tagName === "BODY") {
              parent = element;
              insertBefore = moveOutOfElement && isBackward || !moveOutOfElement && !isBackward ? dom.getFirstElementChild(element) : null;
            } else {
              if (moveOutOfElement && (!isBackward || isBackward && !tabster.focusable.isFocusable(element, false, true, true))) {
                parent = element;
                insertBefore = isBackward ? element.firstElementChild : null;
              } else {
                parent = dom.getParentElement(element);
                insertBefore = moveOutOfElement && isBackward || !moveOutOfElement && !isBackward ? element : dom.getNextElementSibling(element);
              }
              let potentialDummy;
              let dummyFor;
              do {
                potentialDummy = moveOutOfElement && isBackward || !moveOutOfElement && !isBackward ? dom.getPreviousElementSibling(insertBefore) : insertBefore;
                dummyFor = getDummyInputContainer(potentialDummy);
                if (dummyFor === element) {
                  insertBefore = moveOutOfElement && isBackward || !moveOutOfElement && !isBackward ? potentialDummy : dom.getNextElementSibling(potentialDummy);
                } else {
                  dummyFor = null;
                }
              } while (dummyFor);
            }
            if (parent === null || parent === void 0 ? void 0 : parent.dispatchEvent(new TabsterMoveFocusEvent({
              by: "root",
              owner: parent,
              next: null,
              relatedEvent
            }))) {
              dom.insertBefore(parent, input, insertBefore);
              nativeFocus(input);
            }
          }
        }
        static addPhantomDummyWithTarget(tabster, sourceElement, isBackward, targetElement) {
          const dummy = new DummyInput(tabster.getWindow, true, {
            isPhantom: true,
            isFirst: true
          }, void 0, new WeakHTMLElement(tabster.getWindow, targetElement));
          const input = dummy.input;
          if (input) {
            let dummyParent;
            let insertBefore;
            if (hasSubFocusable(sourceElement) && !isBackward) {
              dummyParent = sourceElement;
              insertBefore = dom.getFirstElementChild(sourceElement);
            } else {
              dummyParent = dom.getParentElement(sourceElement);
              insertBefore = isBackward ? sourceElement : dom.getNextElementSibling(sourceElement);
            }
            if (dummyParent) {
              dom.insertBefore(dummyParent, input, insertBefore);
            }
          }
        }
      };
      DummyInputObserver = class {
        constructor(win) {
          this._updateQueue = /* @__PURE__ */ new Set();
          this._lastUpdateQueueTime = 0;
          this._changedParents = /* @__PURE__ */ new WeakSet();
          this._dummyElements = [];
          this._dummyCallbacks = /* @__PURE__ */ new WeakMap();
          this._domChanged = (parent) => {
            var _a;
            if (this._changedParents.has(parent)) {
              return;
            }
            this._changedParents.add(parent);
            if (this._updateDummyInputsTimer) {
              return;
            }
            this._updateDummyInputsTimer = (_a = this._win) === null || _a === void 0 ? void 0 : _a.call(this).setTimeout(() => {
              delete this._updateDummyInputsTimer;
              for (const ref of this._dummyElements) {
                const dummyElement = ref.get();
                if (dummyElement) {
                  const callback = this._dummyCallbacks.get(dummyElement);
                  if (callback) {
                    const dummyParent = dom.getParentNode(dummyElement);
                    if (!dummyParent || this._changedParents.has(dummyParent)) {
                      callback();
                    }
                  }
                }
              }
              this._changedParents = /* @__PURE__ */ new WeakSet();
            }, _updateDummyInputsTimeout);
          };
          this._win = win;
        }
        add(dummy, callback) {
          if (!this._dummyCallbacks.has(dummy) && this._win) {
            this._dummyElements.push(new WeakHTMLElement(this._win, dummy));
            this._dummyCallbacks.set(dummy, callback);
            this.domChanged = this._domChanged;
          }
        }
        remove(dummy) {
          this._dummyElements = this._dummyElements.filter((ref) => {
            const element = ref.get();
            return element && element !== dummy;
          });
          this._dummyCallbacks.delete(dummy);
          if (this._dummyElements.length === 0) {
            delete this.domChanged;
          }
        }
        dispose() {
          var _a;
          const win = (_a = this._win) === null || _a === void 0 ? void 0 : _a.call(this);
          if (this._updateTimer) {
            win === null || win === void 0 ? void 0 : win.clearTimeout(this._updateTimer);
            delete this._updateTimer;
          }
          if (this._updateDummyInputsTimer) {
            win === null || win === void 0 ? void 0 : win.clearTimeout(this._updateDummyInputsTimer);
            delete this._updateDummyInputsTimer;
          }
          this._changedParents = /* @__PURE__ */ new WeakSet();
          this._dummyCallbacks = /* @__PURE__ */ new WeakMap();
          this._dummyElements = [];
          this._updateQueue.clear();
          delete this.domChanged;
          delete this._win;
        }
        updatePositions(compute) {
          if (!this._win) {
            return;
          }
          this._updateQueue.add(compute);
          this._lastUpdateQueueTime = Date.now();
          this._scheduledUpdatePositions();
        }
        _scheduledUpdatePositions() {
          var _a;
          if (this._updateTimer) {
            return;
          }
          this._updateTimer = (_a = this._win) === null || _a === void 0 ? void 0 : _a.call(this).setTimeout(() => {
            delete this._updateTimer;
            if (this._lastUpdateQueueTime + _updateDummyInputsTimeout <= Date.now()) {
              const scrollTopLeftCache = /* @__PURE__ */ new Map();
              const setTopLeftCallbacks = [];
              for (const compute of this._updateQueue) {
                setTopLeftCallbacks.push(compute(scrollTopLeftCache));
              }
              this._updateQueue.clear();
              for (const setTopLeft of setTopLeftCallbacks) {
                setTopLeft();
              }
              scrollTopLeftCache.clear();
            } else {
              this._scheduledUpdatePositions();
            }
          }, _updateDummyInputsTimeout);
        }
      };
      DummyInputManagerCore = class {
        constructor(tabster, element, manager, priority, sys, outsideByDefault, callForDefaultAction) {
          this._wrappers = [];
          this._isOutside = false;
          this._transformElements = /* @__PURE__ */ new Set();
          this._onFocusIn = (dummyInput, isBackward, relatedTarget) => {
            this._onFocus(true, dummyInput, isBackward, relatedTarget);
          };
          this._onFocusOut = (dummyInput, isBackward, relatedTarget) => {
            this._onFocus(false, dummyInput, isBackward, relatedTarget);
          };
          this.moveOut = (backwards) => {
            var _a;
            const first = this._firstDummy;
            const last = this._lastDummy;
            if (first && last) {
              this._ensurePosition();
              const firstInput = first.input;
              const lastInput = last.input;
              const element2 = (_a = this._element) === null || _a === void 0 ? void 0 : _a.get();
              if (firstInput && lastInput && element2) {
                let toFocus;
                if (backwards) {
                  firstInput.tabIndex = 0;
                  toFocus = firstInput;
                } else {
                  lastInput.tabIndex = 0;
                  toFocus = lastInput;
                }
                if (toFocus) {
                  nativeFocus(toFocus);
                }
              }
            }
          };
          this.moveOutWithDefaultAction = (backwards, relatedEvent) => {
            var _a;
            const first = this._firstDummy;
            const last = this._lastDummy;
            if (first && last) {
              this._ensurePosition();
              const firstInput = first.input;
              const lastInput = last.input;
              const element2 = (_a = this._element) === null || _a === void 0 ? void 0 : _a.get();
              if (firstInput && lastInput && element2) {
                let toFocus;
                if (backwards) {
                  if (!first.isOutside && this._tabster.focusable.isFocusable(element2, true, true, true)) {
                    toFocus = element2;
                  } else {
                    first.useDefaultAction = true;
                    firstInput.tabIndex = 0;
                    toFocus = firstInput;
                  }
                } else {
                  last.useDefaultAction = true;
                  lastInput.tabIndex = 0;
                  toFocus = lastInput;
                }
                if (toFocus && element2.dispatchEvent(new TabsterMoveFocusEvent({
                  by: "root",
                  owner: element2,
                  next: null,
                  relatedEvent
                }))) {
                  nativeFocus(toFocus);
                }
              }
            }
          };
          this.setTabbable = (manager2, tabbable) => {
            var _a, _b;
            for (const w of this._wrappers) {
              if (w.manager === manager2) {
                w.tabbable = tabbable;
                break;
              }
            }
            const wrapper = this._getCurrent();
            if (wrapper) {
              const tabIndex = wrapper.tabbable ? 0 : -1;
              let input = (_a = this._firstDummy) === null || _a === void 0 ? void 0 : _a.input;
              if (input) {
                input.tabIndex = tabIndex;
              }
              input = (_b = this._lastDummy) === null || _b === void 0 ? void 0 : _b.input;
              if (input) {
                input.tabIndex = tabIndex;
              }
            }
            if (true) {
              this._firstDummy && setDummyInputDebugValue(this._firstDummy, this._wrappers);
              this._lastDummy && setDummyInputDebugValue(this._lastDummy, this._wrappers);
            }
          };
          this._addDummyInputs = () => {
            if (this._addTimer) {
              return;
            }
            this._addTimer = this._getWindow().setTimeout(() => {
              delete this._addTimer;
              this._ensurePosition();
              if (true) {
                this._firstDummy && setDummyInputDebugValue(this._firstDummy, this._wrappers);
                this._lastDummy && setDummyInputDebugValue(this._lastDummy, this._wrappers);
              }
              this._addTransformOffsets();
            }, 0);
          };
          this._addTransformOffsets = () => {
            this._tabster._dummyObserver.updatePositions(this._computeTransformOffsets);
          };
          this._computeTransformOffsets = (scrollTopLeftCache) => {
            var _a, _b;
            const from2 = ((_a = this._firstDummy) === null || _a === void 0 ? void 0 : _a.input) || ((_b = this._lastDummy) === null || _b === void 0 ? void 0 : _b.input);
            const transformElements = this._transformElements;
            const newTransformElements = /* @__PURE__ */ new Set();
            let scrollTop = 0;
            let scrollLeft = 0;
            const win = this._getWindow();
            for (let element2 = from2; element2 && element2.nodeType === Node.ELEMENT_NODE; element2 = dom.getParentElement(element2)) {
              let scrollTopLeft = scrollTopLeftCache.get(element2);
              if (scrollTopLeft === void 0) {
                const transform2 = win.getComputedStyle(element2).transform;
                if (transform2 && transform2 !== "none") {
                  scrollTopLeft = {
                    scrollTop: element2.scrollTop,
                    scrollLeft: element2.scrollLeft
                  };
                }
                scrollTopLeftCache.set(element2, scrollTopLeft || null);
              }
              if (scrollTopLeft) {
                newTransformElements.add(element2);
                if (!transformElements.has(element2)) {
                  element2.addEventListener("scroll", this._addTransformOffsets);
                }
                scrollTop += scrollTopLeft.scrollTop;
                scrollLeft += scrollTopLeft.scrollLeft;
              }
            }
            for (const el2 of transformElements) {
              if (!newTransformElements.has(el2)) {
                el2.removeEventListener("scroll", this._addTransformOffsets);
              }
            }
            this._transformElements = newTransformElements;
            return () => {
              var _a2, _b2;
              (_a2 = this._firstDummy) === null || _a2 === void 0 ? void 0 : _a2.setTopLeft(scrollTop, scrollLeft);
              (_b2 = this._lastDummy) === null || _b2 === void 0 ? void 0 : _b2.setTopLeft(scrollTop, scrollLeft);
            };
          };
          const el = element.get();
          if (!el) {
            throw new Error("No element");
          }
          this._tabster = tabster;
          this._getWindow = tabster.getWindow;
          this._callForDefaultAction = callForDefaultAction;
          const instance = el.__tabsterDummy;
          (instance || this)._wrappers.push({
            manager,
            priority,
            tabbable: true
          });
          if (instance) {
            if (true) {
              this._firstDummy && setDummyInputDebugValue(this._firstDummy, instance._wrappers);
              this._lastDummy && setDummyInputDebugValue(this._lastDummy, instance._wrappers);
            }
            return instance;
          }
          el.__tabsterDummy = this;
          const forcedDummyPosition = sys === null || sys === void 0 ? void 0 : sys.dummyInputsPosition;
          const tagName = el.tagName;
          this._isOutside = !forcedDummyPosition ? (outsideByDefault || tagName === "UL" || tagName === "OL" || tagName === "TABLE") && !(tagName === "LI" || tagName === "TD" || tagName === "TH") : forcedDummyPosition === SysDummyInputsPositions.Outside;
          this._firstDummy = new DummyInput(this._getWindow, this._isOutside, {
            isFirst: true
          }, element);
          this._lastDummy = new DummyInput(this._getWindow, this._isOutside, {
            isFirst: false
          }, element);
          const dummyElement = this._firstDummy.input;
          dummyElement && tabster._dummyObserver.add(dummyElement, this._addDummyInputs);
          this._firstDummy.onFocusIn = this._onFocusIn;
          this._firstDummy.onFocusOut = this._onFocusOut;
          this._lastDummy.onFocusIn = this._onFocusIn;
          this._lastDummy.onFocusOut = this._onFocusOut;
          this._element = element;
          this._addDummyInputs();
        }
        dispose(manager, force) {
          var _a, _b, _c, _d;
          const wrappers = this._wrappers = this._wrappers.filter((w) => w.manager !== manager && !force);
          if (true) {
            this._firstDummy && setDummyInputDebugValue(this._firstDummy, wrappers);
            this._lastDummy && setDummyInputDebugValue(this._lastDummy, wrappers);
          }
          if (wrappers.length === 0) {
            delete ((_a = this._element) === null || _a === void 0 ? void 0 : _a.get()).__tabsterDummy;
            for (const el of this._transformElements) {
              el.removeEventListener("scroll", this._addTransformOffsets);
            }
            this._transformElements.clear();
            const win = this._getWindow();
            if (this._addTimer) {
              win.clearTimeout(this._addTimer);
              delete this._addTimer;
            }
            const dummyElement = (_b = this._firstDummy) === null || _b === void 0 ? void 0 : _b.input;
            dummyElement && this._tabster._dummyObserver.remove(dummyElement);
            (_c = this._firstDummy) === null || _c === void 0 ? void 0 : _c.dispose();
            (_d = this._lastDummy) === null || _d === void 0 ? void 0 : _d.dispose();
          }
        }
        _onFocus(isIn, dummyInput, isBackward, relatedTarget) {
          var _a;
          const wrapper = this._getCurrent();
          if (wrapper && (!dummyInput.useDefaultAction || this._callForDefaultAction)) {
            (_a = wrapper.manager.getHandler(isIn)) === null || _a === void 0 ? void 0 : _a(dummyInput, isBackward, relatedTarget);
          }
        }
        _getCurrent() {
          this._wrappers.sort((a, b) => {
            if (a.tabbable !== b.tabbable) {
              return a.tabbable ? -1 : 1;
            }
            return a.priority - b.priority;
          });
          return this._wrappers[0];
        }
        _ensurePosition() {
          var _a, _b, _c;
          const element = (_a = this._element) === null || _a === void 0 ? void 0 : _a.get();
          const firstDummyInput = (_b = this._firstDummy) === null || _b === void 0 ? void 0 : _b.input;
          const lastDummyInput = (_c = this._lastDummy) === null || _c === void 0 ? void 0 : _c.input;
          if (!element || !firstDummyInput || !lastDummyInput) {
            return;
          }
          if (this._isOutside) {
            const elementParent = dom.getParentNode(element);
            if (elementParent) {
              const nextSibling = dom.getNextSibling(element);
              if (nextSibling !== lastDummyInput) {
                dom.insertBefore(elementParent, lastDummyInput, nextSibling);
              }
              if (dom.getPreviousElementSibling(element) !== firstDummyInput) {
                dom.insertBefore(elementParent, firstDummyInput, element);
              }
            }
          } else {
            if (dom.getLastElementChild(element) !== lastDummyInput) {
              dom.appendChild(element, lastDummyInput);
            }
            const firstElementChild = dom.getFirstElementChild(element);
            if (firstElementChild && firstElementChild !== firstDummyInput && firstElementChild.parentNode) {
              dom.insertBefore(firstElementChild.parentNode, firstDummyInput, firstElementChild);
            }
          }
        }
      };
      RootDummyManager = class extends DummyInputManager {
        constructor(tabster, element, setFocused, sys) {
          super(tabster, element, DummyInputManagerPriorities.Root, sys, void 0, true);
          this._onDummyInputFocus = (dummyInput) => {
            var _a;
            if (dummyInput.useDefaultAction) {
              this._setFocused(false);
            } else {
              this._tabster.keyboardNavigation.setNavigatingWithKeyboard(true);
              const element2 = this._element.get();
              if (element2) {
                this._setFocused(true);
                const toFocus = this._tabster.focusedElement.getFirstOrLastTabbable(dummyInput.isFirst, {
                  container: element2,
                  ignoreAccessibility: true
                });
                if (toFocus) {
                  nativeFocus(toFocus);
                  return;
                }
              }
              (_a = dummyInput.input) === null || _a === void 0 ? void 0 : _a.blur();
            }
          };
          this._setHandlers(this._onDummyInputFocus);
          this._tabster = tabster;
          this._setFocused = setFocused;
        }
      };
      Root = class extends TabsterPart {
        constructor(tabster, element, onDispose, props, sys) {
          super(tabster, element, props);
          this._isFocused = false;
          this._setFocused = (hasFocused) => {
            var _a;
            if (this._setFocusedTimer) {
              this._tabster.getWindow().clearTimeout(this._setFocusedTimer);
              delete this._setFocusedTimer;
            }
            if (this._isFocused === hasFocused) {
              return;
            }
            const element2 = this._element.get();
            if (element2) {
              if (hasFocused) {
                this._isFocused = true;
                (_a = this._dummyManager) === null || _a === void 0 ? void 0 : _a.setTabbable(false);
                element2.dispatchEvent(new RootFocusEvent({
                  element: element2
                }));
              } else {
                this._setFocusedTimer = this._tabster.getWindow().setTimeout(() => {
                  var _a2;
                  delete this._setFocusedTimer;
                  this._isFocused = false;
                  (_a2 = this._dummyManager) === null || _a2 === void 0 ? void 0 : _a2.setTabbable(true);
                  element2.dispatchEvent(new RootBlurEvent({
                    element: element2
                  }));
                }, 0);
              }
            }
          };
          this._onFocusIn = (event) => {
            const getParent2 = this._tabster.getParent;
            const rootElement = this._element.get();
            let curElement = event.composedPath()[0];
            do {
              if (curElement === rootElement) {
                this._setFocused(true);
                return;
              }
              curElement = curElement && getParent2(curElement);
            } while (curElement);
          };
          this._onFocusOut = () => {
            this._setFocused(false);
          };
          this._onDispose = onDispose;
          const win = tabster.getWindow;
          this.uid = getElementUId(win, element);
          this._sys = sys;
          if (tabster.controlTab || tabster.rootDummyInputs) {
            this.addDummyInputs();
          }
          const w = win();
          const doc = w.document;
          doc.addEventListener(KEYBORG_FOCUSIN, this._onFocusIn);
          doc.addEventListener(KEYBORG_FOCUSOUT, this._onFocusOut);
          this._add();
        }
        addDummyInputs() {
          if (!this._dummyManager) {
            this._dummyManager = new RootDummyManager(this._tabster, this._element, this._setFocused, this._sys);
          }
        }
        dispose() {
          var _a;
          this._onDispose(this);
          const win = this._tabster.getWindow();
          const doc = win.document;
          doc.removeEventListener(KEYBORG_FOCUSIN, this._onFocusIn);
          doc.removeEventListener(KEYBORG_FOCUSOUT, this._onFocusOut);
          if (this._setFocusedTimer) {
            win.clearTimeout(this._setFocusedTimer);
            delete this._setFocusedTimer;
          }
          (_a = this._dummyManager) === null || _a === void 0 ? void 0 : _a.dispose();
          this._remove();
        }
        moveOutWithDefaultAction(isBackward, relatedEvent) {
          const dummyManager = this._dummyManager;
          if (dummyManager) {
            dummyManager.moveOutWithDefaultAction(isBackward, relatedEvent);
          } else {
            const el = this.getElement();
            if (el) {
              RootDummyManager.moveWithPhantomDummy(this._tabster, el, true, isBackward, relatedEvent);
            }
          }
        }
        _add() {
          if (true) {
            _setInformativeStyle$3(this._element, false, this.uid);
          }
        }
        _remove() {
          if (true) {
            _setInformativeStyle$3(this._element, true);
          }
        }
      };
      RootAPI = class {
        constructor(tabster, autoRoot) {
          this._autoRootWaiting = false;
          this._roots = {};
          this._forceDummy = false;
          this.rootById = {};
          this._autoRootCreate = () => {
            var _a;
            const doc = this._win().document;
            const body = doc.body;
            if (body) {
              this._autoRootUnwait(doc);
              const props = this._autoRoot;
              if (props) {
                setTabsterAttribute(body, {
                  root: props
                }, true);
                updateTabsterByAttribute(this._tabster, body);
                return (_a = getTabsterOnElement(this._tabster, body)) === null || _a === void 0 ? void 0 : _a.root;
              }
            } else if (!this._autoRootWaiting) {
              this._autoRootWaiting = true;
              doc.addEventListener("readystatechange", this._autoRootCreate);
            }
            return void 0;
          };
          this._onRootDispose = (root) => {
            delete this._roots[root.id];
          };
          this._tabster = tabster;
          this._win = tabster.getWindow;
          this._autoRoot = autoRoot;
          tabster.queueInit(() => {
            if (this._autoRoot) {
              this._autoRootCreate();
            }
          });
        }
        _autoRootUnwait(doc) {
          doc.removeEventListener("readystatechange", this._autoRootCreate);
          this._autoRootWaiting = false;
        }
        dispose() {
          const win = this._win();
          this._autoRootUnwait(win.document);
          delete this._autoRoot;
          Object.keys(this._roots).forEach((rootId) => {
            if (this._roots[rootId]) {
              this._roots[rootId].dispose();
              delete this._roots[rootId];
            }
          });
          this.rootById = {};
        }
        createRoot(element, props, sys) {
          if (true) ;
          const newRoot = new Root(this._tabster, element, this._onRootDispose, props, sys);
          this._roots[newRoot.id] = newRoot;
          if (this._forceDummy) {
            newRoot.addDummyInputs();
          }
          return newRoot;
        }
        addDummyInputs() {
          this._forceDummy = true;
          const roots = this._roots;
          for (const id of Object.keys(roots)) {
            roots[id].addDummyInputs();
          }
        }
        static getRootByUId(getWindow, id) {
          const tabster = getWindow().__tabsterInstance;
          return tabster && tabster.root.rootById[id];
        }
        /**
         * Fetches the tabster context for an element walking up its ancestors
         *
         * @param tabster Tabster instance
         * @param element The element the tabster context should represent
         * @param options Additional options
         * @returns undefined if the element is not a child of a tabster root, otherwise all applicable tabster behaviours and configurations
         */
        static getTabsterContext(tabster, element, options) {
          if (options === void 0) {
            options = {};
          }
          var _a, _b, _c, _d;
          if (!element.ownerDocument) {
            return void 0;
          }
          const {
            checkRtl,
            referenceElement
          } = options;
          const getParent2 = tabster.getParent;
          tabster.drainInitQueue();
          let root;
          let modalizer;
          let groupper;
          let mover;
          let excludedFromMover = false;
          let groupperBeforeMover;
          let modalizerInGroupper;
          let dirRightToLeft;
          let uncontrolled;
          let curElement = referenceElement || element;
          const ignoreKeydown = {};
          while (curElement && (!root || checkRtl)) {
            const tabsterOnElement = getTabsterOnElement(tabster, curElement);
            if (checkRtl && dirRightToLeft === void 0) {
              const dir = curElement.dir;
              if (dir) {
                dirRightToLeft = dir.toLowerCase() === "rtl";
              }
            }
            if (!tabsterOnElement) {
              curElement = getParent2(curElement);
              continue;
            }
            const tagName = curElement.tagName;
            if ((tabsterOnElement.uncontrolled || tagName === "IFRAME" || tagName === "WEBVIEW") && tabster.focusable.isVisible(curElement)) {
              uncontrolled = curElement;
            }
            if (!mover && ((_a = tabsterOnElement.focusable) === null || _a === void 0 ? void 0 : _a.excludeFromMover) && !groupper) {
              excludedFromMover = true;
            }
            const curModalizer = tabsterOnElement.modalizer;
            const curGroupper = tabsterOnElement.groupper;
            const curMover = tabsterOnElement.mover;
            if (!modalizer && curModalizer) {
              modalizer = curModalizer;
            }
            if (!groupper && curGroupper && (!modalizer || curModalizer)) {
              if (modalizer) {
                if (!curGroupper.isActive() && curGroupper.getProps().tabbability && modalizer.userId !== ((_b = tabster.modalizer) === null || _b === void 0 ? void 0 : _b.activeId)) {
                  modalizer = void 0;
                  groupper = curGroupper;
                }
                modalizerInGroupper = curGroupper;
              } else {
                groupper = curGroupper;
              }
            }
            if (!mover && curMover && (!modalizer || curModalizer) && (!curGroupper || curElement !== element) && curElement.contains(element)) {
              mover = curMover;
              groupperBeforeMover = !!groupper && groupper !== curGroupper;
            }
            if (tabsterOnElement.root) {
              root = tabsterOnElement.root;
            }
            if ((_c = tabsterOnElement.focusable) === null || _c === void 0 ? void 0 : _c.ignoreKeydown) {
              Object.assign(ignoreKeydown, tabsterOnElement.focusable.ignoreKeydown);
            }
            curElement = getParent2(curElement);
          }
          if (!root) {
            const rootAPI = tabster.root;
            const autoRoot = rootAPI._autoRoot;
            if (autoRoot) {
              if ((_d = element.ownerDocument) === null || _d === void 0 ? void 0 : _d.body) {
                root = rootAPI._autoRootCreate();
              }
            }
          }
          if (groupper && !mover) {
            groupperBeforeMover = true;
          }
          if (!root) {
            if (modalizer || groupper || mover) {
              console.error("Tabster Root is required for Mover, Groupper and Modalizer to work.");
            }
          }
          const shouldIgnoreKeydown = (event) => !!ignoreKeydown[event.key];
          return root ? {
            root,
            modalizer,
            groupper,
            mover,
            groupperBeforeMover,
            modalizerInGroupper,
            rtl: checkRtl ? !!dirRightToLeft : void 0,
            uncontrolled,
            excludedFromMover,
            ignoreKeydown: shouldIgnoreKeydown
          } : void 0;
        }
        static getRoot(tabster, element) {
          var _a;
          const getParent2 = tabster.getParent;
          for (let el = element; el; el = getParent2(el)) {
            const root = (_a = getTabsterOnElement(tabster, el)) === null || _a === void 0 ? void 0 : _a.root;
            if (root) {
              return root;
            }
          }
          return void 0;
        }
        onRoot(root, removed) {
          if (removed) {
            delete this.rootById[root.uid];
          } else {
            this.rootById[root.uid] = root;
          }
        }
      };
      Subscribable = class {
        constructor() {
          this._callbacks = [];
        }
        dispose() {
          this._callbacks = [];
          delete this._val;
        }
        subscribe(callback) {
          const callbacks = this._callbacks;
          const index = callbacks.indexOf(callback);
          if (index < 0) {
            callbacks.push(callback);
          }
        }
        subscribeFirst(callback) {
          const callbacks = this._callbacks;
          const index = callbacks.indexOf(callback);
          if (index >= 0) {
            callbacks.splice(index, 1);
          }
          callbacks.unshift(callback);
        }
        unsubscribe(callback) {
          const index = this._callbacks.indexOf(callback);
          if (index >= 0) {
            this._callbacks.splice(index, 1);
          }
        }
        setVal(val, detail) {
          if (this._val === val) {
            return;
          }
          this._val = val;
          this._callCallbacks(val, detail);
        }
        getVal() {
          return this._val;
        }
        trigger(val, detail) {
          this._callCallbacks(val, detail);
        }
        _callCallbacks(val, detail) {
          this._callbacks.forEach((callback) => callback(val, detail));
        }
      };
      FocusableAPI = class {
        constructor(tabster) {
          this._tabster = tabster;
        }
        dispose() {
        }
        getProps(element) {
          const tabsterOnElement = getTabsterOnElement(this._tabster, element);
          return tabsterOnElement && tabsterOnElement.focusable || {};
        }
        isFocusable(el, includeProgrammaticallyFocusable, noVisibleCheck, noAccessibleCheck) {
          if (matchesSelector(el, FOCUSABLE_SELECTOR) && (includeProgrammaticallyFocusable || el.tabIndex !== -1)) {
            return (noVisibleCheck || this.isVisible(el)) && (noAccessibleCheck || this.isAccessible(el));
          }
          return false;
        }
        isVisible(el) {
          if (!el.ownerDocument || el.nodeType !== Node.ELEMENT_NODE) {
            return false;
          }
          if (isDisplayNone(el)) {
            return false;
          }
          const rect = el.ownerDocument.body.getBoundingClientRect();
          if (rect.width === 0 && rect.height === 0) {
            return false;
          }
          return true;
        }
        isAccessible(el) {
          var _a;
          for (let e = el; e; e = dom.getParentElement(e)) {
            const tabsterOnElement = getTabsterOnElement(this._tabster, e);
            if (this._isHidden(e)) {
              return false;
            }
            const ignoreDisabled = (_a = tabsterOnElement === null || tabsterOnElement === void 0 ? void 0 : tabsterOnElement.focusable) === null || _a === void 0 ? void 0 : _a.ignoreAriaDisabled;
            if (!ignoreDisabled && this._isDisabled(e)) {
              return false;
            }
          }
          return true;
        }
        _isDisabled(el) {
          return el.hasAttribute("disabled");
        }
        _isHidden(el) {
          var _a;
          const attrVal = el.getAttribute("aria-hidden");
          if (attrVal && attrVal.toLowerCase() === "true") {
            if (!((_a = this._tabster.modalizer) === null || _a === void 0 ? void 0 : _a.isAugmented(el))) {
              return true;
            }
          }
          return false;
        }
        findFirst(options, out) {
          return this.findElement({
            ...options
          }, out);
        }
        findLast(options, out) {
          return this.findElement({
            isBackward: true,
            ...options
          }, out);
        }
        findNext(options, out) {
          return this.findElement({
            ...options
          }, out);
        }
        findPrev(options, out) {
          return this.findElement({
            ...options,
            isBackward: true
          }, out);
        }
        findDefault(options, out) {
          return this.findElement({
            ...options,
            acceptCondition: (el) => this.isFocusable(el, options.includeProgrammaticallyFocusable) && !!this.getProps(el).isDefault
          }, out) || null;
        }
        findAll(options) {
          return this._findElements(true, options) || [];
        }
        findElement(options, out) {
          const found = this._findElements(false, options, out);
          return found ? found[0] : found;
        }
        _findElements(isFindAll, options, out) {
          var _a, _b, _c;
          const {
            container,
            currentElement = null,
            includeProgrammaticallyFocusable,
            useActiveModalizer,
            ignoreAccessibility,
            modalizerId,
            isBackward,
            onElement
          } = options;
          if (!out) {
            out = {};
          }
          const elements = [];
          let {
            acceptCondition
          } = options;
          const hasCustomCondition = !!acceptCondition;
          if (!container) {
            return null;
          }
          if (!acceptCondition) {
            acceptCondition = (el) => this.isFocusable(el, includeProgrammaticallyFocusable, false, ignoreAccessibility);
          }
          const acceptElementState = {
            container,
            modalizerUserId: modalizerId === void 0 && useActiveModalizer ? (_a = this._tabster.modalizer) === null || _a === void 0 ? void 0 : _a.activeId : modalizerId || ((_c = (_b = RootAPI.getTabsterContext(this._tabster, container)) === null || _b === void 0 ? void 0 : _b.modalizer) === null || _c === void 0 ? void 0 : _c.userId),
            from: currentElement || container,
            isBackward,
            isFindAll,
            acceptCondition,
            hasCustomCondition,
            includeProgrammaticallyFocusable,
            ignoreAccessibility,
            cachedGrouppers: {},
            cachedRadioGroups: {}
          };
          const walker = createElementTreeWalker(container.ownerDocument, container, (node2) => this._acceptElement(node2, acceptElementState));
          if (!walker) {
            return null;
          }
          const prepareForNextElement = (shouldContinueIfNotFound) => {
            var _a2, _b2;
            const foundElement = (_a2 = acceptElementState.foundElement) !== null && _a2 !== void 0 ? _a2 : acceptElementState.foundBackward;
            if (foundElement) {
              elements.push(foundElement);
            }
            if (isFindAll) {
              if (foundElement) {
                acceptElementState.found = false;
                delete acceptElementState.foundElement;
                delete acceptElementState.foundBackward;
                delete acceptElementState.fromCtx;
                acceptElementState.from = foundElement;
                if (onElement && !onElement(foundElement)) {
                  return false;
                }
              }
              return !!(foundElement || shouldContinueIfNotFound);
            } else {
              if (foundElement && out) {
                out.uncontrolled = (_b2 = RootAPI.getTabsterContext(this._tabster, foundElement)) === null || _b2 === void 0 ? void 0 : _b2.uncontrolled;
              }
              return !!(shouldContinueIfNotFound && !foundElement);
            }
          };
          if (!currentElement) {
            out.outOfDOMOrder = true;
          }
          if (currentElement && dom.nodeContains(container, currentElement)) {
            walker.currentNode = currentElement;
          } else if (isBackward) {
            const lastChild = getLastChild$2(container);
            if (!lastChild) {
              return null;
            }
            if (this._acceptElement(lastChild, acceptElementState) === NodeFilter.FILTER_ACCEPT && !prepareForNextElement(true)) {
              if (acceptElementState.skippedFocusable) {
                out.outOfDOMOrder = true;
              }
              return elements;
            }
            walker.currentNode = lastChild;
          }
          do {
            if (isBackward) {
              walker.previousNode();
            } else {
              walker.nextNode();
            }
          } while (prepareForNextElement());
          if (acceptElementState.skippedFocusable) {
            out.outOfDOMOrder = true;
          }
          return elements.length ? elements : null;
        }
        _acceptElement(element, state) {
          var _a, _b, _c;
          if (state.found) {
            return NodeFilter.FILTER_ACCEPT;
          }
          const foundBackward = state.foundBackward;
          if (foundBackward && (element === foundBackward || !dom.nodeContains(foundBackward, element))) {
            state.found = true;
            state.foundElement = foundBackward;
            return NodeFilter.FILTER_ACCEPT;
          }
          const container = state.container;
          if (element === container) {
            return NodeFilter.FILTER_SKIP;
          }
          if (!dom.nodeContains(container, element)) {
            return NodeFilter.FILTER_REJECT;
          }
          if (getDummyInputContainer(element)) {
            return NodeFilter.FILTER_REJECT;
          }
          if (dom.nodeContains(state.rejectElementsFrom, element)) {
            return NodeFilter.FILTER_REJECT;
          }
          const ctx = state.currentCtx = RootAPI.getTabsterContext(this._tabster, element);
          if (!ctx) {
            return NodeFilter.FILTER_SKIP;
          }
          if (shouldIgnoreFocus(element)) {
            if (this.isFocusable(element, void 0, true, true)) {
              state.skippedFocusable = true;
            }
            return NodeFilter.FILTER_SKIP;
          }
          if (!state.hasCustomCondition && (element.tagName === "IFRAME" || element.tagName === "WEBVIEW")) {
            if (this.isVisible(element) && ((_a = ctx.modalizer) === null || _a === void 0 ? void 0 : _a.userId) === ((_b = this._tabster.modalizer) === null || _b === void 0 ? void 0 : _b.activeId)) {
              state.found = true;
              state.rejectElementsFrom = state.foundElement = element;
              return NodeFilter.FILTER_ACCEPT;
            } else {
              return NodeFilter.FILTER_REJECT;
            }
          }
          if (!state.ignoreAccessibility && !this.isAccessible(element)) {
            if (this.isFocusable(element, false, true, true)) {
              state.skippedFocusable = true;
            }
            return NodeFilter.FILTER_REJECT;
          }
          let result;
          let fromCtx = state.fromCtx;
          if (!fromCtx) {
            fromCtx = state.fromCtx = RootAPI.getTabsterContext(this._tabster, state.from);
          }
          const fromMover = fromCtx === null || fromCtx === void 0 ? void 0 : fromCtx.mover;
          let groupper = ctx.groupper;
          let mover = ctx.mover;
          result = (_c = this._tabster.modalizer) === null || _c === void 0 ? void 0 : _c.acceptElement(element, state);
          if (result !== void 0) {
            state.skippedFocusable = true;
          }
          if (result === void 0 && (groupper || mover || fromMover)) {
            const groupperElement = groupper === null || groupper === void 0 ? void 0 : groupper.getElement();
            const fromMoverElement = fromMover === null || fromMover === void 0 ? void 0 : fromMover.getElement();
            let moverElement = mover === null || mover === void 0 ? void 0 : mover.getElement();
            if (moverElement && dom.nodeContains(fromMoverElement, moverElement) && dom.nodeContains(container, fromMoverElement) && (!groupperElement || !mover || dom.nodeContains(fromMoverElement, groupperElement))) {
              mover = fromMover;
              moverElement = fromMoverElement;
            }
            if (groupperElement) {
              if (groupperElement === container || !dom.nodeContains(container, groupperElement)) {
                groupper = void 0;
              } else if (!dom.nodeContains(groupperElement, element)) {
                return NodeFilter.FILTER_REJECT;
              }
            }
            if (moverElement) {
              if (!dom.nodeContains(container, moverElement)) {
                mover = void 0;
              } else if (!dom.nodeContains(moverElement, element)) {
                return NodeFilter.FILTER_REJECT;
              }
            }
            if (groupper && mover) {
              if (moverElement && groupperElement && !dom.nodeContains(groupperElement, moverElement)) {
                mover = void 0;
              } else {
                groupper = void 0;
              }
            }
            if (groupper) {
              result = groupper.acceptElement(element, state);
            }
            if (mover) {
              result = mover.acceptElement(element, state);
            }
          }
          if (result === void 0) {
            result = state.acceptCondition(element) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
            if (result === NodeFilter.FILTER_SKIP && this.isFocusable(element, false, true, true)) {
              state.skippedFocusable = true;
            }
          }
          if (result === NodeFilter.FILTER_ACCEPT && !state.found) {
            if (!state.isFindAll && isRadio(element) && !element.checked) {
              const radioGroupName = element.name;
              let radioGroup = state.cachedRadioGroups[radioGroupName];
              if (!radioGroup) {
                radioGroup = getRadioButtonGroup(element);
                if (radioGroup) {
                  state.cachedRadioGroups[radioGroupName] = radioGroup;
                }
              }
              if ((radioGroup === null || radioGroup === void 0 ? void 0 : radioGroup.checked) && radioGroup.checked !== element) {
                return NodeFilter.FILTER_SKIP;
              }
            }
            if (state.isBackward) {
              state.foundBackward = element;
              result = NodeFilter.FILTER_SKIP;
            } else {
              state.found = true;
              state.foundElement = element;
            }
          }
          return result;
        }
      };
      Keys = {
        Tab: "Tab",
        Enter: "Enter",
        Escape: "Escape",
        Space: " ",
        PageUp: "PageUp",
        PageDown: "PageDown",
        End: "End",
        Home: "Home",
        ArrowLeft: "ArrowLeft",
        ArrowUp: "ArrowUp",
        ArrowRight: "ArrowRight",
        ArrowDown: "ArrowDown"
      };
      AsyncFocusIntentPriorityBySource = {
        [AsyncFocusSources.Restorer]: 0,
        [AsyncFocusSources.Deloser]: 1,
        [AsyncFocusSources.EscapeGroupper]: 2
      };
      FocusedElementState = class _FocusedElementState extends Subscribable {
        constructor(tabster, getWindow) {
          super();
          this._init = () => {
            const win = this._win();
            const doc = win.document;
            doc.addEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);
            doc.addEventListener(KEYBORG_FOCUSOUT, this._onFocusOut, true);
            win.addEventListener("keydown", this._onKeyDown, true);
            const activeElement = dom.getActiveElement(doc);
            if (activeElement && activeElement !== doc.body) {
              this._setFocusedElement(activeElement);
            }
            this.subscribe(this._onChanged);
          };
          this._onFocusIn = (e) => {
            const target = e.composedPath()[0];
            if (target) {
              this._setFocusedElement(target, e.detail.relatedTarget, e.detail.isFocusedProgrammatically);
            }
          };
          this._onFocusOut = (e) => {
            var _a;
            this._setFocusedElement(void 0, (_a = e.detail) === null || _a === void 0 ? void 0 : _a.originalEvent.relatedTarget);
          };
          this._validateFocusedElement = (element) => {
          };
          this._onKeyDown = (event) => {
            if (event.key !== Keys.Tab || event.ctrlKey) {
              return;
            }
            const currentElement = this.getVal();
            if (!currentElement || !currentElement.ownerDocument || currentElement.contentEditable === "true") {
              return;
            }
            const tabster2 = this._tabster;
            const controlTab = tabster2.controlTab;
            const ctx = RootAPI.getTabsterContext(tabster2, currentElement);
            if (!ctx || ctx.ignoreKeydown(event)) {
              return;
            }
            const isBackward = event.shiftKey;
            const next2 = _FocusedElementState.findNextTabbable(tabster2, ctx, void 0, currentElement, void 0, isBackward, true);
            const rootElement = ctx.root.getElement();
            if (!rootElement) {
              return;
            }
            const nextElement = next2 === null || next2 === void 0 ? void 0 : next2.element;
            const uncontrolledCompletelyContainer = getUncontrolledCompletelyContainer(tabster2, currentElement);
            if (nextElement) {
              const nextUncontrolled = next2.uncontrolled;
              if (ctx.uncontrolled || dom.nodeContains(nextUncontrolled, currentElement)) {
                if (!next2.outOfDOMOrder && nextUncontrolled === ctx.uncontrolled || uncontrolledCompletelyContainer && !dom.nodeContains(uncontrolledCompletelyContainer, nextElement)) {
                  return;
                }
                DummyInputManager.addPhantomDummyWithTarget(tabster2, currentElement, isBackward, nextElement);
                return;
              }
              if (nextUncontrolled && tabster2.focusable.isVisible(nextUncontrolled) || nextElement.tagName === "IFRAME" && tabster2.focusable.isVisible(nextElement)) {
                if (rootElement.dispatchEvent(new TabsterMoveFocusEvent({
                  by: "root",
                  owner: rootElement,
                  next: nextElement,
                  relatedEvent: event
                }))) {
                  DummyInputManager.moveWithPhantomDummy(tabster2, nextUncontrolled !== null && nextUncontrolled !== void 0 ? nextUncontrolled : nextElement, false, isBackward, event);
                }
                return;
              }
              if (controlTab || (next2 === null || next2 === void 0 ? void 0 : next2.outOfDOMOrder)) {
                if (rootElement.dispatchEvent(new TabsterMoveFocusEvent({
                  by: "root",
                  owner: rootElement,
                  next: nextElement,
                  relatedEvent: event
                }))) {
                  event.preventDefault();
                  event.stopImmediatePropagation();
                  nativeFocus(nextElement);
                }
              }
            } else {
              if (!uncontrolledCompletelyContainer && rootElement.dispatchEvent(new TabsterMoveFocusEvent({
                by: "root",
                owner: rootElement,
                next: null,
                relatedEvent: event
              }))) {
                ctx.root.moveOutWithDefaultAction(isBackward, event);
              }
            }
          };
          this._onChanged = (element, detail) => {
            var _a, _b;
            if (element) {
              element.dispatchEvent(new TabsterFocusInEvent(detail));
            } else {
              const last = (_a = this._lastVal) === null || _a === void 0 ? void 0 : _a.get();
              if (last) {
                const d = {
                  ...detail
                };
                const lastCtx = RootAPI.getTabsterContext(this._tabster, last);
                const modalizerId = (_b = lastCtx === null || lastCtx === void 0 ? void 0 : lastCtx.modalizer) === null || _b === void 0 ? void 0 : _b.userId;
                if (modalizerId) {
                  d.modalizerId = modalizerId;
                }
                last.dispatchEvent(new TabsterFocusOutEvent(d));
              }
            }
          };
          this._tabster = tabster;
          this._win = getWindow;
          tabster.queueInit(this._init);
        }
        dispose() {
          super.dispose();
          const win = this._win();
          const doc = win.document;
          doc.removeEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);
          doc.removeEventListener(KEYBORG_FOCUSOUT, this._onFocusOut, true);
          win.removeEventListener("keydown", this._onKeyDown, true);
          this.unsubscribe(this._onChanged);
          const asyncFocus = this._asyncFocus;
          if (asyncFocus) {
            win.clearTimeout(asyncFocus.timeout);
            delete this._asyncFocus;
          }
          delete _FocusedElementState._lastResetElement;
          delete this._nextVal;
          delete this._lastVal;
        }
        static forgetMemorized(instance, parent) {
          var _a, _b;
          let wel = _FocusedElementState._lastResetElement;
          let el = wel && wel.get();
          if (el && dom.nodeContains(parent, el)) {
            delete _FocusedElementState._lastResetElement;
          }
          el = (_b = (_a = instance._nextVal) === null || _a === void 0 ? void 0 : _a.element) === null || _b === void 0 ? void 0 : _b.get();
          if (el && dom.nodeContains(parent, el)) {
            delete instance._nextVal;
          }
          wel = instance._lastVal;
          el = wel && wel.get();
          if (el && dom.nodeContains(parent, el)) {
            delete instance._lastVal;
          }
        }
        getFocusedElement() {
          return this.getVal();
        }
        getLastFocusedElement() {
          var _a;
          let el = (_a = this._lastVal) === null || _a === void 0 ? void 0 : _a.get();
          if (!el || el && !documentContains(el.ownerDocument, el)) {
            this._lastVal = el = void 0;
          }
          return el;
        }
        focus(element, noFocusedProgrammaticallyFlag, noAccessibleCheck, preventScroll) {
          if (!this._tabster.focusable.isFocusable(element, noFocusedProgrammaticallyFlag, false, noAccessibleCheck)) {
            return false;
          }
          element.focus({
            preventScroll
          });
          return true;
        }
        focusDefault(container) {
          const el = this._tabster.focusable.findDefault({
            container
          });
          if (el) {
            this._tabster.focusedElement.focus(el);
            return true;
          }
          return false;
        }
        getFirstOrLastTabbable(isFirst, props) {
          var _a;
          const {
            container,
            ignoreAccessibility
          } = props;
          let toFocus;
          if (container) {
            const ctx = RootAPI.getTabsterContext(this._tabster, container);
            if (ctx) {
              toFocus = (_a = _FocusedElementState.findNextTabbable(this._tabster, ctx, container, void 0, void 0, !isFirst, ignoreAccessibility)) === null || _a === void 0 ? void 0 : _a.element;
            }
          }
          if (toFocus && !dom.nodeContains(container, toFocus)) {
            toFocus = void 0;
          }
          return toFocus || void 0;
        }
        _focusFirstOrLast(isFirst, props) {
          const toFocus = this.getFirstOrLastTabbable(isFirst, props);
          if (toFocus) {
            this.focus(toFocus, false, true);
            return true;
          }
          return false;
        }
        focusFirst(props) {
          return this._focusFirstOrLast(true, props);
        }
        focusLast(props) {
          return this._focusFirstOrLast(false, props);
        }
        resetFocus(container) {
          if (!this._tabster.focusable.isVisible(container)) {
            return false;
          }
          if (!this._tabster.focusable.isFocusable(container, true, true, true)) {
            const prevTabIndex = container.getAttribute("tabindex");
            const prevAriaHidden = container.getAttribute("aria-hidden");
            container.tabIndex = -1;
            container.setAttribute("aria-hidden", "true");
            _FocusedElementState._lastResetElement = new WeakHTMLElement(this._win, container);
            this.focus(container, true, true);
            this._setOrRemoveAttribute(container, "tabindex", prevTabIndex);
            this._setOrRemoveAttribute(container, "aria-hidden", prevAriaHidden);
          } else {
            this.focus(container);
          }
          return true;
        }
        requestAsyncFocus(source, callback, delay) {
          const win = this._tabster.getWindow();
          const currentAsyncFocus = this._asyncFocus;
          if (currentAsyncFocus) {
            if (AsyncFocusIntentPriorityBySource[source] > AsyncFocusIntentPriorityBySource[currentAsyncFocus.source]) {
              return;
            }
            win.clearTimeout(currentAsyncFocus.timeout);
          }
          this._asyncFocus = {
            source,
            callback,
            timeout: win.setTimeout(() => {
              this._asyncFocus = void 0;
              callback();
            }, delay)
          };
        }
        cancelAsyncFocus(source) {
          const asyncFocus = this._asyncFocus;
          if ((asyncFocus === null || asyncFocus === void 0 ? void 0 : asyncFocus.source) === source) {
            this._tabster.getWindow().clearTimeout(asyncFocus.timeout);
            this._asyncFocus = void 0;
          }
        }
        _setOrRemoveAttribute(element, name, value) {
          if (value === null) {
            element.removeAttribute(name);
          } else {
            element.setAttribute(name, value);
          }
        }
        _setFocusedElement(element, relatedTarget, isFocusedProgrammatically) {
          var _a, _b;
          if (this._tabster._noop) {
            return;
          }
          const detail = {
            relatedTarget
          };
          if (element) {
            const lastResetElement = (_a = _FocusedElementState._lastResetElement) === null || _a === void 0 ? void 0 : _a.get();
            _FocusedElementState._lastResetElement = void 0;
            if (lastResetElement === element || shouldIgnoreFocus(element)) {
              return;
            }
            detail.isFocusedProgrammatically = isFocusedProgrammatically;
            const ctx = RootAPI.getTabsterContext(this._tabster, element);
            const modalizerId = (_b = ctx === null || ctx === void 0 ? void 0 : ctx.modalizer) === null || _b === void 0 ? void 0 : _b.userId;
            if (modalizerId) {
              detail.modalizerId = modalizerId;
            }
          }
          const nextVal = this._nextVal = {
            element: element ? new WeakHTMLElement(this._win, element) : void 0,
            detail
          };
          if (element && element !== this._val) {
            this._validateFocusedElement(element);
          }
          if (this._nextVal === nextVal) {
            this.setVal(element, detail);
          }
          this._nextVal = void 0;
        }
        setVal(val, detail) {
          super.setVal(val, detail);
          if (val) {
            this._lastVal = new WeakHTMLElement(this._win, val);
          }
        }
        static findNextTabbable(tabster, ctx, container, currentElement, referenceElement, isBackward, ignoreAccessibility) {
          const actualContainer = container || ctx.root.getElement();
          if (!actualContainer) {
            return null;
          }
          let next2 = null;
          const isTabbingTimer = _FocusedElementState._isTabbingTimer;
          const win = tabster.getWindow();
          if (isTabbingTimer) {
            win.clearTimeout(isTabbingTimer);
          }
          _FocusedElementState.isTabbing = true;
          _FocusedElementState._isTabbingTimer = win.setTimeout(() => {
            delete _FocusedElementState._isTabbingTimer;
            _FocusedElementState.isTabbing = false;
          }, 0);
          const modalizer = ctx.modalizer;
          const groupper = ctx.groupper;
          const mover = ctx.mover;
          const callFindNext = (what) => {
            next2 = what.findNextTabbable(currentElement, referenceElement, isBackward, ignoreAccessibility);
            if (currentElement && !(next2 === null || next2 === void 0 ? void 0 : next2.element)) {
              const parentElement = what !== modalizer && dom.getParentElement(what.getElement());
              if (parentElement) {
                const parentCtx = RootAPI.getTabsterContext(tabster, currentElement, {
                  referenceElement: parentElement
                });
                if (parentCtx) {
                  const currentScopeElement = what.getElement();
                  const newCurrent = isBackward ? currentScopeElement : currentScopeElement && getLastChild$2(currentScopeElement) || currentScopeElement;
                  if (newCurrent) {
                    next2 = _FocusedElementState.findNextTabbable(tabster, parentCtx, container, newCurrent, parentElement, isBackward, ignoreAccessibility);
                    if (next2) {
                      next2.outOfDOMOrder = true;
                    }
                  }
                }
              }
            }
          };
          if (groupper && mover) {
            callFindNext(ctx.groupperBeforeMover ? groupper : mover);
          } else if (groupper) {
            callFindNext(groupper);
          } else if (mover) {
            callFindNext(mover);
          } else if (modalizer) {
            callFindNext(modalizer);
          } else {
            const findProps = {
              container: actualContainer,
              currentElement,
              referenceElement,
              ignoreAccessibility,
              useActiveModalizer: true
            };
            const findPropsOut = {};
            const nextElement = tabster.focusable[isBackward ? "findPrev" : "findNext"](findProps, findPropsOut);
            next2 = {
              element: nextElement,
              outOfDOMOrder: findPropsOut.outOfDOMOrder,
              uncontrolled: findPropsOut.uncontrolled
            };
          }
          return next2;
        }
      };
      FocusedElementState.isTabbing = false;
      KeyboardNavigationState = class extends Subscribable {
        constructor(getWindow) {
          super();
          this._onChange = (isNavigatingWithKeyboard) => {
            this.setVal(isNavigatingWithKeyboard, void 0);
          };
          this._keyborg = createKeyborg(getWindow());
          this._keyborg.subscribe(this._onChange);
        }
        dispose() {
          super.dispose();
          if (this._keyborg) {
            this._keyborg.unsubscribe(this._onChange);
            disposeKeyborg(this._keyborg);
            delete this._keyborg;
          }
        }
        setNavigatingWithKeyboard(isNavigatingWithKeyboard) {
          var _a;
          (_a = this._keyborg) === null || _a === void 0 ? void 0 : _a.setVal(isNavigatingWithKeyboard);
        }
        isNavigatingWithKeyboard() {
          var _a;
          return !!((_a = this._keyborg) === null || _a === void 0 ? void 0 : _a.isNavigatingWithKeyboard());
        }
      };
      _inputSelector = /* @__PURE__ */ ["input", "textarea", "*[contenteditable]"].join(", ");
      MoverDummyManager = class extends DummyInputManager {
        constructor(element, tabster, getMemorized, sys) {
          super(tabster, element, DummyInputManagerPriorities.Mover, sys);
          this._onFocusDummyInput = (dummyInput) => {
            var _a, _b;
            const container = this._element.get();
            const input = dummyInput.input;
            if (container && input) {
              const ctx = RootAPI.getTabsterContext(this._tabster, container);
              let toFocus;
              if (ctx) {
                toFocus = (_a = FocusedElementState.findNextTabbable(this._tabster, ctx, void 0, input, void 0, !dummyInput.isFirst, true)) === null || _a === void 0 ? void 0 : _a.element;
              }
              const memorized = (_b = this._getMemorized()) === null || _b === void 0 ? void 0 : _b.get();
              if (memorized && this._tabster.focusable.isFocusable(memorized)) {
                toFocus = memorized;
              }
              if (toFocus) {
                nativeFocus(toFocus);
              }
            }
          };
          this._tabster = tabster;
          this._getMemorized = getMemorized;
          this._setHandlers(this._onFocusDummyInput);
        }
      };
      _moverUpdateAdd = 1;
      _moverUpdateAttr = 2;
      _moverUpdateRemove = 3;
      Mover = class extends TabsterPart {
        constructor(tabster, element, onDispose, props, sys) {
          var _a;
          super(tabster, element, props);
          this._visible = {};
          this._onIntersection = (entries) => {
            for (const entry of entries) {
              const el = entry.target;
              const id = getElementUId(this._win, el);
              let newVisibility;
              let fullyVisible = this._fullyVisible;
              if (entry.intersectionRatio >= 0.25) {
                newVisibility = entry.intersectionRatio >= 0.75 ? Visibilities.Visible : Visibilities.PartiallyVisible;
                if (newVisibility === Visibilities.Visible) {
                  fullyVisible = id;
                }
              } else {
                newVisibility = Visibilities.Invisible;
              }
              if (this._visible[id] !== newVisibility) {
                if (newVisibility === void 0) {
                  delete this._visible[id];
                  if (fullyVisible === id) {
                    delete this._fullyVisible;
                  }
                } else {
                  this._visible[id] = newVisibility;
                  this._fullyVisible = fullyVisible;
                }
                const state = this.getState(el);
                if (state) {
                  el.dispatchEvent(new MoverStateEvent(state));
                }
              }
            }
          };
          this._win = tabster.getWindow;
          this.visibilityTolerance = (_a = props.visibilityTolerance) !== null && _a !== void 0 ? _a : 0.8;
          if (this._props.trackState || this._props.visibilityAware) {
            this._intersectionObserver = new IntersectionObserver(this._onIntersection, {
              threshold: [0, 0.25, 0.5, 0.75, 1]
            });
            this._observeState();
          }
          this._onDispose = onDispose;
          const getMemorized = () => props.memorizeCurrent ? this._current : void 0;
          if (!tabster.controlTab) {
            this.dummyManager = new MoverDummyManager(this._element, tabster, getMemorized, sys);
          }
        }
        dispose() {
          var _a;
          this._onDispose(this);
          if (this._intersectionObserver) {
            this._intersectionObserver.disconnect();
            delete this._intersectionObserver;
          }
          delete this._current;
          delete this._fullyVisible;
          delete this._allElements;
          delete this._updateQueue;
          if (this._unobserve) {
            this._unobserve();
            delete this._unobserve;
          }
          const win = this._win();
          if (this._setCurrentTimer) {
            win.clearTimeout(this._setCurrentTimer);
            delete this._setCurrentTimer;
          }
          if (this._updateTimer) {
            win.clearTimeout(this._updateTimer);
            delete this._updateTimer;
          }
          (_a = this.dummyManager) === null || _a === void 0 ? void 0 : _a.dispose();
          delete this.dummyManager;
        }
        setCurrent(element) {
          if (element) {
            this._current = new WeakHTMLElement(this._win, element);
          } else {
            this._current = void 0;
          }
          if ((this._props.trackState || this._props.visibilityAware) && !this._setCurrentTimer) {
            this._setCurrentTimer = this._win().setTimeout(() => {
              var _a;
              delete this._setCurrentTimer;
              const changed = [];
              if (this._current !== this._prevCurrent) {
                changed.push(this._current);
                changed.push(this._prevCurrent);
                this._prevCurrent = this._current;
              }
              for (const weak of changed) {
                const el = weak === null || weak === void 0 ? void 0 : weak.get();
                if (el && ((_a = this._allElements) === null || _a === void 0 ? void 0 : _a.get(el)) === this) {
                  const props = this._props;
                  if (el && (props.visibilityAware !== void 0 || props.trackState)) {
                    const state = this.getState(el);
                    if (state) {
                      el.dispatchEvent(new MoverStateEvent(state));
                    }
                  }
                }
              }
            });
          }
        }
        getCurrent() {
          var _a;
          return ((_a = this._current) === null || _a === void 0 ? void 0 : _a.get()) || null;
        }
        findNextTabbable(currentElement, referenceElement, isBackward, ignoreAccessibility) {
          const container = this.getElement();
          const currentIsDummy = container && getDummyInputContainer(currentElement) === container;
          if (!container) {
            return null;
          }
          let next2 = null;
          let outOfDOMOrder = false;
          let uncontrolled;
          if (this._props.tabbable || currentIsDummy || currentElement && !dom.nodeContains(container, currentElement)) {
            const findProps = {
              currentElement,
              referenceElement,
              container,
              ignoreAccessibility,
              useActiveModalizer: true
            };
            const findPropsOut = {};
            next2 = this._tabster.focusable[isBackward ? "findPrev" : "findNext"](findProps, findPropsOut);
            outOfDOMOrder = !!findPropsOut.outOfDOMOrder;
            uncontrolled = findPropsOut.uncontrolled;
          }
          return {
            element: next2,
            uncontrolled,
            outOfDOMOrder
          };
        }
        acceptElement(element, state) {
          var _a, _b;
          if (!FocusedElementState.isTabbing) {
            return ((_a = state.currentCtx) === null || _a === void 0 ? void 0 : _a.excludedFromMover) ? NodeFilter.FILTER_REJECT : void 0;
          }
          const {
            memorizeCurrent,
            visibilityAware,
            hasDefault = true
          } = this._props;
          const moverElement = this.getElement();
          if (moverElement && (memorizeCurrent || visibilityAware || hasDefault) && (!dom.nodeContains(moverElement, state.from) || getDummyInputContainer(state.from) === moverElement)) {
            let found;
            if (memorizeCurrent) {
              const current = (_b = this._current) === null || _b === void 0 ? void 0 : _b.get();
              if (current && state.acceptCondition(current)) {
                found = current;
              }
            }
            if (!found && hasDefault) {
              found = this._tabster.focusable.findDefault({
                container: moverElement,
                useActiveModalizer: true
              });
            }
            if (!found && visibilityAware) {
              found = this._tabster.focusable.findElement({
                container: moverElement,
                useActiveModalizer: true,
                isBackward: state.isBackward,
                acceptCondition: (el) => {
                  var _a2;
                  const id = getElementUId(this._win, el);
                  const visibility = this._visible[id];
                  return moverElement !== el && !!((_a2 = this._allElements) === null || _a2 === void 0 ? void 0 : _a2.get(el)) && state.acceptCondition(el) && (visibility === Visibilities.Visible || visibility === Visibilities.PartiallyVisible && (visibilityAware === Visibilities.PartiallyVisible || !this._fullyVisible));
                }
              });
            }
            if (found) {
              state.found = true;
              state.foundElement = found;
              state.rejectElementsFrom = moverElement;
              state.skippedFocusable = true;
              return NodeFilter.FILTER_ACCEPT;
            }
          }
          return void 0;
        }
        _observeState() {
          const element = this.getElement();
          if (this._unobserve || !element || typeof MutationObserver === "undefined") {
            return;
          }
          const win = this._win();
          const allElements = this._allElements = /* @__PURE__ */ new WeakMap();
          const tabsterFocusable = this._tabster.focusable;
          let updateQueue = this._updateQueue = [];
          const observer = dom.createMutationObserver((mutations) => {
            for (const mutation of mutations) {
              const target = mutation.target;
              const removed = mutation.removedNodes;
              const added = mutation.addedNodes;
              if (mutation.type === "attributes") {
                if (mutation.attributeName === "tabindex") {
                  updateQueue.push({
                    element: target,
                    type: _moverUpdateAttr
                  });
                }
              } else {
                for (let i = 0; i < removed.length; i++) {
                  updateQueue.push({
                    element: removed[i],
                    type: _moverUpdateRemove
                  });
                }
                for (let i = 0; i < added.length; i++) {
                  updateQueue.push({
                    element: added[i],
                    type: _moverUpdateAdd
                  });
                }
              }
            }
            requestUpdate();
          });
          const setElement = (element2, remove) => {
            var _a, _b;
            const current = allElements.get(element2);
            if (current && remove) {
              (_a = this._intersectionObserver) === null || _a === void 0 ? void 0 : _a.unobserve(element2);
              allElements.delete(element2);
            }
            if (!current && !remove) {
              allElements.set(element2, this);
              (_b = this._intersectionObserver) === null || _b === void 0 ? void 0 : _b.observe(element2);
            }
          };
          const updateElement = (element2) => {
            const isFocusable = tabsterFocusable.isFocusable(element2);
            const current = allElements.get(element2);
            if (current) {
              if (!isFocusable) {
                setElement(element2, true);
              }
            } else {
              if (isFocusable) {
                setElement(element2);
              }
            }
          };
          const addNewElements = (element2) => {
            const {
              mover
            } = getMoverGroupper(element2);
            if (mover && mover !== this) {
              if (mover.getElement() === element2 && tabsterFocusable.isFocusable(element2)) {
                setElement(element2);
              } else {
                return;
              }
            }
            const walker = createElementTreeWalker(win.document, element2, (node2) => {
              const {
                mover: mover2,
                groupper
              } = getMoverGroupper(node2);
              if (mover2 && mover2 !== this) {
                return NodeFilter.FILTER_REJECT;
              }
              const groupperFirstFocusable = groupper === null || groupper === void 0 ? void 0 : groupper.getFirst(true);
              if (groupper && groupper.getElement() !== node2 && groupperFirstFocusable && groupperFirstFocusable !== node2) {
                return NodeFilter.FILTER_REJECT;
              }
              if (tabsterFocusable.isFocusable(node2)) {
                setElement(node2);
              }
              return NodeFilter.FILTER_SKIP;
            });
            if (walker) {
              walker.currentNode = element2;
              while (walker.nextNode()) {
              }
            }
          };
          const removeWalk = (element2) => {
            const current = allElements.get(element2);
            if (current) {
              setElement(element2, true);
            }
            for (let el = dom.getFirstElementChild(element2); el; el = dom.getNextElementSibling(el)) {
              removeWalk(el);
            }
          };
          const requestUpdate = () => {
            if (!this._updateTimer && updateQueue.length) {
              this._updateTimer = win.setTimeout(() => {
                delete this._updateTimer;
                for (const {
                  element: element2,
                  type
                } of updateQueue) {
                  switch (type) {
                    case _moverUpdateAttr:
                      updateElement(element2);
                      break;
                    case _moverUpdateAdd:
                      addNewElements(element2);
                      break;
                    case _moverUpdateRemove:
                      removeWalk(element2);
                      break;
                  }
                }
                updateQueue = this._updateQueue = [];
              }, 0);
            }
          };
          const getMoverGroupper = (element2) => {
            const ret = {};
            for (let el = element2; el; el = dom.getParentElement(el)) {
              const toe = getTabsterOnElement(this._tabster, el);
              if (toe) {
                if (toe.groupper && !ret.groupper) {
                  ret.groupper = toe.groupper;
                }
                if (toe.mover) {
                  ret.mover = toe.mover;
                  break;
                }
              }
            }
            return ret;
          };
          updateQueue.push({
            element,
            type: _moverUpdateAdd
          });
          requestUpdate();
          observer.observe(element, {
            childList: true,
            subtree: true,
            attributes: true,
            attributeFilter: ["tabindex"]
          });
          this._unobserve = () => {
            observer.disconnect();
          };
        }
        getState(element) {
          const id = getElementUId(this._win, element);
          if (id in this._visible) {
            const visibility = this._visible[id] || Visibilities.Invisible;
            const isCurrent = this._current ? this._current.get() === element : void 0;
            return {
              isCurrent,
              visibility
            };
          }
          return void 0;
        }
      };
      MoverAPI = class {
        constructor(tabster, getWindow) {
          this._init = () => {
            const win = this._win();
            win.addEventListener("keydown", this._onKeyDown, true);
            win.addEventListener(MoverMoveFocusEventName, this._onMoveFocus);
            win.addEventListener(MoverMemorizedElementEventName, this._onMemorizedElement);
            this._tabster.focusedElement.subscribe(this._onFocus);
          };
          this._onMoverDispose = (mover) => {
            delete this._movers[mover.id];
          };
          this._onFocus = (element) => {
            var _a;
            let currentFocusableElement = element;
            let deepestFocusableElement = element;
            for (let el = dom.getParentElement(element); el; el = dom.getParentElement(el)) {
              const mover = (_a = getTabsterOnElement(this._tabster, el)) === null || _a === void 0 ? void 0 : _a.mover;
              if (mover) {
                mover.setCurrent(deepestFocusableElement);
                currentFocusableElement = void 0;
              }
              if (!currentFocusableElement && this._tabster.focusable.isFocusable(el)) {
                currentFocusableElement = deepestFocusableElement = el;
              }
            }
          };
          this._onKeyDown = async (event) => {
            var _a;
            if (this._ignoredInputTimer) {
              this._win().clearTimeout(this._ignoredInputTimer);
              delete this._ignoredInputTimer;
            }
            (_a = this._ignoredInputResolve) === null || _a === void 0 ? void 0 : _a.call(this, false);
            if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {
              return;
            }
            const key = event.key;
            let moverKey;
            if (key === Keys.ArrowDown) {
              moverKey = MoverKeys.ArrowDown;
            } else if (key === Keys.ArrowRight) {
              moverKey = MoverKeys.ArrowRight;
            } else if (key === Keys.ArrowUp) {
              moverKey = MoverKeys.ArrowUp;
            } else if (key === Keys.ArrowLeft) {
              moverKey = MoverKeys.ArrowLeft;
            } else if (key === Keys.PageDown) {
              moverKey = MoverKeys.PageDown;
            } else if (key === Keys.PageUp) {
              moverKey = MoverKeys.PageUp;
            } else if (key === Keys.Home) {
              moverKey = MoverKeys.Home;
            } else if (key === Keys.End) {
              moverKey = MoverKeys.End;
            }
            if (!moverKey) {
              return;
            }
            const focused = this._tabster.focusedElement.getFocusedElement();
            if (!focused || await this._isIgnoredInput(focused, key)) {
              return;
            }
            this._moveFocus(focused, moverKey, event);
          };
          this._onMoveFocus = (e) => {
            var _a;
            const element = e.composedPath()[0];
            const key = (_a = e.detail) === null || _a === void 0 ? void 0 : _a.key;
            if (element && key !== void 0 && !e.defaultPrevented) {
              this._moveFocus(element, key);
              e.stopImmediatePropagation();
            }
          };
          this._onMemorizedElement = (e) => {
            var _a;
            const target = e.composedPath()[0];
            let memorizedElement = (_a = e.detail) === null || _a === void 0 ? void 0 : _a.memorizedElement;
            if (target) {
              const ctx = RootAPI.getTabsterContext(this._tabster, target);
              const mover = ctx === null || ctx === void 0 ? void 0 : ctx.mover;
              if (mover) {
                if (memorizedElement && !dom.nodeContains(mover.getElement(), memorizedElement)) {
                  memorizedElement = void 0;
                }
                mover.setCurrent(memorizedElement);
                e.stopImmediatePropagation();
              }
            }
          };
          this._tabster = tabster;
          this._win = getWindow;
          this._movers = {};
          tabster.queueInit(this._init);
        }
        dispose() {
          var _a;
          const win = this._win();
          this._tabster.focusedElement.unsubscribe(this._onFocus);
          (_a = this._ignoredInputResolve) === null || _a === void 0 ? void 0 : _a.call(this, false);
          if (this._ignoredInputTimer) {
            win.clearTimeout(this._ignoredInputTimer);
            delete this._ignoredInputTimer;
          }
          win.removeEventListener("keydown", this._onKeyDown, true);
          win.removeEventListener(MoverMoveFocusEventName, this._onMoveFocus);
          win.removeEventListener(MoverMemorizedElementEventName, this._onMemorizedElement);
          Object.keys(this._movers).forEach((moverId) => {
            if (this._movers[moverId]) {
              this._movers[moverId].dispose();
              delete this._movers[moverId];
            }
          });
        }
        createMover(element, props, sys) {
          if (true) ;
          const newMover = new Mover(this._tabster, element, this._onMoverDispose, props, sys);
          this._movers[newMover.id] = newMover;
          return newMover;
        }
        moveFocus(fromElement, key) {
          return this._moveFocus(fromElement, key);
        }
        _moveFocus(fromElement, key, relatedEvent) {
          var _a, _b;
          const tabster = this._tabster;
          const ctx = RootAPI.getTabsterContext(tabster, fromElement, {
            checkRtl: true
          });
          if (!ctx || !ctx.mover || ctx.excludedFromMover || relatedEvent && ctx.ignoreKeydown(relatedEvent)) {
            return null;
          }
          const mover = ctx.mover;
          const container = mover.getElement();
          if (ctx.groupperBeforeMover) {
            const groupper = ctx.groupper;
            if (groupper && !groupper.isActive(true)) {
              for (let el = dom.getParentElement(groupper.getElement()); el && el !== container; el = dom.getParentElement(el)) {
                if ((_b = (_a = getTabsterOnElement(tabster, el)) === null || _a === void 0 ? void 0 : _a.groupper) === null || _b === void 0 ? void 0 : _b.isActive(true)) {
                  return null;
                }
              }
            } else {
              return null;
            }
          }
          if (!container) {
            return null;
          }
          const focusable = tabster.focusable;
          const moverProps = mover.getProps();
          const direction = moverProps.direction || MoverDirections.Both;
          const isBoth = direction === MoverDirections.Both;
          const isVertical = isBoth || direction === MoverDirections.Vertical;
          const isHorizontal = isBoth || direction === MoverDirections.Horizontal;
          const isGridLinear = direction === MoverDirections.GridLinear;
          const isGrid = isGridLinear || direction === MoverDirections.Grid;
          const isCyclic = moverProps.cyclic;
          let next2;
          let scrollIntoViewArg;
          let focusedElementRect;
          let focusedElementX1 = 0;
          let focusedElementX2 = 0;
          if (isGrid) {
            focusedElementRect = fromElement.getBoundingClientRect();
            focusedElementX1 = Math.ceil(focusedElementRect.left);
            focusedElementX2 = Math.floor(focusedElementRect.right);
          }
          if (ctx.rtl) {
            if (key === MoverKeys.ArrowRight) {
              key = MoverKeys.ArrowLeft;
            } else if (key === MoverKeys.ArrowLeft) {
              key = MoverKeys.ArrowRight;
            }
          }
          if (key === MoverKeys.ArrowDown && isVertical || key === MoverKeys.ArrowRight && (isHorizontal || isGrid)) {
            next2 = focusable.findNext({
              currentElement: fromElement,
              container,
              useActiveModalizer: true
            });
            if (next2 && isGrid) {
              const nextElementX1 = Math.ceil(next2.getBoundingClientRect().left);
              if (!isGridLinear && focusedElementX2 > nextElementX1) {
                next2 = void 0;
              }
            } else if (!next2 && isCyclic) {
              next2 = focusable.findFirst({
                container,
                useActiveModalizer: true
              });
            }
          } else if (key === MoverKeys.ArrowUp && isVertical || key === MoverKeys.ArrowLeft && (isHorizontal || isGrid)) {
            next2 = focusable.findPrev({
              currentElement: fromElement,
              container,
              useActiveModalizer: true
            });
            if (next2 && isGrid) {
              const nextElementX2 = Math.floor(next2.getBoundingClientRect().right);
              if (!isGridLinear && nextElementX2 > focusedElementX1) {
                next2 = void 0;
              }
            } else if (!next2 && isCyclic) {
              next2 = focusable.findLast({
                container,
                useActiveModalizer: true
              });
            }
          } else if (key === MoverKeys.Home) {
            if (isGrid) {
              focusable.findElement({
                container,
                currentElement: fromElement,
                useActiveModalizer: true,
                isBackward: true,
                acceptCondition: (el) => {
                  var _a2;
                  if (!focusable.isFocusable(el)) {
                    return false;
                  }
                  const nextElementX1 = Math.ceil((_a2 = el.getBoundingClientRect().left) !== null && _a2 !== void 0 ? _a2 : 0);
                  if (el !== fromElement && focusedElementX1 <= nextElementX1) {
                    return true;
                  }
                  next2 = el;
                  return false;
                }
              });
            } else {
              next2 = focusable.findFirst({
                container,
                useActiveModalizer: true
              });
            }
          } else if (key === MoverKeys.End) {
            if (isGrid) {
              focusable.findElement({
                container,
                currentElement: fromElement,
                useActiveModalizer: true,
                acceptCondition: (el) => {
                  var _a2;
                  if (!focusable.isFocusable(el)) {
                    return false;
                  }
                  const nextElementX1 = Math.ceil((_a2 = el.getBoundingClientRect().left) !== null && _a2 !== void 0 ? _a2 : 0);
                  if (el !== fromElement && focusedElementX1 >= nextElementX1) {
                    return true;
                  }
                  next2 = el;
                  return false;
                }
              });
            } else {
              next2 = focusable.findLast({
                container,
                useActiveModalizer: true
              });
            }
          } else if (key === MoverKeys.PageUp) {
            focusable.findElement({
              currentElement: fromElement,
              container,
              useActiveModalizer: true,
              isBackward: true,
              acceptCondition: (el) => {
                if (!focusable.isFocusable(el)) {
                  return false;
                }
                if (isElementVerticallyVisibleInContainer(this._win, el, mover.visibilityTolerance)) {
                  next2 = el;
                  return false;
                }
                return true;
              }
            });
            if (isGrid && next2) {
              const firstColumnX1 = Math.ceil(next2.getBoundingClientRect().left);
              focusable.findElement({
                currentElement: next2,
                container,
                useActiveModalizer: true,
                acceptCondition: (el) => {
                  if (!focusable.isFocusable(el)) {
                    return false;
                  }
                  const nextElementX1 = Math.ceil(el.getBoundingClientRect().left);
                  if (focusedElementX1 < nextElementX1 || firstColumnX1 >= nextElementX1) {
                    return true;
                  }
                  next2 = el;
                  return false;
                }
              });
            }
            scrollIntoViewArg = false;
          } else if (key === MoverKeys.PageDown) {
            focusable.findElement({
              currentElement: fromElement,
              container,
              useActiveModalizer: true,
              acceptCondition: (el) => {
                if (!focusable.isFocusable(el)) {
                  return false;
                }
                if (isElementVerticallyVisibleInContainer(this._win, el, mover.visibilityTolerance)) {
                  next2 = el;
                  return false;
                }
                return true;
              }
            });
            if (isGrid && next2) {
              const lastColumnX1 = Math.ceil(next2.getBoundingClientRect().left);
              focusable.findElement({
                currentElement: next2,
                container,
                useActiveModalizer: true,
                isBackward: true,
                acceptCondition: (el) => {
                  if (!focusable.isFocusable(el)) {
                    return false;
                  }
                  const nextElementX1 = Math.ceil(el.getBoundingClientRect().left);
                  if (focusedElementX1 > nextElementX1 || lastColumnX1 <= nextElementX1) {
                    return true;
                  }
                  next2 = el;
                  return false;
                }
              });
            }
            scrollIntoViewArg = true;
          } else if (isGrid) {
            const isBackward = key === MoverKeys.ArrowUp;
            const ax1 = focusedElementX1;
            const ay1 = Math.ceil(focusedElementRect.top);
            const ax2 = focusedElementX2;
            const ay2 = Math.floor(focusedElementRect.bottom);
            let targetElement;
            let lastDistance;
            let lastIntersection = 0;
            focusable.findAll({
              container,
              currentElement: fromElement,
              isBackward,
              onElement: (el) => {
                const rect = el.getBoundingClientRect();
                const bx1 = Math.ceil(rect.left);
                const by1 = Math.ceil(rect.top);
                const bx2 = Math.floor(rect.right);
                const by2 = Math.floor(rect.bottom);
                if (isBackward && ay1 < by2 || !isBackward && ay2 > by1) {
                  return true;
                }
                const xIntersectionWidth = Math.ceil(Math.min(ax2, bx2)) - Math.floor(Math.max(ax1, bx1));
                const minWidth = Math.ceil(Math.min(ax2 - ax1, bx2 - bx1));
                if (xIntersectionWidth > 0 && minWidth >= xIntersectionWidth) {
                  const intersection = xIntersectionWidth / minWidth;
                  if (intersection > lastIntersection) {
                    targetElement = el;
                    lastIntersection = intersection;
                  }
                } else if (lastIntersection === 0) {
                  const distance = getDistance(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2);
                  if (lastDistance === void 0 || distance < lastDistance) {
                    lastDistance = distance;
                    targetElement = el;
                  }
                } else if (lastIntersection > 0) {
                  return false;
                }
                return true;
              }
            });
            next2 = targetElement;
          }
          if (next2 && (!relatedEvent || relatedEvent && container.dispatchEvent(new TabsterMoveFocusEvent({
            by: "mover",
            owner: container,
            next: next2,
            relatedEvent
          })))) {
            if (scrollIntoViewArg !== void 0) {
              scrollIntoView(this._win, next2, scrollIntoViewArg);
            }
            if (relatedEvent) {
              relatedEvent.preventDefault();
              relatedEvent.stopImmediatePropagation();
            }
            nativeFocus(next2);
            return next2;
          }
          return null;
        }
        async _isIgnoredInput(element, key) {
          if (element.getAttribute("aria-expanded") === "true" && element.hasAttribute("aria-activedescendant")) {
            return true;
          }
          if (matchesSelector(element, _inputSelector)) {
            let selectionStart = 0;
            let selectionEnd = 0;
            let textLength = 0;
            let asyncRet;
            if (element.tagName === "INPUT" || element.tagName === "TEXTAREA") {
              const type = element.type;
              const value = element.value;
              textLength = (value || "").length;
              if (type === "email" || type === "number") {
                if (textLength) {
                  const selection = dom.getSelection(element);
                  if (selection) {
                    const initialLength = selection.toString().length;
                    const isBackward = key === Keys.ArrowLeft || key === Keys.ArrowUp;
                    selection.modify("extend", isBackward ? "backward" : "forward", "character");
                    if (initialLength !== selection.toString().length) {
                      selection.modify("extend", isBackward ? "forward" : "backward", "character");
                      return true;
                    } else {
                      textLength = 0;
                    }
                  }
                }
              } else {
                const selStart = element.selectionStart;
                if (selStart === null) {
                  return type === "hidden";
                }
                selectionStart = selStart || 0;
                selectionEnd = element.selectionEnd || 0;
              }
            } else if (element.contentEditable === "true") {
              asyncRet = new (getPromise(this._win))((resolve) => {
                this._ignoredInputResolve = (value) => {
                  delete this._ignoredInputResolve;
                  resolve(value);
                };
                const win = this._win();
                if (this._ignoredInputTimer) {
                  win.clearTimeout(this._ignoredInputTimer);
                }
                const {
                  anchorNode: prevAnchorNode,
                  focusNode: prevFocusNode,
                  anchorOffset: prevAnchorOffset,
                  focusOffset: prevFocusOffset
                } = dom.getSelection(element) || {};
                this._ignoredInputTimer = win.setTimeout(() => {
                  var _a, _b, _c;
                  delete this._ignoredInputTimer;
                  const {
                    anchorNode,
                    focusNode,
                    anchorOffset,
                    focusOffset
                  } = dom.getSelection(element) || {};
                  if (anchorNode !== prevAnchorNode || focusNode !== prevFocusNode || anchorOffset !== prevAnchorOffset || focusOffset !== prevFocusOffset) {
                    (_a = this._ignoredInputResolve) === null || _a === void 0 ? void 0 : _a.call(this, false);
                    return;
                  }
                  selectionStart = anchorOffset || 0;
                  selectionEnd = focusOffset || 0;
                  textLength = ((_b = element.textContent) === null || _b === void 0 ? void 0 : _b.length) || 0;
                  if (anchorNode && focusNode) {
                    if (dom.nodeContains(element, anchorNode) && dom.nodeContains(element, focusNode)) {
                      if (anchorNode !== element) {
                        let anchorFound = false;
                        const addOffsets = (node2) => {
                          if (node2 === anchorNode) {
                            anchorFound = true;
                          } else if (node2 === focusNode) {
                            return true;
                          }
                          const nodeText = node2.textContent;
                          if (nodeText && !dom.getFirstChild(node2)) {
                            const len = nodeText.length;
                            if (anchorFound) {
                              if (focusNode !== anchorNode) {
                                selectionEnd += len;
                              }
                            } else {
                              selectionStart += len;
                              selectionEnd += len;
                            }
                          }
                          let stop = false;
                          for (let e = dom.getFirstChild(node2); e && !stop; e = e.nextSibling) {
                            stop = addOffsets(e);
                          }
                          return stop;
                        };
                        addOffsets(element);
                      }
                    }
                  }
                  (_c = this._ignoredInputResolve) === null || _c === void 0 ? void 0 : _c.call(this, true);
                }, 0);
              });
            }
            if (asyncRet && !await asyncRet) {
              return true;
            }
            if (selectionStart !== selectionEnd) {
              return true;
            }
            if (selectionStart > 0 && (key === Keys.ArrowLeft || key === Keys.ArrowUp || key === Keys.Home)) {
              return true;
            }
            if (selectionStart < textLength && (key === Keys.ArrowRight || key === Keys.ArrowDown || key === Keys.End)) {
              return true;
            }
          }
          return false;
        }
      };
      UncontrolledAPI = class {
        constructor(isUncontrolledCompletely) {
          this._isUncontrolledCompletely = isUncontrolledCompletely;
        }
        isUncontrolledCompletely(element, completely) {
          var _a;
          const isUncontrolledCompletely = (_a = this._isUncontrolledCompletely) === null || _a === void 0 ? void 0 : _a.call(this, element, completely);
          return isUncontrolledCompletely === void 0 ? completely : isUncontrolledCompletely;
        }
      };
      History = class _History {
        constructor(getWindow) {
          this._stack = [];
          this._getWindow = getWindow;
        }
        /**
         * Push a weak element to the top of the history stack.
         * If the stack is full, the bottom weak element is removed.
         * If the element is already at the top of the stack, it is not duplicated.
         */
        push(element) {
          var _a;
          if (((_a = this._stack[this._stack.length - 1]) === null || _a === void 0 ? void 0 : _a.get()) === element) {
            return;
          }
          if (this._stack.length > _History.DEPTH) {
            this._stack.shift();
          }
          this._stack.push(new WeakHTMLElement(this._getWindow, element));
        }
        /**
         * Pop the first element from the history that satisfies the callback.
         * The history is searched from the top to the bottom (from the most recent to the least recent).
         *
         * If a weak reference to the element is broken,
         * or the element is no longer in the DOM,
         * the element is removed from the top of the stack while popping.
         *
         * If no matching element is found, undefined is returned.
         * If the stack is empty, undefined is returned.
         */
        pop(filter3) {
          if (filter3 === void 0) {
            filter3 = () => true;
          }
          var _a;
          const doc = this._getWindow().document;
          for (let index = this._stack.length - 1; index >= 0; index--) {
            const maybeElement = (_a = this._stack.pop()) === null || _a === void 0 ? void 0 : _a.get();
            if (maybeElement && dom.nodeContains(doc.body, dom.getParentElement(maybeElement)) && filter3(maybeElement)) {
              return maybeElement;
            }
          }
          return void 0;
        }
      };
      History.DEPTH = 10;
      ShadowMutationObserver = class _ShadowMutationObserver {
        static _overrideAttachShadow(win) {
          const origAttachShadow = win.Element.prototype.attachShadow;
          if (origAttachShadow.__origAttachShadow) {
            return;
          }
          Element.prototype.attachShadow = function(options) {
            const shadowRoot = origAttachShadow.call(this, options);
            for (const shadowObserver of _ShadowMutationObserver._shadowObservers) {
              shadowObserver._addSubObserver(shadowRoot);
            }
            return shadowRoot;
          };
          Element.prototype.attachShadow.__origAttachShadow = origAttachShadow;
        }
        constructor(callback) {
          this._isObserving = false;
          this._callbackWrapper = (mutations, observer) => {
            for (const mutation of mutations) {
              if (mutation.type === "childList") {
                const removed = mutation.removedNodes;
                const added = mutation.addedNodes;
                for (let i = 0; i < removed.length; i++) {
                  this._walkShadows(removed[i], true);
                }
                for (let i = 0; i < added.length; i++) {
                  this._walkShadows(added[i]);
                }
              }
            }
            this._callback(mutations, observer);
          };
          this._callback = callback;
          this._observer = new MutationObserver(this._callbackWrapper);
          this._subObservers = /* @__PURE__ */ new Map();
        }
        _addSubObserver(shadowRoot) {
          if (!this._options || !this._callback || this._subObservers.has(shadowRoot)) {
            return;
          }
          if (this._options.subtree && nodeContains(this._root, shadowRoot)) {
            const subObserver = new MutationObserver(this._callbackWrapper);
            this._subObservers.set(shadowRoot, subObserver);
            if (this._isObserving) {
              subObserver.observe(shadowRoot, this._options);
            }
            this._walkShadows(shadowRoot);
          }
        }
        disconnect() {
          this._isObserving = false;
          delete this._options;
          _ShadowMutationObserver._shadowObservers.delete(this);
          for (const subObserver of this._subObservers.values()) {
            subObserver.disconnect();
          }
          this._subObservers.clear();
          this._observer.disconnect();
        }
        observe(target, options) {
          const doc = target.nodeType === Node.DOCUMENT_NODE ? target : target.ownerDocument;
          const win = doc === null || doc === void 0 ? void 0 : doc.defaultView;
          if (!doc || !win) {
            return;
          }
          _ShadowMutationObserver._overrideAttachShadow(win);
          _ShadowMutationObserver._shadowObservers.add(this);
          this._root = target;
          this._options = options;
          this._isObserving = true;
          this._observer.observe(target, options);
          this._walkShadows(target);
        }
        _walkShadows(target, remove) {
          const doc = target.nodeType === Node.DOCUMENT_NODE ? target : target.ownerDocument;
          if (!doc) {
            return;
          }
          if (target === doc) {
            target = doc.body;
          } else {
            const shadowRoot = target.shadowRoot;
            if (shadowRoot) {
              this._addSubObserver(shadowRoot);
              return;
            }
          }
          const walker = doc.createTreeWalker(target, NodeFilter.SHOW_ELEMENT, {
            acceptNode: (node2) => {
              if (node2.nodeType === Node.ELEMENT_NODE) {
                if (remove) {
                  const subObserver = this._subObservers.get(node2);
                  if (subObserver) {
                    subObserver.disconnect();
                    this._subObservers.delete(node2);
                  }
                } else {
                  const shadowRoot = node2.shadowRoot;
                  if (shadowRoot) {
                    this._addSubObserver(shadowRoot);
                  }
                }
              }
              return NodeFilter.FILTER_SKIP;
            }
          });
          walker.nextNode();
        }
        takeRecords() {
          const records = this._observer.takeRecords();
          for (const subObserver of this._subObservers.values()) {
            records.push(...subObserver.takeRecords());
          }
          return records;
        }
      };
      ShadowMutationObserver._shadowObservers = /* @__PURE__ */ new Set();
      Tabster = class {
        constructor(tabster) {
          this.keyboardNavigation = tabster.keyboardNavigation;
          this.focusedElement = tabster.focusedElement;
          this.focusable = tabster.focusable;
          this.root = tabster.root;
          this.uncontrolled = tabster.uncontrolled;
          this.core = tabster;
        }
      };
      TabsterCore = class {
        constructor(win, props) {
          var _a, _b;
          this._forgetMemorizedElements = [];
          this._wrappers = /* @__PURE__ */ new Set();
          this._initQueue = [];
          this._version = "8.5.2";
          this._noop = false;
          this.getWindow = () => {
            if (!this._win) {
              throw new Error("Using disposed Tabster.");
            }
            return this._win;
          };
          this._storage = createWeakMap(win);
          this._win = win;
          const getWindow = this.getWindow;
          if (props === null || props === void 0 ? void 0 : props.DOMAPI) {
            setDOMAPI({
              ...props.DOMAPI
            });
          }
          this.keyboardNavigation = new KeyboardNavigationState(getWindow);
          this.focusedElement = new FocusedElementState(this, getWindow);
          this.focusable = new FocusableAPI(this);
          this.root = new RootAPI(this, props === null || props === void 0 ? void 0 : props.autoRoot);
          this.uncontrolled = new UncontrolledAPI(
            // TODO: Remove checkUncontrolledTrappingFocus in the next major version.
            (props === null || props === void 0 ? void 0 : props.checkUncontrolledCompletely) || (props === null || props === void 0 ? void 0 : props.checkUncontrolledTrappingFocus)
          );
          this.controlTab = (_a = props === null || props === void 0 ? void 0 : props.controlTab) !== null && _a !== void 0 ? _a : true;
          this.rootDummyInputs = !!(props === null || props === void 0 ? void 0 : props.rootDummyInputs);
          this._dummyObserver = new DummyInputObserver(getWindow);
          this.getParent = (_b = props === null || props === void 0 ? void 0 : props.getParent) !== null && _b !== void 0 ? _b : dom.getParentNode;
          this.internal = {
            stopObserver: () => {
              if (this._unobserve) {
                this._unobserve();
                delete this._unobserve;
              }
            },
            resumeObserver: (syncState) => {
              if (!this._unobserve) {
                const doc = getWindow().document;
                this._unobserve = observeMutations(doc, this, updateTabsterByAttribute, syncState);
              }
            }
          };
          startFakeWeakRefsCleanup(getWindow);
          this.queueInit(() => {
            this.internal.resumeObserver(true);
          });
        }
        /**
         * Merges external props with the current props. Not all
         * props can/should be mergeable, so let's add more as we move on.
         * @param props Tabster props
         */
        _mergeProps(props) {
          var _a;
          if (!props) {
            return;
          }
          this.getParent = (_a = props.getParent) !== null && _a !== void 0 ? _a : this.getParent;
        }
        createTabster(noRefCount, props) {
          const wrapper = new Tabster(this);
          if (!noRefCount) {
            this._wrappers.add(wrapper);
          }
          this._mergeProps(props);
          return wrapper;
        }
        disposeTabster(wrapper, allInstances) {
          if (allInstances) {
            this._wrappers.clear();
          } else {
            this._wrappers.delete(wrapper);
          }
          if (this._wrappers.size === 0) {
            this.dispose();
          }
        }
        dispose() {
          var _a, _b, _c, _d, _e, _f, _g, _h;
          this.internal.stopObserver();
          const win = this._win;
          win === null || win === void 0 ? void 0 : win.clearTimeout(this._initTimer);
          delete this._initTimer;
          this._initQueue = [];
          this._forgetMemorizedElements = [];
          if (win && this._forgetMemorizedTimer) {
            win.clearTimeout(this._forgetMemorizedTimer);
            delete this._forgetMemorizedTimer;
          }
          (_a = this.outline) === null || _a === void 0 ? void 0 : _a.dispose();
          (_b = this.crossOrigin) === null || _b === void 0 ? void 0 : _b.dispose();
          (_c = this.deloser) === null || _c === void 0 ? void 0 : _c.dispose();
          (_d = this.groupper) === null || _d === void 0 ? void 0 : _d.dispose();
          (_e = this.mover) === null || _e === void 0 ? void 0 : _e.dispose();
          (_f = this.modalizer) === null || _f === void 0 ? void 0 : _f.dispose();
          (_g = this.observedElement) === null || _g === void 0 ? void 0 : _g.dispose();
          (_h = this.restorer) === null || _h === void 0 ? void 0 : _h.dispose();
          this.keyboardNavigation.dispose();
          this.focusable.dispose();
          this.focusedElement.dispose();
          this.root.dispose();
          this._dummyObserver.dispose();
          stopFakeWeakRefsCleanupAndClearStorage(this.getWindow);
          clearElementCache(this.getWindow);
          this._storage = /* @__PURE__ */ new WeakMap();
          this._wrappers.clear();
          if (win) {
            disposeInstanceContext(win);
            delete win.__tabsterInstance;
            delete this._win;
          }
        }
        storageEntry(element, addremove) {
          const storage = this._storage;
          let entry = storage.get(element);
          if (entry) {
            if (addremove === false && Object.keys(entry).length === 0) {
              storage.delete(element);
            }
          } else if (addremove === true) {
            entry = {};
            storage.set(element, entry);
          }
          return entry;
        }
        forceCleanup() {
          if (!this._win) {
            return;
          }
          this._forgetMemorizedElements.push(this._win.document.body);
          if (this._forgetMemorizedTimer) {
            return;
          }
          this._forgetMemorizedTimer = this._win.setTimeout(() => {
            delete this._forgetMemorizedTimer;
            for (let el = this._forgetMemorizedElements.shift(); el; el = this._forgetMemorizedElements.shift()) {
              clearElementCache(this.getWindow, el);
              FocusedElementState.forgetMemorized(this.focusedElement, el);
            }
          }, 0);
          cleanupFakeWeakRefs(this.getWindow, true);
        }
        queueInit(callback) {
          var _a;
          if (!this._win) {
            return;
          }
          this._initQueue.push(callback);
          if (!this._initTimer) {
            this._initTimer = (_a = this._win) === null || _a === void 0 ? void 0 : _a.setTimeout(() => {
              delete this._initTimer;
              this.drainInitQueue();
            }, 0);
          }
        }
        drainInitQueue() {
          if (!this._win) {
            return;
          }
          const queue = this._initQueue;
          this._initQueue = [];
          queue.forEach((callback) => callback());
        }
      };
    }
  });

  // node_modules/@fluentui/react-tabster/lib/hooks/useTabster.js
  function createTabsterWithConfig(targetDocument) {
    const defaultView = (targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView) || void 0;
    const shadowDOMAPI = defaultView === null || defaultView === void 0 ? void 0 : defaultView.__tabsterShadowDOMAPI;
    if (defaultView) {
      return createTabster(defaultView, {
        autoRoot: {},
        controlTab: false,
        getParent,
        checkUncontrolledTrappingFocus: (element) => {
          var _element_firstElementChild;
          return !!((_element_firstElementChild = element.firstElementChild) === null || _element_firstElementChild === void 0 ? void 0 : _element_firstElementChild.hasAttribute("data-is-focus-trap-zone-bumper"));
        },
        DOMAPI: shadowDOMAPI
      });
    }
  }
  function useTabster(factory = DEFAULT_FACTORY) {
    const { targetDocument } = useFluent();
    const factoryResultRef = React33.useRef(null);
    React33.useEffect(() => {
      const tabster = createTabsterWithConfig(targetDocument);
      if (tabster) {
        factoryResultRef.current = factory(tabster);
        return () => {
          disposeTabster(tabster);
          factoryResultRef.current = null;
        };
      }
    }, [
      targetDocument,
      factory
    ]);
    if (true) {
      const previousFactory = usePrevious(factory);
      if (previousFactory !== null && previousFactory !== factory) {
        throw new Error([
          "@fluentui/react-tabster: ",
          "The factory function passed to useTabster has changed. This should not ever happen."
        ].join("\n"));
      }
    }
    return factoryResultRef;
  }
  var React33, DEFAULT_FACTORY;
  var init_useTabster = __esm({
    "node_modules/@fluentui/react-tabster/lib/hooks/useTabster.js"() {
      React33 = __toESM(require_react());
      init_tabster_esm();
      init_lib();
      init_lib2();
      DEFAULT_FACTORY = (tabster) => {
        return tabster;
      };
    }
  });

  // node_modules/@fluentui/react-tabster/lib/hooks/useTabsterAttributes.js
  var React34, useTabsterAttributes;
  var init_useTabsterAttributes = __esm({
    "node_modules/@fluentui/react-tabster/lib/hooks/useTabsterAttributes.js"() {
      init_tabster_esm();
      init_useTabster();
      React34 = __toESM(require_react());
      useTabsterAttributes = (props) => {
        useTabster();
        const strAttr = getTabsterAttribute(props, true);
        return React34.useMemo(() => ({
          [TABSTER_ATTRIBUTE_NAME]: strAttr
        }), [
          strAttr
        ]);
      };
    }
  });

  // node_modules/@fluentui/react-tabster/lib/hooks/useArrowNavigationGroup.js
  function axisToMoverDirection(axis) {
    switch (axis) {
      case "horizontal":
        return MoverDirections.Horizontal;
      case "grid":
        return MoverDirections.Grid;
      case "grid-linear":
        return MoverDirections.GridLinear;
      case "both":
        return MoverDirections.Both;
      case "vertical":
      default:
        return MoverDirections.Vertical;
    }
  }
  var useArrowNavigationGroup;
  var init_useArrowNavigationGroup = __esm({
    "node_modules/@fluentui/react-tabster/lib/hooks/useArrowNavigationGroup.js"() {
      init_tabster_esm();
      init_useTabsterAttributes();
      init_useTabster();
      useArrowNavigationGroup = (options = {}) => {
        const {
          circular,
          axis,
          memorizeCurrent = true,
          tabbable,
          ignoreDefaultKeydown,
          // eslint-disable-next-line @typescript-eslint/naming-convention
          unstable_hasDefault
        } = options;
        useTabster(getMover);
        return useTabsterAttributes({
          mover: {
            cyclic: !!circular,
            direction: axisToMoverDirection(axis !== null && axis !== void 0 ? axis : "vertical"),
            memorizeCurrent,
            tabbable,
            hasDefault: unstable_hasDefault
          },
          ...ignoreDefaultKeydown && {
            focusable: {
              ignoreKeydown: ignoreDefaultKeydown
            }
          }
        });
      };
    }
  });

  // node_modules/@fluentui/react-tabster/lib/focus/constants.js
  var KEYBOARD_NAV_ATTRIBUTE, KEYBOARD_NAV_SELECTOR, FOCUS_VISIBLE_ATTR;
  var init_constants2 = __esm({
    "node_modules/@fluentui/react-tabster/lib/focus/constants.js"() {
      KEYBOARD_NAV_ATTRIBUTE = "data-keyboard-nav";
      KEYBOARD_NAV_SELECTOR = `:global([${KEYBOARD_NAV_ATTRIBUTE}])`;
      FOCUS_VISIBLE_ATTR = "data-fui-focus-visible";
    }
  });

  // node_modules/@fluentui/react-tabster/lib/focus/focusVisiblePolyfill.js
  function applyFocusVisiblePolyfill(scope, targetWindow) {
    if (alreadyInScope(scope)) {
      return () => void 0;
    }
    const state = {
      current: void 0
    };
    const keyborg = createKeyborg(targetWindow);
    function registerElementIfNavigating(el) {
      if (keyborg.isNavigatingWithKeyboard() && isHTMLElement(el)) {
        state.current = el;
        el.setAttribute(FOCUS_VISIBLE_ATTR, "");
      }
    }
    function disposeCurrentElement() {
      if (state.current) {
        state.current.removeAttribute(FOCUS_VISIBLE_ATTR);
        state.current = void 0;
      }
    }
    keyborg.subscribe((isNavigatingWithKeyboard) => {
      if (!isNavigatingWithKeyboard) {
        disposeCurrentElement();
      }
    });
    const keyborgListener = (e) => {
      disposeCurrentElement();
      const target = e.composedPath()[0];
      registerElementIfNavigating(target);
    };
    const blurListener = (e) => {
      if (!e.relatedTarget || isHTMLElement(e.relatedTarget) && !scope.contains(e.relatedTarget)) {
        disposeCurrentElement();
      }
    };
    scope.addEventListener(KEYBORG_FOCUSIN, keyborgListener);
    scope.addEventListener("focusout", blurListener);
    scope.focusVisible = true;
    if (scope.contains(targetWindow.document.activeElement)) {
      registerElementIfNavigating(targetWindow.document.activeElement);
    }
    return () => {
      disposeCurrentElement();
      scope.removeEventListener(KEYBORG_FOCUSIN, keyborgListener);
      scope.removeEventListener("focusout", blurListener);
      delete scope.focusVisible;
      disposeKeyborg(keyborg);
    };
  }
  function alreadyInScope(el) {
    if (!el) {
      return false;
    }
    if (el.focusVisible) {
      return true;
    }
    return alreadyInScope(el === null || el === void 0 ? void 0 : el.parentElement);
  }
  var init_focusVisiblePolyfill = __esm({
    "node_modules/@fluentui/react-tabster/lib/focus/focusVisiblePolyfill.js"() {
      init_lib2();
      init_esm();
      init_constants2();
    }
  });

  // node_modules/@fluentui/react-tabster/lib/hooks/useFocusVisible.js
  function useFocusVisible(options = {}) {
    const contextValue = useFluent();
    const scopeRef = React35.useRef(null);
    var _options_targetDocument;
    const targetDocument = (_options_targetDocument = options.targetDocument) !== null && _options_targetDocument !== void 0 ? _options_targetDocument : contextValue.targetDocument;
    React35.useEffect(() => {
      if ((targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView) && scopeRef.current) {
        return applyFocusVisiblePolyfill(scopeRef.current, targetDocument.defaultView);
      }
    }, [
      scopeRef,
      targetDocument
    ]);
    return scopeRef;
  }
  var React35;
  var init_useFocusVisible = __esm({
    "node_modules/@fluentui/react-tabster/lib/hooks/useFocusVisible.js"() {
      React35 = __toESM(require_react());
      init_lib();
      init_focusVisiblePolyfill();
    }
  });

  // node_modules/@fluentui/react-tabster/lib/hooks/index.js
  var init_hooks2 = __esm({
    "node_modules/@fluentui/react-tabster/lib/hooks/index.js"() {
      init_useArrowNavigationGroup();
      init_useFocusVisible();
    }
  });

  // node_modules/@fluentui/tokens/lib/global/colors.js
  var grey, whiteAlpha, blackAlpha, grey10Alpha, grey12Alpha, grey14Alpha, white, black, darkRed, cranberry, red, darkOrange, pumpkin, orange, peach, marigold, yellow, gold, brass, brown, forest, seafoam, lightGreen, green, darkGreen, lightTeal, teal, steel, blue, royalBlue, cornflower, navy, lavender, purple, grape, berry, lilac, pink, magenta, plum, beige, mink, platinum, anchor;
  var init_colors = __esm({
    "node_modules/@fluentui/tokens/lib/global/colors.js"() {
      grey = {
        "2": "#050505",
        "4": "#0a0a0a",
        "6": "#0f0f0f",
        "8": "#141414",
        "10": "#1a1a1a",
        "12": "#1f1f1f",
        "14": "#242424",
        "16": "#292929",
        "18": "#2e2e2e",
        "20": "#333333",
        "22": "#383838",
        "24": "#3d3d3d",
        "26": "#424242",
        "28": "#474747",
        "30": "#4d4d4d",
        "32": "#525252",
        "34": "#575757",
        "36": "#5c5c5c",
        "38": "#616161",
        "40": "#666666",
        "42": "#6b6b6b",
        "44": "#707070",
        "46": "#757575",
        "48": "#7a7a7a",
        "50": "#808080",
        "52": "#858585",
        "54": "#8a8a8a",
        "56": "#8f8f8f",
        "58": "#949494",
        "60": "#999999",
        "62": "#9e9e9e",
        "64": "#a3a3a3",
        "66": "#a8a8a8",
        "68": "#adadad",
        "70": "#b3b3b3",
        "72": "#b8b8b8",
        "74": "#bdbdbd",
        "76": "#c2c2c2",
        "78": "#c7c7c7",
        "80": "#cccccc",
        "82": "#d1d1d1",
        "84": "#d6d6d6",
        "86": "#dbdbdb",
        "88": "#e0e0e0",
        "90": "#e6e6e6",
        "92": "#ebebeb",
        "94": "#f0f0f0",
        "96": "#f5f5f5",
        "98": "#fafafa"
      };
      whiteAlpha = {
        "5": "rgba(255, 255, 255, 0.05)",
        "10": "rgba(255, 255, 255, 0.1)",
        "20": "rgba(255, 255, 255, 0.2)",
        "30": "rgba(255, 255, 255, 0.3)",
        "40": "rgba(255, 255, 255, 0.4)",
        "50": "rgba(255, 255, 255, 0.5)",
        "60": "rgba(255, 255, 255, 0.6)",
        "70": "rgba(255, 255, 255, 0.7)",
        "80": "rgba(255, 255, 255, 0.8)",
        "90": "rgba(255, 255, 255, 0.9)"
      };
      blackAlpha = {
        "5": "rgba(0, 0, 0, 0.05)",
        "10": "rgba(0, 0, 0, 0.1)",
        "20": "rgba(0, 0, 0, 0.2)",
        "30": "rgba(0, 0, 0, 0.3)",
        "40": "rgba(0, 0, 0, 0.4)",
        "50": "rgba(0, 0, 0, 0.5)",
        "60": "rgba(0, 0, 0, 0.6)",
        "70": "rgba(0, 0, 0, 0.7)",
        "80": "rgba(0, 0, 0, 0.8)",
        "90": "rgba(0, 0, 0, 0.9)"
      };
      grey10Alpha = {
        "5": "rgba(26, 26, 26, 0.05)",
        "10": "rgba(26, 26, 26, 0.1)",
        "20": "rgba(26, 26, 26, 0.2)",
        "30": "rgba(26, 26, 26, 0.3)",
        "40": "rgba(26, 26, 26, 0.4)",
        "50": "rgba(26, 26, 26, 0.5)",
        "60": "rgba(26, 26, 26, 0.6)",
        "70": "rgba(26, 26, 26, 0.7)",
        "80": "rgba(26, 26, 26, 0.8)",
        "90": "rgba(26, 26, 26, 0.9)"
      };
      grey12Alpha = {
        "5": "rgba(31, 31, 31, 0.05)",
        "10": "rgba(31, 31, 31, 0.1)",
        "20": "rgba(31, 31, 31, 0.2)",
        "30": "rgba(31, 31, 31, 0.3)",
        "40": "rgba(31, 31, 31, 0.4)",
        "50": "rgba(31, 31, 31, 0.5)",
        "60": "rgba(31, 31, 31, 0.6)",
        "70": "rgba(31, 31, 31, 0.7)",
        "80": "rgba(31, 31, 31, 0.8)",
        "90": "rgba(31, 31, 31, 0.9)"
      };
      grey14Alpha = {
        "5": "rgba(36, 36, 36, 0.05)",
        "10": "rgba(36, 36, 36, 0.1)",
        "20": "rgba(36, 36, 36, 0.2)",
        "30": "rgba(36, 36, 36, 0.3)",
        "40": "rgba(36, 36, 36, 0.4)",
        "50": "rgba(36, 36, 36, 0.5)",
        "60": "rgba(36, 36, 36, 0.6)",
        "70": "rgba(36, 36, 36, 0.7)",
        "80": "rgba(36, 36, 36, 0.8)",
        "90": "rgba(36, 36, 36, 0.9)"
      };
      white = "#ffffff";
      black = "#000000";
      darkRed = {
        shade50: "#130204",
        shade40: "#230308",
        shade30: "#420610",
        shade20: "#590815",
        shade10: "#690a19",
        primary: "#750b1c",
        tint10: "#861b2c",
        tint20: "#962f3f",
        tint30: "#ac4f5e",
        tint40: "#d69ca5",
        tint50: "#e9c7cd",
        tint60: "#f9f0f2"
      };
      cranberry = {
        shade50: "#200205",
        shade40: "#3b0509",
        shade30: "#6e0811",
        shade20: "#960b18",
        shade10: "#b10e1c",
        primary: "#c50f1f",
        tint10: "#cc2635",
        tint20: "#d33f4c",
        tint30: "#dc626d",
        tint40: "#eeacb2",
        tint50: "#f6d1d5",
        tint60: "#fdf3f4"
      };
      red = {
        shade50: "#210809",
        shade40: "#3f1011",
        shade30: "#751d1f",
        shade20: "#9f282b",
        shade10: "#bc2f32",
        primary: "#d13438",
        tint10: "#d7494c",
        tint20: "#dc5e62",
        tint30: "#e37d80",
        tint40: "#f1bbbc",
        tint50: "#f8dadb",
        tint60: "#fdf6f6"
      };
      darkOrange = {
        shade50: "#230900",
        shade40: "#411200",
        shade30: "#7a2101",
        shade20: "#a62d01",
        shade10: "#c43501",
        primary: "#da3b01",
        tint10: "#de501c",
        tint20: "#e36537",
        tint30: "#e9835e",
        tint40: "#f4bfab",
        tint50: "#f9dcd1",
        tint60: "#fdf6f3"
      };
      pumpkin = {
        shade50: "#200d03",
        shade40: "#3d1805",
        shade30: "#712d09",
        shade20: "#9a3d0c",
        shade10: "#b6480e",
        primary: "#ca5010",
        tint10: "#d06228",
        tint20: "#d77440",
        tint30: "#df8e64",
        tint40: "#efc4ad",
        tint50: "#f7dfd2",
        tint60: "#fdf7f4"
      };
      orange = {
        shade50: "#271002",
        shade40: "#4a1e04",
        shade30: "#8a3707",
        shade20: "#bc4b09",
        shade10: "#de590b",
        primary: "#f7630c",
        tint10: "#f87528",
        tint20: "#f98845",
        tint30: "#faa06b",
        tint40: "#fdcfb4",
        tint50: "#fee5d7",
        tint60: "#fff9f5"
      };
      peach = {
        shade50: "#291600",
        shade40: "#4d2a00",
        shade30: "#8f4e00",
        shade20: "#c26a00",
        shade10: "#e67e00",
        primary: "#ff8c00",
        tint10: "#ff9a1f",
        tint20: "#ffa83d",
        tint30: "#ffba66",
        tint40: "#ffddb3",
        tint50: "#ffedd6",
        tint60: "#fffaf5"
      };
      marigold = {
        shade50: "#251a00",
        shade40: "#463100",
        shade30: "#835b00",
        shade20: "#b27c00",
        shade10: "#d39300",
        primary: "#eaa300",
        tint10: "#edad1c",
        tint20: "#efb839",
        tint30: "#f2c661",
        tint40: "#f9e2ae",
        tint50: "#fcefd3",
        tint60: "#fefbf4"
      };
      yellow = {
        shade50: "#282400",
        shade40: "#4c4400",
        shade30: "#817400",
        shade20: "#c0ad00",
        shade10: "#e4cc00",
        primary: "#fde300",
        tint10: "#fde61e",
        tint20: "#fdea3d",
        tint30: "#feee66",
        tint40: "#fef7b2",
        tint50: "#fffad6",
        tint60: "#fffef5"
      };
      gold = {
        shade50: "#1f1900",
        shade40: "#3a2f00",
        shade30: "#6c5700",
        shade20: "#937700",
        shade10: "#ae8c00",
        primary: "#c19c00",
        tint10: "#c8a718",
        tint20: "#d0b232",
        tint30: "#dac157",
        tint40: "#ecdfa5",
        tint50: "#f5eece",
        tint60: "#fdfbf2"
      };
      brass = {
        shade50: "#181202",
        shade40: "#2e2103",
        shade30: "#553e06",
        shade20: "#745408",
        shade10: "#89640a",
        primary: "#986f0b",
        tint10: "#a47d1e",
        tint20: "#b18c34",
        tint30: "#c1a256",
        tint40: "#e0cea2",
        tint50: "#efe4cb",
        tint60: "#fbf8f2"
      };
      brown = {
        shade50: "#170e07",
        shade40: "#2b1a0e",
        shade30: "#50301a",
        shade20: "#6c4123",
        shade10: "#804d29",
        primary: "#8e562e",
        tint10: "#9c663f",
        tint20: "#a97652",
        tint30: "#bb8f6f",
        tint40: "#ddc3b0",
        tint50: "#edded3",
        tint60: "#faf7f4"
      };
      forest = {
        shade50: "#0c1501",
        shade40: "#162702",
        shade30: "#294903",
        shade20: "#376304",
        shade10: "#427505",
        primary: "#498205",
        tint10: "#599116",
        tint20: "#6ba02b",
        tint30: "#85b44c",
        tint40: "#bdd99b",
        tint50: "#dbebc7",
        tint60: "#f6faf0"
      };
      seafoam = {
        shade50: "#002111",
        shade40: "#003d20",
        shade30: "#00723b",
        shade20: "#009b51",
        shade10: "#00b85f",
        primary: "#00cc6a",
        tint10: "#19d279",
        tint20: "#34d889",
        tint30: "#5ae0a0",
        tint40: "#a8f0cd",
        tint50: "#cff7e4",
        tint60: "#f3fdf8"
      };
      lightGreen = {
        shade50: "#031a02",
        shade40: "#063004",
        shade30: "#0b5a08",
        shade20: "#0e7a0b",
        shade10: "#11910d",
        primary: "#13a10e",
        tint10: "#27ac22",
        tint20: "#3db838",
        tint30: "#5ec75a",
        tint40: "#a7e3a5",
        tint50: "#cef0cd",
        tint60: "#f2fbf2"
      };
      green = {
        shade50: "#031403",
        shade40: "#052505",
        shade30: "#094509",
        shade20: "#0c5e0c",
        shade10: "#0e700e",
        primary: "#107c10",
        tint10: "#218c21",
        tint20: "#359b35",
        tint30: "#54b054",
        tint40: "#9fd89f",
        tint50: "#c9eac9",
        tint60: "#f1faf1"
      };
      darkGreen = {
        shade50: "#021102",
        shade40: "#032003",
        shade30: "#063b06",
        shade20: "#085108",
        shade10: "#0a5f0a",
        primary: "#0b6a0b",
        tint10: "#1a7c1a",
        tint20: "#2d8e2d",
        tint30: "#4da64d",
        tint40: "#9ad29a",
        tint50: "#c6e7c6",
        tint60: "#f0f9f0"
      };
      lightTeal = {
        shade50: "#001d1f",
        shade40: "#00373a",
        shade30: "#00666d",
        shade20: "#008b94",
        shade10: "#00a5af",
        primary: "#00b7c3",
        tint10: "#18bfca",
        tint20: "#32c8d1",
        tint30: "#58d3db",
        tint40: "#a6e9ed",
        tint50: "#cef3f5",
        tint60: "#f2fcfd"
      };
      teal = {
        shade50: "#001516",
        shade40: "#012728",
        shade30: "#02494c",
        shade20: "#026467",
        shade10: "#037679",
        primary: "#038387",
        tint10: "#159195",
        tint20: "#2aa0a4",
        tint30: "#4cb4b7",
        tint40: "#9bd9db",
        tint50: "#c7ebec",
        tint60: "#f0fafa"
      };
      steel = {
        shade50: "#000f12",
        shade40: "#001b22",
        shade30: "#00333f",
        shade20: "#004555",
        shade10: "#005265",
        primary: "#005b70",
        tint10: "#0f6c81",
        tint20: "#237d92",
        tint30: "#4496a9",
        tint40: "#94c8d4",
        tint50: "#c3e1e8",
        tint60: "#eff7f9"
      };
      blue = {
        shade50: "#001322",
        shade40: "#002440",
        shade30: "#004377",
        shade20: "#005ba1",
        shade10: "#006cbf",
        primary: "#0078d4",
        tint10: "#1a86d9",
        tint20: "#3595de",
        tint30: "#5caae5",
        tint40: "#a9d3f2",
        tint50: "#d0e7f8",
        tint60: "#f3f9fd"
      };
      royalBlue = {
        shade50: "#000c16",
        shade40: "#00172a",
        shade30: "#002c4e",
        shade20: "#003b6a",
        shade10: "#00467e",
        primary: "#004e8c",
        tint10: "#125e9a",
        tint20: "#286fa8",
        tint30: "#4a89ba",
        tint40: "#9abfdc",
        tint50: "#c7dced",
        tint60: "#f0f6fa"
      };
      cornflower = {
        shade50: "#0d1126",
        shade40: "#182047",
        shade30: "#2c3c85",
        shade20: "#3c51b4",
        shade10: "#4760d5",
        primary: "#4f6bed",
        tint10: "#637cef",
        tint20: "#778df1",
        tint30: "#93a4f4",
        tint40: "#c8d1fa",
        tint50: "#e1e6fc",
        tint60: "#f7f9fe"
      };
      navy = {
        shade50: "#00061d",
        shade40: "#000c36",
        shade30: "#001665",
        shade20: "#001e89",
        shade10: "#0023a2",
        primary: "#0027b4",
        tint10: "#173bbd",
        tint20: "#3050c6",
        tint30: "#546fd2",
        tint40: "#a3b2e8",
        tint50: "#ccd5f3",
        tint60: "#f2f4fc"
      };
      lavender = {
        shade50: "#120f25",
        shade40: "#221d46",
        shade30: "#3f3682",
        shade20: "#5649b0",
        shade10: "#6656d1",
        primary: "#7160e8",
        tint10: "#8172eb",
        tint20: "#9184ee",
        tint30: "#a79cf1",
        tint40: "#d2ccf8",
        tint50: "#e7e4fb",
        tint60: "#f9f8fe"
      };
      purple = {
        shade50: "#0f0717",
        shade40: "#1c0e2b",
        shade30: "#341a51",
        shade20: "#46236e",
        shade10: "#532982",
        primary: "#5c2e91",
        tint10: "#6b3f9e",
        tint20: "#7c52ab",
        tint30: "#9470bd",
        tint40: "#c6b1de",
        tint50: "#e0d3ed",
        tint60: "#f7f4fb"
      };
      grape = {
        shade50: "#160418",
        shade40: "#29072e",
        shade30: "#4c0d55",
        shade20: "#671174",
        shade10: "#7a1589",
        primary: "#881798",
        tint10: "#952aa4",
        tint20: "#a33fb1",
        tint30: "#b55fc1",
        tint40: "#d9a7e0",
        tint50: "#eaceef",
        tint60: "#faf2fb"
      };
      berry = {
        shade50: "#1f091d",
        shade40: "#3a1136",
        shade30: "#6d2064",
        shade20: "#932b88",
        shade10: "#af33a1",
        primary: "#c239b3",
        tint10: "#c94cbc",
        tint20: "#d161c4",
        tint30: "#da7ed0",
        tint40: "#edbbe7",
        tint50: "#f5daf2",
        tint60: "#fdf5fc"
      };
      lilac = {
        shade50: "#1c0b1f",
        shade40: "#35153a",
        shade30: "#63276d",
        shade20: "#863593",
        shade10: "#9f3faf",
        primary: "#b146c2",
        tint10: "#ba58c9",
        tint20: "#c36bd1",
        tint30: "#cf87da",
        tint40: "#e6bfed",
        tint50: "#f2dcf5",
        tint60: "#fcf6fd"
      };
      pink = {
        shade50: "#24091b",
        shade40: "#441232",
        shade30: "#80215d",
        shade20: "#ad2d7e",
        shade10: "#cd3595",
        primary: "#e43ba6",
        tint10: "#e750b0",
        tint20: "#ea66ba",
        tint30: "#ef85c8",
        tint40: "#f7c0e3",
        tint50: "#fbddf0",
        tint60: "#fef6fb"
      };
      magenta = {
        shade50: "#1f0013",
        shade40: "#390024",
        shade30: "#6b0043",
        shade20: "#91005a",
        shade10: "#ac006b",
        primary: "#bf0077",
        tint10: "#c71885",
        tint20: "#ce3293",
        tint30: "#d957a8",
        tint40: "#eca5d1",
        tint50: "#f5cee6",
        tint60: "#fcf2f9"
      };
      plum = {
        shade50: "#13000c",
        shade40: "#240017",
        shade30: "#43002b",
        shade20: "#5a003b",
        shade10: "#6b0045",
        primary: "#77004d",
        tint10: "#87105d",
        tint20: "#98246f",
        tint30: "#ad4589",
        tint40: "#d696c0",
        tint50: "#e9c4dc",
        tint60: "#faf0f6"
      };
      beige = {
        shade50: "#141313",
        shade40: "#252323",
        shade30: "#444241",
        shade20: "#5d5958",
        shade10: "#6e6968",
        primary: "#7a7574",
        tint10: "#8a8584",
        tint20: "#9a9594",
        tint30: "#afabaa",
        tint40: "#d7d4d4",
        tint50: "#eae8e8",
        tint60: "#faf9f9"
      };
      mink = {
        shade50: "#0f0e0e",
        shade40: "#1c1b1a",
        shade30: "#343231",
        shade20: "#474443",
        shade10: "#54514f",
        primary: "#5d5a58",
        tint10: "#706d6b",
        tint20: "#84817e",
        tint30: "#9e9b99",
        tint40: "#cecccb",
        tint50: "#e5e4e3",
        tint60: "#f8f8f8"
      };
      platinum = {
        shade50: "#111314",
        shade40: "#1f2426",
        shade30: "#3b4447",
        shade20: "#505c60",
        shade10: "#5f6d71",
        primary: "#69797e",
        tint10: "#79898d",
        tint20: "#89989d",
        tint30: "#a0adb2",
        tint40: "#cdd6d8",
        tint50: "#e4e9ea",
        tint60: "#f8f9fa"
      };
      anchor = {
        shade50: "#090a0b",
        shade40: "#111315",
        shade30: "#202427",
        shade20: "#2b3135",
        shade10: "#333a3f",
        primary: "#394146",
        tint10: "#4d565c",
        tint20: "#626c72",
        tint30: "#808a90",
        tint40: "#bcc3c7",
        tint50: "#dbdfe1",
        tint60: "#f6f7f8"
      };
    }
  });

  // node_modules/@fluentui/tokens/lib/global/colorPalette.js
  var statusSharedColors, personaSharedColors, mappedStatusColors;
  var init_colorPalette = __esm({
    "node_modules/@fluentui/tokens/lib/global/colorPalette.js"() {
      init_colors();
      statusSharedColors = {
        red,
        green,
        darkOrange,
        yellow,
        berry,
        lightGreen,
        marigold
      };
      personaSharedColors = {
        darkRed,
        cranberry,
        pumpkin,
        peach,
        gold,
        brass,
        brown,
        forest,
        seafoam,
        darkGreen,
        lightTeal,
        teal,
        steel,
        blue,
        royalBlue,
        cornflower,
        navy,
        lavender,
        purple,
        grape,
        lilac,
        pink,
        magenta,
        plum,
        beige,
        mink,
        platinum,
        anchor
      };
      mappedStatusColors = {
        cranberry,
        green,
        orange
      };
    }
  });

  // node_modules/@fluentui/tokens/lib/sharedColorNames.js
  var statusSharedColorNames, personaSharedColorNames;
  var init_sharedColorNames = __esm({
    "node_modules/@fluentui/tokens/lib/sharedColorNames.js"() {
      statusSharedColorNames = [
        "red",
        "green",
        "darkOrange",
        "yellow",
        "berry",
        "lightGreen",
        "marigold"
      ];
      personaSharedColorNames = [
        "darkRed",
        "cranberry",
        "pumpkin",
        "peach",
        "gold",
        "brass",
        "brown",
        "forest",
        "seafoam",
        "darkGreen",
        "lightTeal",
        "teal",
        "steel",
        "blue",
        "royalBlue",
        "cornflower",
        "navy",
        "lavender",
        "purple",
        "grape",
        "lilac",
        "pink",
        "magenta",
        "plum",
        "beige",
        "mink",
        "platinum",
        "anchor"
      ];
    }
  });

  // node_modules/@fluentui/tokens/lib/statusColorMapping.js
  var statusColorMapping;
  var init_statusColorMapping = __esm({
    "node_modules/@fluentui/tokens/lib/statusColorMapping.js"() {
      statusColorMapping = {
        success: "green",
        warning: "orange",
        danger: "cranberry"
      };
    }
  });

  // node_modules/@fluentui/tokens/lib/global/borderRadius.js
  var borderRadius3;
  var init_borderRadius = __esm({
    "node_modules/@fluentui/tokens/lib/global/borderRadius.js"() {
      borderRadius3 = {
        borderRadiusNone: "0",
        borderRadiusSmall: "2px",
        borderRadiusMedium: "4px",
        borderRadiusLarge: "6px",
        borderRadiusXLarge: "8px",
        borderRadiusCircular: "10000px"
      };
    }
  });

  // node_modules/@fluentui/tokens/lib/global/curves.js
  var curves;
  var init_curves = __esm({
    "node_modules/@fluentui/tokens/lib/global/curves.js"() {
      curves = {
        curveAccelerateMax: "cubic-bezier(0.9,0.1,1,0.2)",
        curveAccelerateMid: "cubic-bezier(1,0,1,1)",
        curveAccelerateMin: "cubic-bezier(0.8,0,0.78,1)",
        curveDecelerateMax: "cubic-bezier(0.1,0.9,0.2,1)",
        curveDecelerateMid: "cubic-bezier(0,0,0,1)",
        curveDecelerateMin: "cubic-bezier(0.33,0,0.1,1)",
        curveEasyEaseMax: "cubic-bezier(0.8,0,0.2,1)",
        curveEasyEase: "cubic-bezier(0.33,0,0.67,1)",
        curveLinear: "cubic-bezier(0,0,1,1)"
      };
    }
  });

  // node_modules/@fluentui/tokens/lib/global/durations.js
  var durations;
  var init_durations = __esm({
    "node_modules/@fluentui/tokens/lib/global/durations.js"() {
      durations = {
        durationUltraFast: "50ms",
        durationFaster: "100ms",
        durationFast: "150ms",
        durationNormal: "200ms",
        durationGentle: "250ms",
        durationSlow: "300ms",
        durationSlower: "400ms",
        durationUltraSlow: "500ms"
      };
    }
  });

  // node_modules/@fluentui/tokens/lib/global/fonts.js
  var fontSizes, lineHeights, fontWeights, fontFamilies;
  var init_fonts = __esm({
    "node_modules/@fluentui/tokens/lib/global/fonts.js"() {
      fontSizes = {
        fontSizeBase100: "10px",
        fontSizeBase200: "12px",
        fontSizeBase300: "14px",
        fontSizeBase400: "16px",
        fontSizeBase500: "20px",
        fontSizeBase600: "24px",
        fontSizeHero700: "28px",
        fontSizeHero800: "32px",
        fontSizeHero900: "40px",
        fontSizeHero1000: "68px"
      };
      lineHeights = {
        lineHeightBase100: "14px",
        lineHeightBase200: "16px",
        lineHeightBase300: "20px",
        lineHeightBase400: "22px",
        lineHeightBase500: "28px",
        lineHeightBase600: "32px",
        lineHeightHero700: "36px",
        lineHeightHero800: "40px",
        lineHeightHero900: "52px",
        lineHeightHero1000: "92px"
      };
      fontWeights = {
        fontWeightRegular: 400,
        fontWeightMedium: 500,
        fontWeightSemibold: 600,
        fontWeightBold: 700
      };
      fontFamilies = {
        fontFamilyBase: "'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue', sans-serif",
        fontFamilyMonospace: "Consolas, 'Courier New', Courier, monospace",
        fontFamilyNumeric: "Bahnschrift, 'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue', sans-serif"
      };
    }
  });

  // node_modules/@fluentui/tokens/lib/global/spacings.js
  var spacings, horizontalSpacings, verticalSpacings;
  var init_spacings = __esm({
    "node_modules/@fluentui/tokens/lib/global/spacings.js"() {
      spacings = {
        none: "0",
        xxs: "2px",
        xs: "4px",
        sNudge: "6px",
        s: "8px",
        mNudge: "10px",
        m: "12px",
        l: "16px",
        xl: "20px",
        xxl: "24px",
        xxxl: "32px"
      };
      horizontalSpacings = {
        spacingHorizontalNone: spacings.none,
        spacingHorizontalXXS: spacings.xxs,
        spacingHorizontalXS: spacings.xs,
        spacingHorizontalSNudge: spacings.sNudge,
        spacingHorizontalS: spacings.s,
        spacingHorizontalMNudge: spacings.mNudge,
        spacingHorizontalM: spacings.m,
        spacingHorizontalL: spacings.l,
        spacingHorizontalXL: spacings.xl,
        spacingHorizontalXXL: spacings.xxl,
        spacingHorizontalXXXL: spacings.xxxl
      };
      verticalSpacings = {
        spacingVerticalNone: spacings.none,
        spacingVerticalXXS: spacings.xxs,
        spacingVerticalXS: spacings.xs,
        spacingVerticalSNudge: spacings.sNudge,
        spacingVerticalS: spacings.s,
        spacingVerticalMNudge: spacings.mNudge,
        spacingVerticalM: spacings.m,
        spacingVerticalL: spacings.l,
        spacingVerticalXL: spacings.xl,
        spacingVerticalXXL: spacings.xxl,
        spacingVerticalXXXL: spacings.xxxl
      };
    }
  });

  // node_modules/@fluentui/tokens/lib/global/strokeWidths.js
  var strokeWidths;
  var init_strokeWidths = __esm({
    "node_modules/@fluentui/tokens/lib/global/strokeWidths.js"() {
      strokeWidths = {
        strokeWidthThin: "1px",
        strokeWidthThick: "2px",
        strokeWidthThicker: "3px",
        strokeWidthThickest: "4px"
      };
    }
  });

  // node_modules/@fluentui/tokens/lib/tokens.js
  var tokens;
  var init_tokens = __esm({
    "node_modules/@fluentui/tokens/lib/tokens.js"() {
      tokens = {
        // Color tokens
        colorNeutralForeground1: "var(--colorNeutralForeground1)",
        colorNeutralForeground1Hover: "var(--colorNeutralForeground1Hover)",
        colorNeutralForeground1Pressed: "var(--colorNeutralForeground1Pressed)",
        colorNeutralForeground1Selected: "var(--colorNeutralForeground1Selected)",
        colorNeutralForeground2: "var(--colorNeutralForeground2)",
        colorNeutralForeground2Hover: "var(--colorNeutralForeground2Hover)",
        colorNeutralForeground2Pressed: "var(--colorNeutralForeground2Pressed)",
        colorNeutralForeground2Selected: "var(--colorNeutralForeground2Selected)",
        colorNeutralForeground2BrandHover: "var(--colorNeutralForeground2BrandHover)",
        colorNeutralForeground2BrandPressed: "var(--colorNeutralForeground2BrandPressed)",
        colorNeutralForeground2BrandSelected: "var(--colorNeutralForeground2BrandSelected)",
        colorNeutralForeground3: "var(--colorNeutralForeground3)",
        colorNeutralForeground3Hover: "var(--colorNeutralForeground3Hover)",
        colorNeutralForeground3Pressed: "var(--colorNeutralForeground3Pressed)",
        colorNeutralForeground3Selected: "var(--colorNeutralForeground3Selected)",
        colorNeutralForeground3BrandHover: "var(--colorNeutralForeground3BrandHover)",
        colorNeutralForeground3BrandPressed: "var(--colorNeutralForeground3BrandPressed)",
        colorNeutralForeground3BrandSelected: "var(--colorNeutralForeground3BrandSelected)",
        colorNeutralForeground4: "var(--colorNeutralForeground4)",
        colorNeutralForegroundDisabled: "var(--colorNeutralForegroundDisabled)",
        colorBrandForegroundLink: "var(--colorBrandForegroundLink)",
        colorBrandForegroundLinkHover: "var(--colorBrandForegroundLinkHover)",
        colorBrandForegroundLinkPressed: "var(--colorBrandForegroundLinkPressed)",
        colorBrandForegroundLinkSelected: "var(--colorBrandForegroundLinkSelected)",
        colorNeutralForeground2Link: "var(--colorNeutralForeground2Link)",
        colorNeutralForeground2LinkHover: "var(--colorNeutralForeground2LinkHover)",
        colorNeutralForeground2LinkPressed: "var(--colorNeutralForeground2LinkPressed)",
        colorNeutralForeground2LinkSelected: "var(--colorNeutralForeground2LinkSelected)",
        colorCompoundBrandForeground1: "var(--colorCompoundBrandForeground1)",
        colorCompoundBrandForeground1Hover: "var(--colorCompoundBrandForeground1Hover)",
        colorCompoundBrandForeground1Pressed: "var(--colorCompoundBrandForeground1Pressed)",
        colorNeutralForegroundOnBrand: "var(--colorNeutralForegroundOnBrand)",
        colorNeutralForegroundInverted: "var(--colorNeutralForegroundInverted)",
        colorNeutralForegroundInvertedHover: "var(--colorNeutralForegroundInvertedHover)",
        colorNeutralForegroundInvertedPressed: "var(--colorNeutralForegroundInvertedPressed)",
        colorNeutralForegroundInvertedSelected: "var(--colorNeutralForegroundInvertedSelected)",
        colorNeutralForegroundInverted2: "var(--colorNeutralForegroundInverted2)",
        colorNeutralForegroundStaticInverted: "var(--colorNeutralForegroundStaticInverted)",
        colorNeutralForegroundInvertedLink: "var(--colorNeutralForegroundInvertedLink)",
        colorNeutralForegroundInvertedLinkHover: "var(--colorNeutralForegroundInvertedLinkHover)",
        colorNeutralForegroundInvertedLinkPressed: "var(--colorNeutralForegroundInvertedLinkPressed)",
        colorNeutralForegroundInvertedLinkSelected: "var(--colorNeutralForegroundInvertedLinkSelected)",
        colorNeutralForegroundInvertedDisabled: "var(--colorNeutralForegroundInvertedDisabled)",
        colorBrandForeground1: "var(--colorBrandForeground1)",
        colorBrandForeground2: "var(--colorBrandForeground2)",
        colorBrandForeground2Hover: "var(--colorBrandForeground2Hover)",
        colorBrandForeground2Pressed: "var(--colorBrandForeground2Pressed)",
        colorNeutralForeground1Static: "var(--colorNeutralForeground1Static)",
        colorBrandForegroundInverted: "var(--colorBrandForegroundInverted)",
        colorBrandForegroundInvertedHover: "var(--colorBrandForegroundInvertedHover)",
        colorBrandForegroundInvertedPressed: "var(--colorBrandForegroundInvertedPressed)",
        colorBrandForegroundOnLight: "var(--colorBrandForegroundOnLight)",
        colorBrandForegroundOnLightHover: "var(--colorBrandForegroundOnLightHover)",
        colorBrandForegroundOnLightPressed: "var(--colorBrandForegroundOnLightPressed)",
        colorBrandForegroundOnLightSelected: "var(--colorBrandForegroundOnLightSelected)",
        colorNeutralBackground1: "var(--colorNeutralBackground1)",
        colorNeutralBackground1Hover: "var(--colorNeutralBackground1Hover)",
        colorNeutralBackground1Pressed: "var(--colorNeutralBackground1Pressed)",
        colorNeutralBackground1Selected: "var(--colorNeutralBackground1Selected)",
        colorNeutralBackground2: "var(--colorNeutralBackground2)",
        colorNeutralBackground2Hover: "var(--colorNeutralBackground2Hover)",
        colorNeutralBackground2Pressed: "var(--colorNeutralBackground2Pressed)",
        colorNeutralBackground2Selected: "var(--colorNeutralBackground2Selected)",
        colorNeutralBackground3: "var(--colorNeutralBackground3)",
        colorNeutralBackground3Hover: "var(--colorNeutralBackground3Hover)",
        colorNeutralBackground3Pressed: "var(--colorNeutralBackground3Pressed)",
        colorNeutralBackground3Selected: "var(--colorNeutralBackground3Selected)",
        colorNeutralBackground4: "var(--colorNeutralBackground4)",
        colorNeutralBackground4Hover: "var(--colorNeutralBackground4Hover)",
        colorNeutralBackground4Pressed: "var(--colorNeutralBackground4Pressed)",
        colorNeutralBackground4Selected: "var(--colorNeutralBackground4Selected)",
        colorNeutralBackground5: "var(--colorNeutralBackground5)",
        colorNeutralBackground5Hover: "var(--colorNeutralBackground5Hover)",
        colorNeutralBackground5Pressed: "var(--colorNeutralBackground5Pressed)",
        colorNeutralBackground5Selected: "var(--colorNeutralBackground5Selected)",
        colorNeutralBackground6: "var(--colorNeutralBackground6)",
        colorNeutralBackgroundInverted: "var(--colorNeutralBackgroundInverted)",
        colorNeutralBackgroundStatic: "var(--colorNeutralBackgroundStatic)",
        colorNeutralBackgroundAlpha: "var(--colorNeutralBackgroundAlpha)",
        colorNeutralBackgroundAlpha2: "var(--colorNeutralBackgroundAlpha2)",
        colorSubtleBackground: "var(--colorSubtleBackground)",
        colorSubtleBackgroundHover: "var(--colorSubtleBackgroundHover)",
        colorSubtleBackgroundPressed: "var(--colorSubtleBackgroundPressed)",
        colorSubtleBackgroundSelected: "var(--colorSubtleBackgroundSelected)",
        colorSubtleBackgroundLightAlphaHover: "var(--colorSubtleBackgroundLightAlphaHover)",
        colorSubtleBackgroundLightAlphaPressed: "var(--colorSubtleBackgroundLightAlphaPressed)",
        colorSubtleBackgroundLightAlphaSelected: "var(--colorSubtleBackgroundLightAlphaSelected)",
        colorSubtleBackgroundInverted: "var(--colorSubtleBackgroundInverted)",
        colorSubtleBackgroundInvertedHover: "var(--colorSubtleBackgroundInvertedHover)",
        colorSubtleBackgroundInvertedPressed: "var(--colorSubtleBackgroundInvertedPressed)",
        colorSubtleBackgroundInvertedSelected: "var(--colorSubtleBackgroundInvertedSelected)",
        colorTransparentBackground: "var(--colorTransparentBackground)",
        colorTransparentBackgroundHover: "var(--colorTransparentBackgroundHover)",
        colorTransparentBackgroundPressed: "var(--colorTransparentBackgroundPressed)",
        colorTransparentBackgroundSelected: "var(--colorTransparentBackgroundSelected)",
        colorNeutralBackgroundDisabled: "var(--colorNeutralBackgroundDisabled)",
        colorNeutralBackgroundInvertedDisabled: "var(--colorNeutralBackgroundInvertedDisabled)",
        colorNeutralStencil1: "var(--colorNeutralStencil1)",
        colorNeutralStencil2: "var(--colorNeutralStencil2)",
        colorNeutralStencil1Alpha: "var(--colorNeutralStencil1Alpha)",
        colorNeutralStencil2Alpha: "var(--colorNeutralStencil2Alpha)",
        colorBackgroundOverlay: "var(--colorBackgroundOverlay)",
        colorScrollbarOverlay: "var(--colorScrollbarOverlay)",
        colorBrandBackground: "var(--colorBrandBackground)",
        colorBrandBackgroundHover: "var(--colorBrandBackgroundHover)",
        colorBrandBackgroundPressed: "var(--colorBrandBackgroundPressed)",
        colorBrandBackgroundSelected: "var(--colorBrandBackgroundSelected)",
        colorCompoundBrandBackground: "var(--colorCompoundBrandBackground)",
        colorCompoundBrandBackgroundHover: "var(--colorCompoundBrandBackgroundHover)",
        colorCompoundBrandBackgroundPressed: "var(--colorCompoundBrandBackgroundPressed)",
        colorBrandBackgroundStatic: "var(--colorBrandBackgroundStatic)",
        colorBrandBackground2: "var(--colorBrandBackground2)",
        colorBrandBackground2Hover: "var(--colorBrandBackground2Hover)",
        colorBrandBackground2Pressed: "var(--colorBrandBackground2Pressed)",
        colorBrandBackground3Static: "var(--colorBrandBackground3Static)",
        colorBrandBackground4Static: "var(--colorBrandBackground4Static)",
        colorBrandBackgroundInverted: "var(--colorBrandBackgroundInverted)",
        colorBrandBackgroundInvertedHover: "var(--colorBrandBackgroundInvertedHover)",
        colorBrandBackgroundInvertedPressed: "var(--colorBrandBackgroundInvertedPressed)",
        colorBrandBackgroundInvertedSelected: "var(--colorBrandBackgroundInvertedSelected)",
        colorNeutralCardBackground: "var(--colorNeutralCardBackground)",
        colorNeutralCardBackgroundHover: "var(--colorNeutralCardBackgroundHover)",
        colorNeutralCardBackgroundPressed: "var(--colorNeutralCardBackgroundPressed)",
        colorNeutralCardBackgroundSelected: "var(--colorNeutralCardBackgroundSelected)",
        colorNeutralCardBackgroundDisabled: "var(--colorNeutralCardBackgroundDisabled)",
        colorNeutralStrokeAccessible: "var(--colorNeutralStrokeAccessible)",
        colorNeutralStrokeAccessibleHover: "var(--colorNeutralStrokeAccessibleHover)",
        colorNeutralStrokeAccessiblePressed: "var(--colorNeutralStrokeAccessiblePressed)",
        colorNeutralStrokeAccessibleSelected: "var(--colorNeutralStrokeAccessibleSelected)",
        colorNeutralStroke1: "var(--colorNeutralStroke1)",
        colorNeutralStroke1Hover: "var(--colorNeutralStroke1Hover)",
        colorNeutralStroke1Pressed: "var(--colorNeutralStroke1Pressed)",
        colorNeutralStroke1Selected: "var(--colorNeutralStroke1Selected)",
        colorNeutralStroke2: "var(--colorNeutralStroke2)",
        colorNeutralStroke3: "var(--colorNeutralStroke3)",
        colorNeutralStrokeSubtle: "var(--colorNeutralStrokeSubtle)",
        colorNeutralStrokeOnBrand: "var(--colorNeutralStrokeOnBrand)",
        colorNeutralStrokeOnBrand2: "var(--colorNeutralStrokeOnBrand2)",
        colorNeutralStrokeOnBrand2Hover: "var(--colorNeutralStrokeOnBrand2Hover)",
        colorNeutralStrokeOnBrand2Pressed: "var(--colorNeutralStrokeOnBrand2Pressed)",
        colorNeutralStrokeOnBrand2Selected: "var(--colorNeutralStrokeOnBrand2Selected)",
        colorBrandStroke1: "var(--colorBrandStroke1)",
        colorBrandStroke2: "var(--colorBrandStroke2)",
        colorBrandStroke2Hover: "var(--colorBrandStroke2Hover)",
        colorBrandStroke2Pressed: "var(--colorBrandStroke2Pressed)",
        colorBrandStroke2Contrast: "var(--colorBrandStroke2Contrast)",
        colorCompoundBrandStroke: "var(--colorCompoundBrandStroke)",
        colorCompoundBrandStrokeHover: "var(--colorCompoundBrandStrokeHover)",
        colorCompoundBrandStrokePressed: "var(--colorCompoundBrandStrokePressed)",
        colorNeutralStrokeDisabled: "var(--colorNeutralStrokeDisabled)",
        colorNeutralStrokeInvertedDisabled: "var(--colorNeutralStrokeInvertedDisabled)",
        colorTransparentStroke: "var(--colorTransparentStroke)",
        colorTransparentStrokeInteractive: "var(--colorTransparentStrokeInteractive)",
        colorTransparentStrokeDisabled: "var(--colorTransparentStrokeDisabled)",
        colorNeutralStrokeAlpha: "var(--colorNeutralStrokeAlpha)",
        colorNeutralStrokeAlpha2: "var(--colorNeutralStrokeAlpha2)",
        colorStrokeFocus1: "var(--colorStrokeFocus1)",
        colorStrokeFocus2: "var(--colorStrokeFocus2)",
        colorNeutralShadowAmbient: "var(--colorNeutralShadowAmbient)",
        colorNeutralShadowKey: "var(--colorNeutralShadowKey)",
        colorNeutralShadowAmbientLighter: "var(--colorNeutralShadowAmbientLighter)",
        colorNeutralShadowKeyLighter: "var(--colorNeutralShadowKeyLighter)",
        colorNeutralShadowAmbientDarker: "var(--colorNeutralShadowAmbientDarker)",
        colorNeutralShadowKeyDarker: "var(--colorNeutralShadowKeyDarker)",
        colorBrandShadowAmbient: "var(--colorBrandShadowAmbient)",
        colorBrandShadowKey: "var(--colorBrandShadowKey)",
        // Color palette tokens
        // Color palette red tokens
        colorPaletteRedBackground1: "var(--colorPaletteRedBackground1)",
        colorPaletteRedBackground2: "var(--colorPaletteRedBackground2)",
        colorPaletteRedBackground3: "var(--colorPaletteRedBackground3)",
        colorPaletteRedBorderActive: "var(--colorPaletteRedBorderActive)",
        colorPaletteRedBorder1: "var(--colorPaletteRedBorder1)",
        colorPaletteRedBorder2: "var(--colorPaletteRedBorder2)",
        colorPaletteRedForeground1: "var(--colorPaletteRedForeground1)",
        colorPaletteRedForeground2: "var(--colorPaletteRedForeground2)",
        colorPaletteRedForeground3: "var(--colorPaletteRedForeground3)",
        colorPaletteRedForegroundInverted: "var(--colorPaletteRedForegroundInverted)",
        // Color palette green tokens
        colorPaletteGreenBackground1: "var(--colorPaletteGreenBackground1)",
        colorPaletteGreenBackground2: "var(--colorPaletteGreenBackground2)",
        colorPaletteGreenBackground3: "var(--colorPaletteGreenBackground3)",
        colorPaletteGreenBorderActive: "var(--colorPaletteGreenBorderActive)",
        colorPaletteGreenBorder1: "var(--colorPaletteGreenBorder1)",
        colorPaletteGreenBorder2: "var(--colorPaletteGreenBorder2)",
        colorPaletteGreenForeground1: "var(--colorPaletteGreenForeground1)",
        colorPaletteGreenForeground2: "var(--colorPaletteGreenForeground2)",
        colorPaletteGreenForeground3: "var(--colorPaletteGreenForeground3)",
        colorPaletteGreenForegroundInverted: "var(--colorPaletteGreenForegroundInverted)",
        // Color palette dark orange tokens
        colorPaletteDarkOrangeBackground1: "var(--colorPaletteDarkOrangeBackground1)",
        colorPaletteDarkOrangeBackground2: "var(--colorPaletteDarkOrangeBackground2)",
        colorPaletteDarkOrangeBackground3: "var(--colorPaletteDarkOrangeBackground3)",
        colorPaletteDarkOrangeBorderActive: "var(--colorPaletteDarkOrangeBorderActive)",
        colorPaletteDarkOrangeBorder1: "var(--colorPaletteDarkOrangeBorder1)",
        colorPaletteDarkOrangeBorder2: "var(--colorPaletteDarkOrangeBorder2)",
        colorPaletteDarkOrangeForeground1: "var(--colorPaletteDarkOrangeForeground1)",
        colorPaletteDarkOrangeForeground2: "var(--colorPaletteDarkOrangeForeground2)",
        colorPaletteDarkOrangeForeground3: "var(--colorPaletteDarkOrangeForeground3)",
        // Color palette yellow tokens
        colorPaletteYellowBackground1: "var(--colorPaletteYellowBackground1)",
        colorPaletteYellowBackground2: "var(--colorPaletteYellowBackground2)",
        colorPaletteYellowBackground3: "var(--colorPaletteYellowBackground3)",
        colorPaletteYellowBorderActive: "var(--colorPaletteYellowBorderActive)",
        colorPaletteYellowBorder1: "var(--colorPaletteYellowBorder1)",
        colorPaletteYellowBorder2: "var(--colorPaletteYellowBorder2)",
        colorPaletteYellowForeground1: "var(--colorPaletteYellowForeground1)",
        colorPaletteYellowForeground2: "var(--colorPaletteYellowForeground2)",
        colorPaletteYellowForeground3: "var(--colorPaletteYellowForeground3)",
        colorPaletteYellowForegroundInverted: "var(--colorPaletteYellowForegroundInverted)",
        // Color palette berry tokens
        colorPaletteBerryBackground1: "var(--colorPaletteBerryBackground1)",
        colorPaletteBerryBackground2: "var(--colorPaletteBerryBackground2)",
        colorPaletteBerryBackground3: "var(--colorPaletteBerryBackground3)",
        colorPaletteBerryBorderActive: "var(--colorPaletteBerryBorderActive)",
        colorPaletteBerryBorder1: "var(--colorPaletteBerryBorder1)",
        colorPaletteBerryBorder2: "var(--colorPaletteBerryBorder2)",
        colorPaletteBerryForeground1: "var(--colorPaletteBerryForeground1)",
        colorPaletteBerryForeground2: "var(--colorPaletteBerryForeground2)",
        colorPaletteBerryForeground3: "var(--colorPaletteBerryForeground3)",
        // Color palette marigold tokens
        colorPaletteMarigoldBackground1: "var(--colorPaletteMarigoldBackground1)",
        colorPaletteMarigoldBackground2: "var(--colorPaletteMarigoldBackground2)",
        colorPaletteMarigoldBackground3: "var(--colorPaletteMarigoldBackground3)",
        colorPaletteMarigoldBorderActive: "var(--colorPaletteMarigoldBorderActive)",
        colorPaletteMarigoldBorder1: "var(--colorPaletteMarigoldBorder1)",
        colorPaletteMarigoldBorder2: "var(--colorPaletteMarigoldBorder2)",
        colorPaletteMarigoldForeground1: "var(--colorPaletteMarigoldForeground1)",
        colorPaletteMarigoldForeground2: "var(--colorPaletteMarigoldForeground2)",
        colorPaletteMarigoldForeground3: "var(--colorPaletteMarigoldForeground3)",
        // Color palette light green tokens
        colorPaletteLightGreenBackground1: "var(--colorPaletteLightGreenBackground1)",
        colorPaletteLightGreenBackground2: "var(--colorPaletteLightGreenBackground2)",
        colorPaletteLightGreenBackground3: "var(--colorPaletteLightGreenBackground3)",
        colorPaletteLightGreenBorderActive: "var(--colorPaletteLightGreenBorderActive)",
        colorPaletteLightGreenBorder1: "var(--colorPaletteLightGreenBorder1)",
        colorPaletteLightGreenBorder2: "var(--colorPaletteLightGreenBorder2)",
        colorPaletteLightGreenForeground1: "var(--colorPaletteLightGreenForeground1)",
        colorPaletteLightGreenForeground2: "var(--colorPaletteLightGreenForeground2)",
        colorPaletteLightGreenForeground3: "var(--colorPaletteLightGreenForeground3)",
        // Color palette anchor tokens
        colorPaletteAnchorBackground2: "var(--colorPaletteAnchorBackground2)",
        colorPaletteAnchorBorderActive: "var(--colorPaletteAnchorBorderActive)",
        colorPaletteAnchorForeground2: "var(--colorPaletteAnchorForeground2)",
        // Color palette beige tokens
        colorPaletteBeigeBackground2: "var(--colorPaletteBeigeBackground2)",
        colorPaletteBeigeBorderActive: "var(--colorPaletteBeigeBorderActive)",
        colorPaletteBeigeForeground2: "var(--colorPaletteBeigeForeground2)",
        // Color palette blue tokens
        colorPaletteBlueBackground2: "var(--colorPaletteBlueBackground2)",
        colorPaletteBlueBorderActive: "var(--colorPaletteBlueBorderActive)",
        colorPaletteBlueForeground2: "var(--colorPaletteBlueForeground2)",
        // Color palette brass tokens
        colorPaletteBrassBackground2: "var(--colorPaletteBrassBackground2)",
        colorPaletteBrassBorderActive: "var(--colorPaletteBrassBorderActive)",
        colorPaletteBrassForeground2: "var(--colorPaletteBrassForeground2)",
        // Color palette brown tokens
        colorPaletteBrownBackground2: "var(--colorPaletteBrownBackground2)",
        colorPaletteBrownBorderActive: "var(--colorPaletteBrownBorderActive)",
        colorPaletteBrownForeground2: "var(--colorPaletteBrownForeground2)",
        // Color palette cornflower tokens
        colorPaletteCornflowerBackground2: "var(--colorPaletteCornflowerBackground2)",
        colorPaletteCornflowerBorderActive: "var(--colorPaletteCornflowerBorderActive)",
        colorPaletteCornflowerForeground2: "var(--colorPaletteCornflowerForeground2)",
        // Color palette cranberry tokens
        colorPaletteCranberryBackground2: "var(--colorPaletteCranberryBackground2)",
        colorPaletteCranberryBorderActive: "var(--colorPaletteCranberryBorderActive)",
        colorPaletteCranberryForeground2: "var(--colorPaletteCranberryForeground2)",
        // Color palette dark green tokens
        colorPaletteDarkGreenBackground2: "var(--colorPaletteDarkGreenBackground2)",
        colorPaletteDarkGreenBorderActive: "var(--colorPaletteDarkGreenBorderActive)",
        colorPaletteDarkGreenForeground2: "var(--colorPaletteDarkGreenForeground2)",
        // Color palette dark red tokens
        colorPaletteDarkRedBackground2: "var(--colorPaletteDarkRedBackground2)",
        colorPaletteDarkRedBorderActive: "var(--colorPaletteDarkRedBorderActive)",
        colorPaletteDarkRedForeground2: "var(--colorPaletteDarkRedForeground2)",
        // Color palette forest tokens
        colorPaletteForestBackground2: "var(--colorPaletteForestBackground2)",
        colorPaletteForestBorderActive: "var(--colorPaletteForestBorderActive)",
        colorPaletteForestForeground2: "var(--colorPaletteForestForeground2)",
        // Color palette gold tokens
        colorPaletteGoldBackground2: "var(--colorPaletteGoldBackground2)",
        colorPaletteGoldBorderActive: "var(--colorPaletteGoldBorderActive)",
        colorPaletteGoldForeground2: "var(--colorPaletteGoldForeground2)",
        // Color palette grape tokens
        colorPaletteGrapeBackground2: "var(--colorPaletteGrapeBackground2)",
        colorPaletteGrapeBorderActive: "var(--colorPaletteGrapeBorderActive)",
        colorPaletteGrapeForeground2: "var(--colorPaletteGrapeForeground2)",
        // Color palette lavender tokens
        colorPaletteLavenderBackground2: "var(--colorPaletteLavenderBackground2)",
        colorPaletteLavenderBorderActive: "var(--colorPaletteLavenderBorderActive)",
        colorPaletteLavenderForeground2: "var(--colorPaletteLavenderForeground2)",
        // Color palette light teal tokens
        colorPaletteLightTealBackground2: "var(--colorPaletteLightTealBackground2)",
        colorPaletteLightTealBorderActive: "var(--colorPaletteLightTealBorderActive)",
        colorPaletteLightTealForeground2: "var(--colorPaletteLightTealForeground2)",
        // Color palette lilac tokens
        colorPaletteLilacBackground2: "var(--colorPaletteLilacBackground2)",
        colorPaletteLilacBorderActive: "var(--colorPaletteLilacBorderActive)",
        colorPaletteLilacForeground2: "var(--colorPaletteLilacForeground2)",
        // Color palette magenta tokens
        colorPaletteMagentaBackground2: "var(--colorPaletteMagentaBackground2)",
        colorPaletteMagentaBorderActive: "var(--colorPaletteMagentaBorderActive)",
        colorPaletteMagentaForeground2: "var(--colorPaletteMagentaForeground2)",
        // Color palette mink tokens
        colorPaletteMinkBackground2: "var(--colorPaletteMinkBackground2)",
        colorPaletteMinkBorderActive: "var(--colorPaletteMinkBorderActive)",
        colorPaletteMinkForeground2: "var(--colorPaletteMinkForeground2)",
        // Color palette navy tokens
        colorPaletteNavyBackground2: "var(--colorPaletteNavyBackground2)",
        colorPaletteNavyBorderActive: "var(--colorPaletteNavyBorderActive)",
        colorPaletteNavyForeground2: "var(--colorPaletteNavyForeground2)",
        // Color palette peach tokens
        colorPalettePeachBackground2: "var(--colorPalettePeachBackground2)",
        colorPalettePeachBorderActive: "var(--colorPalettePeachBorderActive)",
        colorPalettePeachForeground2: "var(--colorPalettePeachForeground2)",
        // Color palette pink tokens
        colorPalettePinkBackground2: "var(--colorPalettePinkBackground2)",
        colorPalettePinkBorderActive: "var(--colorPalettePinkBorderActive)",
        colorPalettePinkForeground2: "var(--colorPalettePinkForeground2)",
        // Color palette platinum tokens
        colorPalettePlatinumBackground2: "var(--colorPalettePlatinumBackground2)",
        colorPalettePlatinumBorderActive: "var(--colorPalettePlatinumBorderActive)",
        colorPalettePlatinumForeground2: "var(--colorPalettePlatinumForeground2)",
        // Color palette plum tokens
        colorPalettePlumBackground2: "var(--colorPalettePlumBackground2)",
        colorPalettePlumBorderActive: "var(--colorPalettePlumBorderActive)",
        colorPalettePlumForeground2: "var(--colorPalettePlumForeground2)",
        // Color palette pumpkin tokens
        colorPalettePumpkinBackground2: "var(--colorPalettePumpkinBackground2)",
        colorPalettePumpkinBorderActive: "var(--colorPalettePumpkinBorderActive)",
        colorPalettePumpkinForeground2: "var(--colorPalettePumpkinForeground2)",
        // Color palette purple tokens
        colorPalettePurpleBackground2: "var(--colorPalettePurpleBackground2)",
        colorPalettePurpleBorderActive: "var(--colorPalettePurpleBorderActive)",
        colorPalettePurpleForeground2: "var(--colorPalettePurpleForeground2)",
        // Color palette royal blue tokens
        colorPaletteRoyalBlueBackground2: "var(--colorPaletteRoyalBlueBackground2)",
        colorPaletteRoyalBlueBorderActive: "var(--colorPaletteRoyalBlueBorderActive)",
        colorPaletteRoyalBlueForeground2: "var(--colorPaletteRoyalBlueForeground2)",
        // Color palette seafoam tokens
        colorPaletteSeafoamBackground2: "var(--colorPaletteSeafoamBackground2)",
        colorPaletteSeafoamBorderActive: "var(--colorPaletteSeafoamBorderActive)",
        colorPaletteSeafoamForeground2: "var(--colorPaletteSeafoamForeground2)",
        // Color palette steel tokens
        colorPaletteSteelBackground2: "var(--colorPaletteSteelBackground2)",
        colorPaletteSteelBorderActive: "var(--colorPaletteSteelBorderActive)",
        colorPaletteSteelForeground2: "var(--colorPaletteSteelForeground2)",
        // Color palette teal tokens
        colorPaletteTealBackground2: "var(--colorPaletteTealBackground2)",
        colorPaletteTealBorderActive: "var(--colorPaletteTealBorderActive)",
        colorPaletteTealForeground2: "var(--colorPaletteTealForeground2)",
        // Color status success tokens
        colorStatusSuccessBackground1: "var(--colorStatusSuccessBackground1)",
        colorStatusSuccessBackground2: "var(--colorStatusSuccessBackground2)",
        colorStatusSuccessBackground3: "var(--colorStatusSuccessBackground3)",
        colorStatusSuccessForeground1: "var(--colorStatusSuccessForeground1)",
        colorStatusSuccessForeground2: "var(--colorStatusSuccessForeground2)",
        colorStatusSuccessForeground3: "var(--colorStatusSuccessForeground3)",
        colorStatusSuccessForegroundInverted: "var(--colorStatusSuccessForegroundInverted)",
        colorStatusSuccessBorderActive: "var(--colorStatusSuccessBorderActive)",
        colorStatusSuccessBorder1: "var(--colorStatusSuccessBorder1)",
        colorStatusSuccessBorder2: "var(--colorStatusSuccessBorder2)",
        // Color status warning tokens
        colorStatusWarningBackground1: "var(--colorStatusWarningBackground1)",
        colorStatusWarningBackground2: "var(--colorStatusWarningBackground2)",
        colorStatusWarningBackground3: "var(--colorStatusWarningBackground3)",
        colorStatusWarningForeground1: "var(--colorStatusWarningForeground1)",
        colorStatusWarningForeground2: "var(--colorStatusWarningForeground2)",
        colorStatusWarningForeground3: "var(--colorStatusWarningForeground3)",
        colorStatusWarningForegroundInverted: "var(--colorStatusWarningForegroundInverted)",
        colorStatusWarningBorderActive: "var(--colorStatusWarningBorderActive)",
        colorStatusWarningBorder1: "var(--colorStatusWarningBorder1)",
        colorStatusWarningBorder2: "var(--colorStatusWarningBorder2)",
        // Color status danger tokens
        colorStatusDangerBackground1: "var(--colorStatusDangerBackground1)",
        colorStatusDangerBackground2: "var(--colorStatusDangerBackground2)",
        colorStatusDangerBackground3: "var(--colorStatusDangerBackground3)",
        colorStatusDangerBackground3Hover: "var(--colorStatusDangerBackground3Hover)",
        colorStatusDangerBackground3Pressed: "var(--colorStatusDangerBackground3Pressed)",
        colorStatusDangerForeground1: "var(--colorStatusDangerForeground1)",
        colorStatusDangerForeground2: "var(--colorStatusDangerForeground2)",
        colorStatusDangerForeground3: "var(--colorStatusDangerForeground3)",
        colorStatusDangerForegroundInverted: "var(--colorStatusDangerForegroundInverted)",
        colorStatusDangerBorderActive: "var(--colorStatusDangerBorderActive)",
        colorStatusDangerBorder1: "var(--colorStatusDangerBorder1)",
        colorStatusDangerBorder2: "var(--colorStatusDangerBorder2)",
        // Border radius tokens
        borderRadiusNone: "var(--borderRadiusNone)",
        borderRadiusSmall: "var(--borderRadiusSmall)",
        borderRadiusMedium: "var(--borderRadiusMedium)",
        borderRadiusLarge: "var(--borderRadiusLarge)",
        borderRadiusXLarge: "var(--borderRadiusXLarge)",
        borderRadiusCircular: "var(--borderRadiusCircular)",
        // Font family tokens
        fontFamilyBase: "var(--fontFamilyBase)",
        fontFamilyMonospace: "var(--fontFamilyMonospace)",
        fontFamilyNumeric: "var(--fontFamilyNumeric)",
        // Font size tokens
        fontSizeBase100: "var(--fontSizeBase100)",
        fontSizeBase200: "var(--fontSizeBase200)",
        fontSizeBase300: "var(--fontSizeBase300)",
        fontSizeBase400: "var(--fontSizeBase400)",
        fontSizeBase500: "var(--fontSizeBase500)",
        fontSizeBase600: "var(--fontSizeBase600)",
        fontSizeHero700: "var(--fontSizeHero700)",
        fontSizeHero800: "var(--fontSizeHero800)",
        fontSizeHero900: "var(--fontSizeHero900)",
        fontSizeHero1000: "var(--fontSizeHero1000)",
        // Font weight tokens
        fontWeightRegular: "var(--fontWeightRegular)",
        fontWeightMedium: "var(--fontWeightMedium)",
        fontWeightSemibold: "var(--fontWeightSemibold)",
        fontWeightBold: "var(--fontWeightBold)",
        // Line height tokens
        lineHeightBase100: "var(--lineHeightBase100)",
        lineHeightBase200: "var(--lineHeightBase200)",
        lineHeightBase300: "var(--lineHeightBase300)",
        lineHeightBase400: "var(--lineHeightBase400)",
        lineHeightBase500: "var(--lineHeightBase500)",
        lineHeightBase600: "var(--lineHeightBase600)",
        lineHeightHero700: "var(--lineHeightHero700)",
        lineHeightHero800: "var(--lineHeightHero800)",
        lineHeightHero900: "var(--lineHeightHero900)",
        lineHeightHero1000: "var(--lineHeightHero1000)",
        // Shadow tokens
        shadow2: "var(--shadow2)",
        shadow4: "var(--shadow4)",
        shadow8: "var(--shadow8)",
        shadow16: "var(--shadow16)",
        shadow28: "var(--shadow28)",
        shadow64: "var(--shadow64)",
        // Shadow brand tokens
        shadow2Brand: "var(--shadow2Brand)",
        shadow4Brand: "var(--shadow4Brand)",
        shadow8Brand: "var(--shadow8Brand)",
        shadow16Brand: "var(--shadow16Brand)",
        shadow28Brand: "var(--shadow28Brand)",
        shadow64Brand: "var(--shadow64Brand)",
        // Stroke width tokens
        strokeWidthThin: "var(--strokeWidthThin)",
        strokeWidthThick: "var(--strokeWidthThick)",
        strokeWidthThicker: "var(--strokeWidthThicker)",
        strokeWidthThickest: "var(--strokeWidthThickest)",
        // Spacings
        spacingHorizontalNone: "var(--spacingHorizontalNone)",
        spacingHorizontalXXS: "var(--spacingHorizontalXXS)",
        spacingHorizontalXS: "var(--spacingHorizontalXS)",
        spacingHorizontalSNudge: "var(--spacingHorizontalSNudge)",
        spacingHorizontalS: "var(--spacingHorizontalS)",
        spacingHorizontalMNudge: "var(--spacingHorizontalMNudge)",
        spacingHorizontalM: "var(--spacingHorizontalM)",
        spacingHorizontalL: "var(--spacingHorizontalL)",
        spacingHorizontalXL: "var(--spacingHorizontalXL)",
        spacingHorizontalXXL: "var(--spacingHorizontalXXL)",
        spacingHorizontalXXXL: "var(--spacingHorizontalXXXL)",
        spacingVerticalNone: "var(--spacingVerticalNone)",
        spacingVerticalXXS: "var(--spacingVerticalXXS)",
        spacingVerticalXS: "var(--spacingVerticalXS)",
        spacingVerticalSNudge: "var(--spacingVerticalSNudge)",
        spacingVerticalS: "var(--spacingVerticalS)",
        spacingVerticalMNudge: "var(--spacingVerticalMNudge)",
        spacingVerticalM: "var(--spacingVerticalM)",
        spacingVerticalL: "var(--spacingVerticalL)",
        spacingVerticalXL: "var(--spacingVerticalXL)",
        spacingVerticalXXL: "var(--spacingVerticalXXL)",
        spacingVerticalXXXL: "var(--spacingVerticalXXXL)",
        // Durations
        durationUltraFast: "var(--durationUltraFast)",
        durationFaster: "var(--durationFaster)",
        durationFast: "var(--durationFast)",
        durationNormal: "var(--durationNormal)",
        durationGentle: "var(--durationGentle)",
        durationSlow: "var(--durationSlow)",
        durationSlower: "var(--durationSlower)",
        durationUltraSlow: "var(--durationUltraSlow)",
        // Curves
        curveAccelerateMax: "var(--curveAccelerateMax)",
        curveAccelerateMid: "var(--curveAccelerateMid)",
        curveAccelerateMin: "var(--curveAccelerateMin)",
        curveDecelerateMax: "var(--curveDecelerateMax)",
        curveDecelerateMid: "var(--curveDecelerateMid)",
        curveDecelerateMin: "var(--curveDecelerateMin)",
        curveEasyEaseMax: "var(--curveEasyEaseMax)",
        curveEasyEase: "var(--curveEasyEase)",
        curveLinear: "var(--curveLinear)",
        /**
        * ZIndexes
        * Special case where the tokens contain default values
        * ZIndexes are not mandatory, so they are not included in the theme, but can be used as tokens with default values
        */
        /**
        * Elevation 0
        * Can be used for background elements, like surfaces
        */
        zIndexBackground: "var(--zIndexBackground, 0)",
        /**
        * Elevation 2
        * Can be used content that is on top of the background, like cards
        */
        zIndexContent: "var(--zIndexContent, 1)",
        /**
        * Elevation 4
        * Can be used for overlays, like the backdrop of a modal
        */
        zIndexOverlay: "var(--zIndexOverlay, 1000)",
        /**
        * Elevation 8
        * Can be used for popups, like modals and drawers
        */
        zIndexPopup: "var(--zIndexPopup, 2000)",
        /**
        * Elevation 16
        * Can be used for messages, like snackbars and toasts
        */
        zIndexMessages: "var(--zIndexMessages, 3000)",
        /**
        * Elevation 28
        * Can be used for floating elements, like dropdowns
        */
        zIndexFloating: "var(--zIndexFloating, 4000)",
        /**
        * Elevation 64
        * Can be used for high priority floating elements, like tooltips
        */
        zIndexPriority: "var(--zIndexPriority, 5000)",
        /**
        * Special elevation
        * Can be used for elements that need to be above everything else, like debug overlays
        */
        zIndexDebug: "var(--zIndexDebug, 6000)"
      };
    }
  });

  // node_modules/@fluentui/tokens/lib/global/index.js
  var init_global = __esm({
    "node_modules/@fluentui/tokens/lib/global/index.js"() {
      init_borderRadius();
      init_fonts();
      init_strokeWidths();
    }
  });

  // node_modules/@fluentui/tokens/lib/utils/shadows.js
  function createShadowTokens(ambientColor, keyColor, tokenSuffix = "") {
    return {
      [`shadow2${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 1px 2px ${keyColor}`,
      [`shadow4${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 2px 4px ${keyColor}`,
      [`shadow8${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 4px 8px ${keyColor}`,
      [`shadow16${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 8px 16px ${keyColor}`,
      [`shadow28${tokenSuffix}`]: `0 0 8px ${ambientColor}, 0 14px 28px ${keyColor}`,
      [`shadow64${tokenSuffix}`]: `0 0 8px ${ambientColor}, 0 32px 64px ${keyColor}`
    };
  }
  var init_shadows = __esm({
    "node_modules/@fluentui/tokens/lib/utils/shadows.js"() {
    }
  });

  // node_modules/@fluentui/tokens/lib/global/brandColors.js
  var brandTeams;
  var init_brandColors = __esm({
    "node_modules/@fluentui/tokens/lib/global/brandColors.js"() {
      brandTeams = {
        10: `#2b2b40`,
        20: `#2f2f4a`,
        30: `#333357`,
        40: `#383966`,
        50: `#3d3e78`,
        60: `#444791`,
        70: `#4f52b2`,
        80: `#5b5fc7`,
        90: `#7579eb`,
        100: `#7f85f5`,
        110: `#9299f7`,
        120: `#aab1fa`,
        130: `#b6bcfa`,
        140: `#c5cbfa`,
        150: `#dce0fa`,
        160: `#e8ebfa`
      };
    }
  });

  // node_modules/@fluentui/tokens/lib/alias/teamsFontFamilies.js
  var fontFamilies2;
  var init_teamsFontFamilies = __esm({
    "node_modules/@fluentui/tokens/lib/alias/teamsFontFamilies.js"() {
      init_fonts();
      fontFamilies2 = {
        ...fontFamilies,
        fontFamilyBase: '-apple-system, BlinkMacSystemFont, "Segoe UI", system-ui, "Apple Color Emoji", "Segoe UI Emoji", sans-serif'
      };
    }
  });

  // node_modules/@fluentui/tokens/lib/alias/darkColorPalette.js
  var statusColorPaletteTokens, personaColorPaletteTokens, colorPaletteTokens, colorStatusTokens;
  var init_darkColorPalette = __esm({
    "node_modules/@fluentui/tokens/lib/alias/darkColorPalette.js"() {
      init_colorPalette();
      init_sharedColorNames();
      init_statusColorMapping();
      statusColorPaletteTokens = statusSharedColorNames.reduce((acc, sharedColor) => {
        const color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1);
        const sharedColorTokens = {
          [`colorPalette${color}Background1`]: statusSharedColors[sharedColor].shade40,
          [`colorPalette${color}Background2`]: statusSharedColors[sharedColor].shade30,
          [`colorPalette${color}Background3`]: statusSharedColors[sharedColor].primary,
          [`colorPalette${color}Foreground1`]: statusSharedColors[sharedColor].tint30,
          [`colorPalette${color}Foreground2`]: statusSharedColors[sharedColor].tint40,
          [`colorPalette${color}Foreground3`]: statusSharedColors[sharedColor].tint20,
          [`colorPalette${color}BorderActive`]: statusSharedColors[sharedColor].tint30,
          [`colorPalette${color}Border1`]: statusSharedColors[sharedColor].primary,
          [`colorPalette${color}Border2`]: statusSharedColors[sharedColor].tint20
        };
        return Object.assign(acc, sharedColorTokens);
      }, {});
      statusColorPaletteTokens.colorPaletteRedForeground3 = statusSharedColors.red.tint30;
      statusColorPaletteTokens.colorPaletteRedBorder2 = statusSharedColors.red.tint30;
      statusColorPaletteTokens.colorPaletteGreenForeground3 = statusSharedColors.green.tint40;
      statusColorPaletteTokens.colorPaletteGreenBorder2 = statusSharedColors.green.tint40;
      statusColorPaletteTokens.colorPaletteDarkOrangeForeground3 = statusSharedColors.darkOrange.tint30;
      statusColorPaletteTokens.colorPaletteDarkOrangeBorder2 = statusSharedColors.darkOrange.tint30;
      statusColorPaletteTokens.colorPaletteRedForegroundInverted = statusSharedColors.red.primary;
      statusColorPaletteTokens.colorPaletteGreenForegroundInverted = statusSharedColors.green.primary;
      statusColorPaletteTokens.colorPaletteYellowForegroundInverted = statusSharedColors.yellow.shade30;
      personaColorPaletteTokens = personaSharedColorNames.reduce((acc, sharedColor) => {
        const color = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1);
        const sharedColorTokens = {
          [`colorPalette${color}Background2`]: personaSharedColors[sharedColor].shade30,
          [`colorPalette${color}Foreground2`]: personaSharedColors[sharedColor].tint40,
          [`colorPalette${color}BorderActive`]: personaSharedColors[sharedColor].tint30
        };
        return Object.assign(acc, sharedColorTokens);
      }, {});
      personaColorPaletteTokens.colorPaletteDarkRedBackground2 = personaSharedColors.darkRed.shade20;
      personaColorPaletteTokens.colorPalettePlumBackground2 = personaSharedColors.plum.shade20;
      colorPaletteTokens = {
        ...statusColorPaletteTokens,
        ...personaColorPaletteTokens
      };
      colorStatusTokens = Object.entries(statusColorMapping).reduce((acc, [statusColor, sharedColor]) => {
        const color = statusColor.slice(0, 1).toUpperCase() + statusColor.slice(1);
        const statusColorTokens = {
          [`colorStatus${color}Background1`]: mappedStatusColors[sharedColor].shade40,
          [`colorStatus${color}Background2`]: mappedStatusColors[sharedColor].shade30,
          [`colorStatus${color}Background3`]: mappedStatusColors[sharedColor].primary,
          [`colorStatus${color}Foreground1`]: mappedStatusColors[sharedColor].tint30,
          [`colorStatus${color}Foreground2`]: mappedStatusColors[sharedColor].tint40,
          [`colorStatus${color}Foreground3`]: mappedStatusColors[sharedColor].tint20,
          [`colorStatus${color}BorderActive`]: mappedStatusColors[sharedColor].tint30,
          [`colorStatus${color}ForegroundInverted`]: mappedStatusColors[sharedColor].shade10,
          [`colorStatus${color}Border1`]: mappedStatusColors[sharedColor].primary,
          [`colorStatus${color}Border2`]: mappedStatusColors[sharedColor].tint20
        };
        return Object.assign(acc, statusColorTokens);
      }, {});
      colorStatusTokens.colorStatusDangerBackground3Hover = mappedStatusColors[statusColorMapping.danger].shade10;
      colorStatusTokens.colorStatusDangerBackground3Pressed = mappedStatusColors[statusColorMapping.danger].shade20;
      colorStatusTokens.colorStatusDangerForeground3 = mappedStatusColors[statusColorMapping.danger].tint40;
      colorStatusTokens.colorStatusDangerBorder2 = mappedStatusColors[statusColorMapping.danger].tint30;
      colorStatusTokens.colorStatusSuccessForeground3 = mappedStatusColors[statusColorMapping.success].tint40;
      colorStatusTokens.colorStatusSuccessBorder2 = mappedStatusColors[statusColorMapping.success].tint40;
      colorStatusTokens.colorStatusWarningForegroundInverted = mappedStatusColors[statusColorMapping.warning].shade20;
    }
  });

  // node_modules/@fluentui/tokens/lib/alias/teamsDarkColor.js
  var generateColorTokens;
  var init_teamsDarkColor = __esm({
    "node_modules/@fluentui/tokens/lib/alias/teamsDarkColor.js"() {
      init_colors();
      generateColorTokens = (brand) => ({
        colorNeutralForeground1: white,
        colorNeutralForeground1Hover: white,
        colorNeutralForeground1Pressed: white,
        colorNeutralForeground1Selected: white,
        colorNeutralForeground2: grey[84],
        colorNeutralForeground2Hover: white,
        colorNeutralForeground2Pressed: white,
        colorNeutralForeground2Selected: white,
        colorNeutralForeground2BrandHover: brand[100],
        colorNeutralForeground2BrandPressed: brand[90],
        colorNeutralForeground2BrandSelected: brand[100],
        colorNeutralForeground3: grey[68],
        colorNeutralForeground3Hover: grey[84],
        colorNeutralForeground3Pressed: grey[84],
        colorNeutralForeground3Selected: grey[84],
        colorNeutralForeground3BrandHover: brand[100],
        colorNeutralForeground3BrandPressed: brand[90],
        colorNeutralForeground3BrandSelected: brand[100],
        colorNeutralForeground4: grey[60],
        colorNeutralForegroundDisabled: grey[36],
        colorNeutralForegroundInvertedDisabled: whiteAlpha[40],
        colorBrandForegroundLink: brand[100],
        colorBrandForegroundLinkHover: brand[110],
        colorBrandForegroundLinkPressed: brand[90],
        colorBrandForegroundLinkSelected: brand[100],
        colorNeutralForeground2Link: grey[84],
        colorNeutralForeground2LinkHover: white,
        colorNeutralForeground2LinkPressed: white,
        colorNeutralForeground2LinkSelected: white,
        colorCompoundBrandForeground1: brand[100],
        colorCompoundBrandForeground1Hover: brand[110],
        colorCompoundBrandForeground1Pressed: brand[90],
        colorBrandForeground1: brand[100],
        colorBrandForeground2: brand[120],
        colorBrandForeground2Hover: brand[130],
        colorBrandForeground2Pressed: brand[160],
        colorNeutralForeground1Static: grey[14],
        colorNeutralForegroundStaticInverted: white,
        colorNeutralForegroundInverted: grey[14],
        colorNeutralForegroundInvertedHover: grey[14],
        colorNeutralForegroundInvertedPressed: grey[14],
        colorNeutralForegroundInvertedSelected: grey[14],
        colorNeutralForegroundInverted2: grey[14],
        colorNeutralForegroundOnBrand: white,
        colorNeutralForegroundInvertedLink: white,
        colorNeutralForegroundInvertedLinkHover: white,
        colorNeutralForegroundInvertedLinkPressed: white,
        colorNeutralForegroundInvertedLinkSelected: white,
        colorBrandForegroundInverted: brand[80],
        colorBrandForegroundInvertedHover: brand[70],
        colorBrandForegroundInvertedPressed: brand[60],
        colorBrandForegroundOnLight: brand[80],
        colorBrandForegroundOnLightHover: brand[70],
        colorBrandForegroundOnLightPressed: brand[50],
        colorBrandForegroundOnLightSelected: brand[60],
        colorNeutralBackground1: grey[16],
        colorNeutralBackground1Hover: grey[24],
        colorNeutralBackground1Pressed: grey[12],
        colorNeutralBackground1Selected: grey[22],
        colorNeutralBackground2: grey[14],
        colorNeutralBackground2Hover: grey[22],
        colorNeutralBackground2Pressed: grey[10],
        colorNeutralBackground2Selected: grey[20],
        colorNeutralBackground3: grey[12],
        colorNeutralBackground3Hover: grey[20],
        colorNeutralBackground3Pressed: grey[8],
        colorNeutralBackground3Selected: grey[18],
        colorNeutralBackground4: grey[8],
        colorNeutralBackground4Hover: grey[16],
        colorNeutralBackground4Pressed: grey[4],
        colorNeutralBackground4Selected: grey[14],
        colorNeutralBackground5: grey[4],
        colorNeutralBackground5Hover: grey[12],
        colorNeutralBackground5Pressed: black,
        colorNeutralBackground5Selected: grey[10],
        colorNeutralBackground6: grey[20],
        colorNeutralBackgroundInverted: white,
        colorNeutralBackgroundStatic: grey[24],
        colorNeutralBackgroundAlpha: grey10Alpha[50],
        colorNeutralBackgroundAlpha2: grey12Alpha[70],
        colorSubtleBackground: "transparent",
        colorSubtleBackgroundHover: grey[22],
        colorSubtleBackgroundPressed: grey[18],
        colorSubtleBackgroundSelected: grey[20],
        colorSubtleBackgroundLightAlphaHover: grey14Alpha[80],
        colorSubtleBackgroundLightAlphaPressed: grey14Alpha[50],
        colorSubtleBackgroundLightAlphaSelected: "transparent",
        colorSubtleBackgroundInverted: "transparent",
        colorSubtleBackgroundInvertedHover: blackAlpha[10],
        colorSubtleBackgroundInvertedPressed: blackAlpha[30],
        colorSubtleBackgroundInvertedSelected: blackAlpha[20],
        colorTransparentBackground: "transparent",
        colorTransparentBackgroundHover: "transparent",
        colorTransparentBackgroundPressed: "transparent",
        colorTransparentBackgroundSelected: "transparent",
        colorNeutralBackgroundDisabled: grey[8],
        colorNeutralBackgroundInvertedDisabled: whiteAlpha[10],
        colorNeutralStencil1: grey[34],
        colorNeutralStencil2: grey[20],
        colorNeutralStencil1Alpha: whiteAlpha[10],
        colorNeutralStencil2Alpha: whiteAlpha[5],
        colorBackgroundOverlay: blackAlpha[50],
        colorScrollbarOverlay: whiteAlpha[60],
        colorBrandBackground: brand[70],
        colorBrandBackgroundHover: brand[80],
        colorBrandBackgroundPressed: brand[40],
        colorBrandBackgroundSelected: brand[60],
        colorCompoundBrandBackground: brand[100],
        colorCompoundBrandBackgroundHover: brand[110],
        colorCompoundBrandBackgroundPressed: brand[90],
        colorBrandBackgroundStatic: brand[80],
        colorBrandBackground2: brand[20],
        colorBrandBackground2Hover: brand[40],
        colorBrandBackground2Pressed: brand[10],
        colorBrandBackground3Static: brand[60],
        colorBrandBackground4Static: brand[40],
        colorBrandBackgroundInverted: white,
        colorBrandBackgroundInvertedHover: brand[160],
        colorBrandBackgroundInvertedPressed: brand[140],
        colorBrandBackgroundInvertedSelected: brand[150],
        colorNeutralCardBackground: grey[20],
        colorNeutralCardBackgroundHover: grey[24],
        colorNeutralCardBackgroundPressed: grey[18],
        colorNeutralCardBackgroundSelected: grey[22],
        colorNeutralCardBackgroundDisabled: grey[8],
        colorNeutralStrokeAccessible: grey[68],
        colorNeutralStrokeAccessibleHover: grey[74],
        colorNeutralStrokeAccessiblePressed: grey[70],
        colorNeutralStrokeAccessibleSelected: brand[100],
        colorNeutralStroke1: grey[40],
        colorNeutralStroke1Hover: grey[46],
        colorNeutralStroke1Pressed: grey[42],
        colorNeutralStroke1Selected: grey[44],
        colorNeutralStroke2: grey[32],
        colorNeutralStroke3: grey[24],
        colorNeutralStrokeSubtle: grey[4],
        colorNeutralStrokeOnBrand: grey[16],
        colorNeutralStrokeOnBrand2: white,
        colorNeutralStrokeOnBrand2Hover: white,
        colorNeutralStrokeOnBrand2Pressed: white,
        colorNeutralStrokeOnBrand2Selected: white,
        colorBrandStroke1: brand[100],
        colorBrandStroke2: brand[50],
        colorBrandStroke2Hover: brand[50],
        colorBrandStroke2Pressed: brand[30],
        colorBrandStroke2Contrast: brand[50],
        colorCompoundBrandStroke: brand[90],
        colorCompoundBrandStrokeHover: brand[100],
        colorCompoundBrandStrokePressed: brand[80],
        colorNeutralStrokeDisabled: grey[26],
        colorNeutralStrokeInvertedDisabled: whiteAlpha[40],
        colorTransparentStroke: "transparent",
        colorTransparentStrokeInteractive: "transparent",
        colorTransparentStrokeDisabled: "transparent",
        colorNeutralStrokeAlpha: whiteAlpha[10],
        colorNeutralStrokeAlpha2: whiteAlpha[20],
        colorStrokeFocus1: black,
        colorStrokeFocus2: white,
        colorNeutralShadowAmbient: "rgba(0,0,0,0.24)",
        colorNeutralShadowKey: "rgba(0,0,0,0.28)",
        colorNeutralShadowAmbientLighter: "rgba(0,0,0,0.12)",
        colorNeutralShadowKeyLighter: "rgba(0,0,0,0.14)",
        colorNeutralShadowAmbientDarker: "rgba(0,0,0,0.40)",
        colorNeutralShadowKeyDarker: "rgba(0,0,0,0.48)",
        colorBrandShadowAmbient: "rgba(0,0,0,0.30)",
        colorBrandShadowKey: "rgba(0,0,0,0.25)"
      });
    }
  });

  // node_modules/@fluentui/tokens/lib/utils/createTeamsDarkTheme.js
  var createTeamsDarkTheme;
  var init_createTeamsDarkTheme = __esm({
    "node_modules/@fluentui/tokens/lib/utils/createTeamsDarkTheme.js"() {
      init_darkColorPalette();
      init_teamsDarkColor();
      init_global();
      init_shadows();
      init_durations();
      init_curves();
      init_spacings();
      createTeamsDarkTheme = (brand) => {
        const colorTokens = generateColorTokens(brand);
        return {
          ...borderRadius3,
          ...fontSizes,
          ...lineHeights,
          ...fontFamilies,
          ...fontWeights,
          ...strokeWidths,
          ...horizontalSpacings,
          ...verticalSpacings,
          ...durations,
          ...curves,
          ...colorTokens,
          ...colorPaletteTokens,
          ...colorStatusTokens,
          ...createShadowTokens(colorTokens.colorNeutralShadowAmbient, colorTokens.colorNeutralShadowKey),
          ...createShadowTokens(colorTokens.colorBrandShadowAmbient, colorTokens.colorBrandShadowKey, "Brand")
        };
      };
    }
  });

  // node_modules/@fluentui/tokens/lib/themes/teams/darkTheme.js
  var teamsDarkTheme;
  var init_darkTheme = __esm({
    "node_modules/@fluentui/tokens/lib/themes/teams/darkTheme.js"() {
      init_createTeamsDarkTheme();
      init_brandColors();
      init_teamsFontFamilies();
      teamsDarkTheme = {
        ...createTeamsDarkTheme(brandTeams),
        ...fontFamilies2
      };
    }
  });

  // node_modules/@fluentui/tokens/lib/themes/teams/index.js
  var init_teams = __esm({
    "node_modules/@fluentui/tokens/lib/themes/teams/index.js"() {
      init_darkTheme();
    }
  });

  // node_modules/@fluentui/tokens/lib/themes/index.js
  var init_themes = __esm({
    "node_modules/@fluentui/tokens/lib/themes/index.js"() {
      init_teams();
    }
  });

  // node_modules/@fluentui/tokens/lib/index.js
  var init_lib3 = __esm({
    "node_modules/@fluentui/tokens/lib/index.js"() {
      init_themes();
      init_tokens();
    }
  });

  // node_modules/@fluentui/react-theme/lib/index.js
  var init_lib4 = __esm({
    "node_modules/@fluentui/react-theme/lib/index.js"() {
      init_lib3();
    }
  });

  // node_modules/@fluentui/react-tabster/lib/index.js
  var init_lib5 = __esm({
    "node_modules/@fluentui/react-tabster/lib/index.js"() {
      init_hooks2();
    }
  });

  // node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderStyles.styles.js
  var fluentProviderClassNames, useStyles, useFluentProviderStyles_unstable;
  var init_useFluentProviderStyles_styles = __esm({
    "node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderStyles.styles.js"() {
      init_index_esm();
      init_index_esm2();
      fluentProviderClassNames = {
        root: "fui-FluentProvider"
      };
      useStyles = /* @__PURE__ */ __styles({
        root: {
          sj55zd: "f19n0e5",
          De3pzq: "fxugw4r",
          fsow6f: ["f1o700av", "fes3tcz"],
          Bahqtrf: "fk6fouc",
          Be2twd7: "fkhj508",
          Bhrd7zp: "figsok6",
          Bg96gwp: "f1i3iumi"
        }
      }, {
        d: [".f19n0e5{color:var(--colorNeutralForeground1);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f1o700av{text-align:left;}", ".fes3tcz{text-align:right;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}"]
      });
      useFluentProviderStyles_unstable = (state) => {
        "use no memo";
        const renderer = useRenderer();
        const styles = useStyles({
          dir: state.dir,
          renderer
        });
        state.root.className = mergeClasses(fluentProviderClassNames.root, state.themeClassName, styles.root, state.root.className);
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderThemeStyleTag.js
  function useHandleSSRStyleElements(targetDocument, styleTagId) {
    React36.useState(() => {
      if (!targetDocument) {
        return;
      }
      const themeStyleElement = targetDocument.getElementById(styleTagId);
      if (themeStyleElement) {
        targetDocument.head.append(themeStyleElement);
      }
    });
  }
  var React36, useInsertionEffect4, createStyleTag, insertSheet, useFluentProviderThemeStyleTag;
  var init_useFluentProviderThemeStyleTag = __esm({
    "node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderThemeStyleTag.js"() {
      init_lib2();
      React36 = __toESM(require_react());
      init_createCSSRuleFromTheme();
      init_useFluentProviderStyles_styles();
      useInsertionEffect4 = React36["useInsertionEffect"] ? React36["useInsertionEffect"] : useIsomorphicLayoutEffect2;
      createStyleTag = (target, elementAttributes) => {
        if (!target) {
          return void 0;
        }
        const tag = target.createElement("style");
        Object.keys(elementAttributes).forEach((attrName) => {
          tag.setAttribute(attrName, elementAttributes[attrName]);
        });
        target.head.appendChild(tag);
        return tag;
      };
      insertSheet = (tag, rule) => {
        const sheet = tag.sheet;
        if (sheet) {
          if (sheet.cssRules.length > 0) {
            sheet.deleteRule(0);
          }
          sheet.insertRule(rule, 0);
        } else if (true) {
          console.error("FluentProvider: No sheet available on styleTag, styles will not be inserted into DOM.");
        }
      };
      useFluentProviderThemeStyleTag = (options) => {
        "use no memo";
        const { targetDocument, theme, rendererAttributes } = options;
        const styleTag = React36.useRef();
        const styleTagId = useId2(fluentProviderClassNames.root);
        const styleElementAttributes = rendererAttributes;
        const rule = React36.useMemo(() => createCSSRuleFromTheme(`.${styleTagId}`, theme), [
          theme,
          styleTagId
        ]);
        if (true) {
          React36.useMemo(() => {
            if (targetDocument) {
              const providerSelector = `.${fluentProviderClassNames.root}.${styleTagId}`;
              const providerElements = targetDocument.querySelectorAll(providerSelector);
              const isSSR = targetDocument.querySelector(`${providerSelector} > style[id="${styleTagId}"]`) !== null;
              const elementsCount = isSSR ? 1 : 0;
              if (providerElements.length > elementsCount) {
                console.error([
                  "@fluentui/react-provider: There are conflicting ids in your DOM.",
                  "Please make sure that you configured your application properly.",
                  "\n",
                  "\n",
                  "Configuration guide: https://aka.ms/fluentui-conflicting-ids"
                ].join(" "));
              }
            }
          }, []);
        }
        useHandleSSRStyleElements(targetDocument, styleTagId);
        useInsertionEffect4(() => {
          const ssrStyleElement = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.getElementById(styleTagId);
          if (ssrStyleElement) {
            styleTag.current = ssrStyleElement;
          } else {
            styleTag.current = createStyleTag(targetDocument, {
              ...styleElementAttributes,
              id: styleTagId
            });
            if (styleTag.current) {
              insertSheet(styleTag.current, rule);
            }
          }
          return () => {
            var _styleTag_current;
            (_styleTag_current = styleTag.current) === null || _styleTag_current === void 0 ? void 0 : _styleTag_current.remove();
          };
        }, [
          styleTagId,
          targetDocument,
          rule,
          styleElementAttributes
        ]);
        return {
          styleTagId,
          rule
        };
      };
    }
  });

  // node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProvider.js
  function shallowMerge(a, b) {
    if (a && b) {
      return {
        ...a,
        ...b
      };
    }
    if (a) {
      return a;
    }
    return b;
  }
  function useTheme() {
    return React37.useContext(ThemeContext);
  }
  var React37, DEFAULT_STYLE_HOOKS, DEFAULT_RENDERER_ATTRIBUTES, useFluentProvider_unstable;
  var init_useFluentProvider = __esm({
    "node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProvider.js"() {
      init_index_esm2();
      init_lib5();
      init_lib();
      init_lib2();
      React37 = __toESM(require_react());
      init_useFluentProviderThemeStyleTag();
      DEFAULT_STYLE_HOOKS = {};
      DEFAULT_RENDERER_ATTRIBUTES = {};
      useFluentProvider_unstable = (props, ref) => {
        "use no memo";
        const parentContext = useFluent();
        const parentTheme = useTheme();
        const parentOverrides = useOverrides();
        const parentCustomStyleHooks = React37.useContext(CustomStyleHooksContext) || DEFAULT_STYLE_HOOKS;
        const {
          applyStylesToPortals = true,
          // eslint-disable-next-line @typescript-eslint/naming-convention
          customStyleHooks_unstable,
          dir = parentContext.dir,
          targetDocument = parentContext.targetDocument,
          theme,
          overrides_unstable: overrides = {}
        } = props;
        const mergedTheme = shallowMerge(parentTheme, theme);
        const mergedOverrides = shallowMerge(parentOverrides, overrides);
        const mergedCustomStyleHooks = shallowMerge(parentCustomStyleHooks, customStyleHooks_unstable);
        const renderer = useRenderer();
        var _renderer_styleElementAttributes;
        const { styleTagId, rule } = useFluentProviderThemeStyleTag({
          theme: mergedTheme,
          targetDocument,
          rendererAttributes: (_renderer_styleElementAttributes = renderer.styleElementAttributes) !== null && _renderer_styleElementAttributes !== void 0 ? _renderer_styleElementAttributes : DEFAULT_RENDERER_ATTRIBUTES
        });
        if (true) {
          React37.useEffect(() => {
            if (mergedTheme === void 0) {
              console.warn([
                '@fluentui/react-provider: FluentProvider does not have your "theme" defined.',
                "Make sure that your top-level FluentProvider has set a `theme` prop or you're setting the theme in your child FluentProvider."
              ].join(" "));
            }
          }, []);
        }
        return {
          applyStylesToPortals,
          // eslint-disable-next-line @typescript-eslint/naming-convention
          customStyleHooks_unstable: mergedCustomStyleHooks,
          dir,
          targetDocument,
          theme: mergedTheme,
          // eslint-disable-next-line @typescript-eslint/naming-convention
          overrides_unstable: mergedOverrides,
          themeClassName: styleTagId,
          components: {
            root: "div"
          },
          root: slot_exports.always(getIntrinsicElementProps("div", {
            ...props,
            dir,
            // FIXME:
            // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`
            // but since it would be a breaking change to fix it, we are casting ref to it's proper type
            ref: useMergedRefs(ref, useFocusVisible({
              targetDocument
            }))
          }), {
            elementType: "div"
          }),
          serverStyleProps: {
            cssRule: rule,
            attributes: {
              ...renderer.styleElementAttributes,
              id: styleTagId
            }
          }
        };
      };
    }
  });

  // node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderContextValues.js
  function useFluentProviderContextValues_unstable(state) {
    const {
      applyStylesToPortals,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      customStyleHooks_unstable,
      dir,
      root,
      targetDocument,
      theme,
      themeClassName,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      overrides_unstable
    } = state;
    const provider = React38.useMemo(() => ({
      dir,
      targetDocument
    }), [
      dir,
      targetDocument
    ]);
    const [tooltip] = React38.useState(() => ({}));
    const iconDirection = React38.useMemo(() => ({
      textDirection: dir
    }), [
      dir
    ]);
    return {
      // eslint-disable-next-line @typescript-eslint/naming-convention
      customStyleHooks_unstable,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      overrides_unstable,
      provider,
      textDirection: dir,
      iconDirection,
      tooltip,
      theme,
      themeClassName: applyStylesToPortals ? root.className : themeClassName
    };
  }
  var React38;
  var init_useFluentProviderContextValues = __esm({
    "node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderContextValues.js"() {
      React38 = __toESM(require_react());
    }
  });

  // node_modules/@fluentui/react-provider/lib/components/FluentProvider/FluentProvider.js
  var React39, FluentProvider;
  var init_FluentProvider = __esm({
    "node_modules/@fluentui/react-provider/lib/components/FluentProvider/FluentProvider.js"() {
      React39 = __toESM(require_react());
      init_renderFluentProvider();
      init_useFluentProvider();
      init_useFluentProviderStyles_styles();
      init_useFluentProviderContextValues();
      FluentProvider = /* @__PURE__ */ React39.forwardRef((props, ref) => {
        const state = useFluentProvider_unstable(props, ref);
        useFluentProviderStyles_unstable(state);
        const contextValues = useFluentProviderContextValues_unstable(state);
        return renderFluentProvider_unstable(state, contextValues);
      });
      FluentProvider.displayName = "FluentProvider";
    }
  });

  // node_modules/@fluentui/react-provider/lib/components/FluentProvider/index.js
  var init_FluentProvider2 = __esm({
    "node_modules/@fluentui/react-provider/lib/components/FluentProvider/index.js"() {
      init_FluentProvider();
    }
  });

  // node_modules/@fluentui/react-provider/lib/FluentProvider.js
  var init_FluentProvider3 = __esm({
    "node_modules/@fluentui/react-provider/lib/FluentProvider.js"() {
      init_FluentProvider2();
    }
  });

  // node_modules/@fluentui/react-provider/lib/index.js
  var init_lib6 = __esm({
    "node_modules/@fluentui/react-provider/lib/index.js"() {
      init_FluentProvider3();
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development2 = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node2) {
            var index = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index);
          }
          function peek2(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node2, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i) {
            var index = i;
            var length2 = heap.length;
            var halfLength = length2 >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node2) < 0) {
                if (rightIndex < length2 && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node2;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node2;
                  index = leftIndex;
                }
              } else if (rightIndex < length2 && compare(right, node2) < 0) {
                heap[index] = right;
                heap[rightIndex] = node2;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority2 = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority2;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority2:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority2;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority2:
                priorityLevel = NormalPriority2;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority2:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority2;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler2 = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development2();
      }
    }
  });

  // node_modules/@fluentui/react-context-selector/lib/createContext.js
  var React40, import_scheduler, createProvider, createContext17;
  var init_createContext = __esm({
    "node_modules/@fluentui/react-context-selector/lib/createContext.js"() {
      init_lib2();
      React40 = __toESM(require_react());
      import_scheduler = __toESM(require_scheduler2());
      createProvider = (Original) => {
        const Provider2 = (props) => {
          const valueRef = React40.useRef(props.value);
          const versionRef = React40.useRef(0);
          const contextValue = React40.useRef();
          if (!contextValue.current) {
            contextValue.current = {
              value: valueRef,
              version: versionRef,
              listeners: []
            };
          }
          useIsomorphicLayoutEffect2(() => {
            valueRef.current = props.value;
            versionRef.current += 1;
            (0, import_scheduler.unstable_runWithPriority)(import_scheduler.unstable_NormalPriority, () => {
              contextValue.current.listeners.forEach((listener) => {
                listener([
                  versionRef.current,
                  props.value
                ]);
              });
            });
          }, [
            props.value
          ]);
          return React40.createElement(Original, {
            value: contextValue.current
          }, props.children);
        };
        if (true) {
          Provider2.displayName = "ContextSelector.Provider";
        }
        return Provider2;
      };
      createContext17 = (defaultValue) => {
        const context = React40.createContext({
          value: {
            current: defaultValue
          },
          version: {
            current: -1
          },
          listeners: []
        });
        context.Provider = createProvider(context.Provider);
        delete context.Consumer;
        return context;
      };
    }
  });

  // node_modules/@fluentui/react-context-selector/lib/index.js
  var init_lib7 = __esm({
    "node_modules/@fluentui/react-context-selector/lib/index.js"() {
      init_createContext();
    }
  });

  // node_modules/@fluentui/keyboard-keys/lib/keys.js
  var Enter, Space;
  var init_keys = __esm({
    "node_modules/@fluentui/keyboard-keys/lib/keys.js"() {
      Enter = "Enter";
      Space = " ";
    }
  });

  // node_modules/@fluentui/keyboard-keys/lib/index.js
  var init_lib8 = __esm({
    "node_modules/@fluentui/keyboard-keys/lib/index.js"() {
      init_keys();
    }
  });

  // node_modules/@fluentui/react-aria/lib/button/useARIAButtonProps.js
  function useARIAButtonProps(type, props) {
    const { disabled, disabledFocusable = false, ["aria-disabled"]: ariaDisabled, onClick, onKeyDown, onKeyUp, ...rest } = props !== null && props !== void 0 ? props : {};
    const normalizedARIADisabled = typeof ariaDisabled === "string" ? ariaDisabled === "true" : ariaDisabled;
    const isDisabled = disabled || disabledFocusable || normalizedARIADisabled;
    const handleClick = useEventCallback((ev) => {
      if (isDisabled) {
        ev.preventDefault();
        ev.stopPropagation();
      } else {
        onClick === null || onClick === void 0 ? void 0 : onClick(ev);
      }
    });
    const handleKeyDown = useEventCallback((ev) => {
      onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(ev);
      if (ev.isDefaultPrevented()) {
        return;
      }
      const key = ev.key;
      if (isDisabled && (key === Enter || key === Space)) {
        ev.preventDefault();
        ev.stopPropagation();
        return;
      }
      if (key === Space) {
        ev.preventDefault();
        return;
      } else if (key === Enter) {
        ev.preventDefault();
        ev.currentTarget.click();
      }
    });
    const handleKeyUp = useEventCallback((ev) => {
      onKeyUp === null || onKeyUp === void 0 ? void 0 : onKeyUp(ev);
      if (ev.isDefaultPrevented()) {
        return;
      }
      const key = ev.key;
      if (isDisabled && (key === Enter || key === Space)) {
        ev.preventDefault();
        ev.stopPropagation();
        return;
      }
      if (key === Space) {
        ev.preventDefault();
        ev.currentTarget.click();
      }
    });
    if (type === "button" || type === void 0) {
      return {
        ...rest,
        disabled: disabled && !disabledFocusable,
        "aria-disabled": disabledFocusable ? true : normalizedARIADisabled,
        // onclick should still use internal handler to ensure prevention if disabled
        // if disabledFocusable then there's no requirement for handlers as those events should not be propagated
        onClick: disabledFocusable ? void 0 : handleClick,
        onKeyUp: disabledFocusable ? void 0 : onKeyUp,
        onKeyDown: disabledFocusable ? void 0 : onKeyDown
      };
    } else {
      const isLink = !!rest.href;
      let roleOverride = isLink ? void 0 : "button";
      if (!roleOverride && isDisabled) {
        roleOverride = "link";
      }
      const resultProps = {
        role: roleOverride,
        tabIndex: disabledFocusable || !isLink && !disabled ? 0 : void 0,
        ...rest,
        // If it's not a <button> than listeners are required even with disabledFocusable
        // Since you cannot assure the default behavior of the element
        // E.g: <a> will redirect on click
        onClick: handleClick,
        onKeyUp: handleKeyUp,
        onKeyDown: handleKeyDown,
        "aria-disabled": isDisabled
      };
      if (type === "a" && isDisabled) {
        resultProps.href = void 0;
      }
      return resultProps;
    }
  }
  var React41;
  var init_useARIAButtonProps = __esm({
    "node_modules/@fluentui/react-aria/lib/button/useARIAButtonProps.js"() {
      init_lib8();
      init_lib2();
      React41 = __toESM(require_react());
    }
  });

  // node_modules/@fluentui/react-aria/lib/button/index.js
  var init_button = __esm({
    "node_modules/@fluentui/react-aria/lib/button/index.js"() {
      init_useARIAButtonProps();
    }
  });

  // node_modules/@fluentui/react-aria/lib/index.js
  var init_lib9 = __esm({
    "node_modules/@fluentui/react-aria/lib/index.js"() {
      init_button();
    }
  });

  // node_modules/@fluentui/react-icons/lib/utils/useIconState.js
  var useRootStyles, useIconState;
  var init_useIconState = __esm({
    "node_modules/@fluentui/react-icons/lib/utils/useIconState.js"() {
      init_contexts();
      init_index_esm2();
      useRootStyles = __styles2({
        "root": {
          "mc9l5x": "f1w7gpdv",
          "Bg96gwp": "fez10in",
          "ycbfsm": "fg4l7m0"
        },
        "rtl": {
          "Bz10aip": "f13rod7r"
        }
      }, {
        "d": [".f1w7gpdv{display:inline;}", ".fez10in{line-height:0;}", ".f13rod7r{-webkit-transform:scaleX(-1);-moz-transform:scaleX(-1);-ms-transform:scaleX(-1);transform:scaleX(-1);}"],
        "t": ["@media (forced-colors: active){.fg4l7m0{forced-color-adjust:auto;}}"]
      });
      useIconState = (props, options) => {
        const {
          title,
          primaryFill = "currentColor",
          ...rest
        } = props;
        const state = {
          ...rest,
          title: void 0,
          fill: primaryFill
        };
        const styles = useRootStyles();
        const iconContext = useIconContext();
        state.className = mergeClasses(styles.root, (options === null || options === void 0 ? void 0 : options.flipInRtl) && (iconContext === null || iconContext === void 0 ? void 0 : iconContext.textDirection) === "rtl" && styles.rtl, state.className);
        if (title) {
          state["aria-label"] = title;
        }
        if (!state["aria-label"] && !state["aria-labelledby"]) {
          state["aria-hidden"] = true;
        } else {
          state["role"] = "img";
        }
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-icons/lib/utils/createFluentIcon.js
  var React42, createFluentIcon;
  var init_createFluentIcon = __esm({
    "node_modules/@fluentui/react-icons/lib/utils/createFluentIcon.js"() {
      React42 = __toESM(require_react());
      init_useIconState();
      createFluentIcon = (displayName, width, paths, options) => {
        const viewBoxWidth = width === "1em" ? "20" : width;
        const Icon = React42.forwardRef((props, ref) => {
          const state = {
            ...useIconState(props, {
              flipInRtl: options === null || options === void 0 ? void 0 : options.flipInRtl
            }),
            ref,
            width,
            height: width,
            viewBox: `0 0 ${viewBoxWidth} ${viewBoxWidth}`,
            xmlns: "http://www.w3.org/2000/svg"
          };
          return React42.createElement("svg", state, ...paths.map((d) => React42.createElement("path", {
            d,
            fill: state.fill
          })));
        });
        Icon.displayName = displayName;
        return Icon;
      };
    }
  });

  // node_modules/@fluentui/react-icons/lib/icons/chunk-0.js
  var BotRegular;
  var init_chunk_0 = __esm({
    "node_modules/@fluentui/react-icons/lib/icons/chunk-0.js"() {
      "use client";
      init_createFluentIcon();
      BotRegular = /* @__PURE__ */ createFluentIcon("BotRegular", "1em", ["M12 5.5a1 1 0 1 0 0 2 1 1 0 0 0 0-2Zm-5 1a1 1 0 1 1 2 0 1 1 0 0 1-2 0Zm3.5-4a.5.5 0 0 0-1 0V3h-3C5.67 3 5 3.67 5 4.5v4c0 .83.67 1.5 1.5 1.5h7c.83 0 1.5-.67 1.5-1.5v-4c0-.83-.67-1.5-1.5-1.5h-3v-.5ZM6.5 4h7c.28 0 .5.22.5.5v4a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-4c0-.28.22-.5.5-.5Zm3.75 14c2.62-.04 4.2-.6 5.12-1.44A3.52 3.52 0 0 0 16.5 14h.01v-.69c0-1-.81-1.8-1.8-1.8h-3.2v-.01H5.3c-.99 0-1.8.81-1.8 1.81v.7c.04.77.25 1.75 1.13 2.55.93.84 2.5 1.4 5.12 1.44h.5Zm-4.94-5.5h9.38c.45 0 .81.37.81.81v.44c0 .69-.13 1.46-.8 2.07C14 16.45 12.66 17 10 17s-4.01-.55-4.7-1.18a2.63 2.63 0 0 1-.8-2.07v-.44c0-.44.36-.8.8-.8Z"]);
    }
  });

  // node_modules/@fluentui/react-icons/lib/icons/chunk-1.js
  var CheckmarkCircleFilled, CopyRegular, DismissRegular, DismissCircleFilled;
  var init_chunk_1 = __esm({
    "node_modules/@fluentui/react-icons/lib/icons/chunk-1.js"() {
      "use client";
      init_createFluentIcon();
      CheckmarkCircleFilled = /* @__PURE__ */ createFluentIcon("CheckmarkCircleFilled", "1em", ["M10 2a8 8 0 1 1 0 16 8 8 0 0 1 0-16Zm3.36 5.65a.5.5 0 0 0-.64-.06l-.07.06L9 11.3 7.35 9.65l-.07-.06a.5.5 0 0 0-.7.7l.07.07 2 2 .07.06c.17.11.4.11.56 0l.07-.06 4-4 .07-.08a.5.5 0 0 0-.06-.63Z"]);
      CopyRegular = /* @__PURE__ */ createFluentIcon("CopyRegular", "1em", ["M8 2a2 2 0 0 0-2 2v10c0 1.1.9 2 2 2h6a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8ZM7 4a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1V4ZM4 6a2 2 0 0 1 1-1.73V14.5A2.5 2.5 0 0 0 7.5 17h6.23A2 2 0 0 1 12 18H7.5A3.5 3.5 0 0 1 4 14.5V6Z"]);
      DismissRegular = /* @__PURE__ */ createFluentIcon("DismissRegular", "1em", ["m4.09 4.22.06-.07a.5.5 0 0 1 .63-.06l.07.06L10 9.29l5.15-5.14a.5.5 0 0 1 .63-.06l.07.06c.18.17.2.44.06.63l-.06.07L10.71 10l5.14 5.15c.18.17.2.44.06.63l-.06.07a.5.5 0 0 1-.63.06l-.07-.06L10 10.71l-5.15 5.14a.5.5 0 0 1-.63.06l-.07-.06a.5.5 0 0 1-.06-.63l.06-.07L9.29 10 4.15 4.85a.5.5 0 0 1-.06-.63l.06-.07-.06.07Z"]);
      DismissCircleFilled = /* @__PURE__ */ createFluentIcon("DismissCircleFilled", "1em", ["M10 2a8 8 0 1 1 0 16 8 8 0 0 1 0-16ZM7.8 7.11a.5.5 0 0 0-.63.06l-.06.07a.5.5 0 0 0 .06.64L9.3 10l-2.12 2.12-.06.07a.5.5 0 0 0 .06.64l.07.06c.2.13.47.11.64-.06L10 10.7l2.12 2.12.07.06c.2.13.46.11.64-.06l.06-.07a.5.5 0 0 0-.06-.64L10.7 10l2.12-2.12.06-.07a.5.5 0 0 0-.06-.64l-.07-.06a.5.5 0 0 0-.64.06L10 9.3 7.88 7.17l-.07-.06Z"]);
    }
  });

  // node_modules/@fluentui/react-icons/lib/icons/chunk-2.js
  var InfoFilled;
  var init_chunk_2 = __esm({
    "node_modules/@fluentui/react-icons/lib/icons/chunk-2.js"() {
      "use client";
      init_createFluentIcon();
      InfoFilled = /* @__PURE__ */ createFluentIcon("InfoFilled", "1em", ["M18 10a8 8 0 1 0-16 0 8 8 0 0 0 16 0ZM9.5 8.91a.5.5 0 0 1 1 0V13.6a.5.5 0 0 1-1 0V8.9Zm-.25-2.16a.75.75 0 1 1 1.5 0 .75.75 0 0 1-1.5 0Z"]);
    }
  });

  // node_modules/@fluentui/react-icons/lib/icons/chunk-3.js
  var PersonRegular, SendRegular;
  var init_chunk_3 = __esm({
    "node_modules/@fluentui/react-icons/lib/icons/chunk-3.js"() {
      "use client";
      init_createFluentIcon();
      PersonRegular = /* @__PURE__ */ createFluentIcon("PersonRegular", "1em", ["M10 2a4 4 0 1 0 0 8 4 4 0 0 0 0-8ZM7 6a3 3 0 1 1 6 0 3 3 0 0 1-6 0Zm-2 5a2 2 0 0 0-2 2c0 1.7.83 2.97 2.13 3.8A9.14 9.14 0 0 0 10 18c1.85 0 3.58-.39 4.87-1.2A4.35 4.35 0 0 0 17 13a2 2 0 0 0-2-2H5Zm-1 2a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1c0 1.3-.62 2.28-1.67 2.95A8.16 8.16 0 0 1 10 17a8.16 8.16 0 0 1-4.33-1.05A3.36 3.36 0 0 1 4 13Z"]);
      SendRegular = /* @__PURE__ */ createFluentIcon("SendRegular", "1em", ["M2.18 2.11a.5.5 0 0 1 .54-.06l15 7.5a.5.5 0 0 1 0 .9l-15 7.5a.5.5 0 0 1-.7-.58L3.98 10 2.02 2.63a.5.5 0 0 1 .16-.52Zm2.7 8.39-1.61 6.06L16.38 10 3.27 3.44 4.88 9.5h6.62a.5.5 0 1 1 0 1H4.88Z"], {
        flipInRtl: true
      });
    }
  });

  // node_modules/@fluentui/react-icons/lib/icons/chunk-4.js
  var init_chunk_4 = __esm({
    "node_modules/@fluentui/react-icons/lib/icons/chunk-4.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/icons/chunk-5.js
  var WarningFilled;
  var init_chunk_5 = __esm({
    "node_modules/@fluentui/react-icons/lib/icons/chunk-5.js"() {
      "use client";
      init_createFluentIcon();
      WarningFilled = /* @__PURE__ */ createFluentIcon("WarningFilled", "1em", ["M8.68 2.79a1.5 1.5 0 0 1 2.64 0l6.5 12A1.5 1.5 0 0 1 16.5 17h-13a1.5 1.5 0 0 1-1.32-2.21l6.5-12ZM10.5 7.5a.5.5 0 0 0-1 0v4a.5.5 0 0 0 1 0v-4Zm.25 6.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"]);
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-0.js
  var init_chunk_02 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-0.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-1.js
  var init_chunk_12 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-1.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-2.js
  var init_chunk_22 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-2.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-3.js
  var init_chunk_32 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-3.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-4.js
  var init_chunk_42 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-4.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-5.js
  var init_chunk_52 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-5.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-6.js
  var init_chunk_6 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-6.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-7.js
  var init_chunk_7 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-7.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-8.js
  var init_chunk_8 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-8.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-9.js
  var init_chunk_9 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-9.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-10.js
  var init_chunk_10 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-10.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-11.js
  var init_chunk_11 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-11.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-12.js
  var PresenceAvailable10Filled, PresenceAvailable10Regular, PresenceAvailable12Filled, PresenceAvailable12Regular, PresenceAvailable16Filled, PresenceAvailable16Regular, PresenceAvailable20Filled, PresenceAvailable20Regular, PresenceAway10Filled, PresenceAway12Filled, PresenceAway16Filled, PresenceAway20Filled, PresenceBlocked10Regular, PresenceBlocked12Regular, PresenceBlocked16Regular, PresenceBlocked20Regular, PresenceBusy10Filled, PresenceBusy12Filled, PresenceBusy16Filled, PresenceBusy20Filled, PresenceDnd10Filled, PresenceDnd10Regular, PresenceDnd12Filled, PresenceDnd12Regular, PresenceDnd16Filled, PresenceDnd16Regular, PresenceDnd20Filled, PresenceDnd20Regular, PresenceOffline10Regular, PresenceOffline12Regular, PresenceOffline16Regular, PresenceOffline20Regular, PresenceOof10Regular, PresenceOof12Regular, PresenceOof16Regular, PresenceOof20Regular, PresenceUnknown10Regular, PresenceUnknown12Regular, PresenceUnknown16Regular, PresenceUnknown20Regular;
  var init_chunk_122 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-12.js"() {
      "use client";
      init_createFluentIcon();
      PresenceAvailable10Filled = /* @__PURE__ */ createFluentIcon("PresenceAvailable10Filled", "10", ["M5 10A5 5 0 1 0 5 0a5 5 0 0 0 0 10Zm2.1-5.9L4.85 6.35a.5.5 0 0 1-.7 0l-1-1a.5.5 0 0 1 .7-.7l.65.64 1.9-1.9a.5.5 0 0 1 .7.71Z"]);
      PresenceAvailable10Regular = /* @__PURE__ */ createFluentIcon("PresenceAvailable10Regular", "10", ["M5 0a5 5 0 1 0 0 10A5 5 0 0 0 5 0ZM1 5a4 4 0 1 1 8 0 4 4 0 0 1-8 0Zm6.1-1.6c.2.2.2.5 0 .7L4.85 6.35a.5.5 0 0 1-.7 0l-1-1a.5.5 0 1 1 .7-.7l.65.64 1.9-1.9c.2-.19.5-.19.7 0Z"]);
      PresenceAvailable12Filled = /* @__PURE__ */ createFluentIcon("PresenceAvailable12Filled", "12", ["M6 12A6 6 0 1 0 6 0a6 6 0 0 0 0 12Zm2.53-6.72L5.78 8.03c-.3.3-.77.3-1.06 0l-1-1a.75.75 0 0 1 1.06-1.06l.47.47 2.22-2.22a.75.75 0 0 1 1.06 1.06Z"]);
      PresenceAvailable12Regular = /* @__PURE__ */ createFluentIcon("PresenceAvailable12Regular", "12", ["M6 0a6 6 0 1 0 0 12A6 6 0 0 0 6 0ZM1.5 6a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0Zm7.03-1.78c.3.3.3.77 0 1.06L5.78 8.03c-.3.3-.77.3-1.06 0l-1-1a.75.75 0 0 1 1.06-1.06l.47.47 2.22-2.22c.3-.3.77-.3 1.06 0Z"]);
      PresenceAvailable16Filled = /* @__PURE__ */ createFluentIcon("PresenceAvailable16Filled", "16", ["M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16Zm3.7-9.3-4 4a1 1 0 0 1-1.41 0l-2-2a1 1 0 1 1 1.42-1.4L7 8.58l3.3-3.3a1 1 0 0 1 1.4 1.42Z"]);
      PresenceAvailable16Regular = /* @__PURE__ */ createFluentIcon("PresenceAvailable16Regular", "16", ["M11.7 6.7a1 1 0 0 0-1.4-1.4L7 8.58l-1.3-1.3a1 1 0 0 0-1.4 1.42l2 2a1 1 0 0 0 1.4 0l4-4ZM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6a6 6 0 1 0 0 12A6 6 0 0 0 8 2Z"]);
      PresenceAvailable20Filled = /* @__PURE__ */ createFluentIcon("PresenceAvailable20Filled", "20", ["M10 20a10 10 0 1 0 0-20 10 10 0 0 0 0 20Zm4.2-11.8-4.5 4.5a1 1 0 0 1-1.4 0l-2-2a1 1 0 1 1 1.4-1.4L9 10.58l3.8-3.8a1 1 0 1 1 1.4 1.42Z"]);
      PresenceAvailable20Regular = /* @__PURE__ */ createFluentIcon("PresenceAvailable20Regular", "20", ["M10 0a10 10 0 1 0 0 20 10 10 0 0 0 0-20ZM2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm12.2-3.2a1 1 0 0 1 0 1.4l-4.5 4.5a1 1 0 0 1-1.4 0l-2-2a1 1 0 0 1 1.4-1.4L9 10.58l3.8-3.8a1 1 0 0 1 1.4 0Z"]);
      PresenceAway10Filled = /* @__PURE__ */ createFluentIcon("PresenceAway10Filled", "10", ["M5 10A5 5 0 1 0 5 0a5 5 0 0 0 0 10Zm0-7v1.8l1.35 1.35a.5.5 0 1 1-.7.7l-1.5-1.5A.5.5 0 0 1 4 5V3a.5.5 0 0 1 1 0Z"]);
      PresenceAway12Filled = /* @__PURE__ */ createFluentIcon("PresenceAway12Filled", "12", ["M6 12A6 6 0 1 0 6 0a6 6 0 0 0 0 12Zm.5-8.75v2.4l1.49 1.28A.75.75 0 1 1 7 8.07l-1.75-1.5A.75.75 0 0 1 5 6V3.25a.75.75 0 0 1 1.5 0Z"]);
      PresenceAway16Filled = /* @__PURE__ */ createFluentIcon("PresenceAway16Filled", "16", ["M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16Zm.5-11.5v3.02l2.12 1.7a1 1 0 1 1-1.24 1.56l-2.5-2A1 1 0 0 1 6.5 8V4.5a1 1 0 0 1 2 0Z"]);
      PresenceAway20Filled = /* @__PURE__ */ createFluentIcon("PresenceAway20Filled", "20", ["M10 20a10 10 0 1 0 0-20 10 10 0 0 0 0 20Zm0-14V9.6l2.7 2.7a1 1 0 0 1-1.4 1.42l-3-3A1 1 0 0 1 8 10V6a1 1 0 1 1 2 0Z"]);
      PresenceBlocked10Regular = /* @__PURE__ */ createFluentIcon("PresenceBlocked10Regular", "10", ["M10 5A5 5 0 1 0 0 5a5 5 0 0 0 10 0ZM9 5a4 4 0 0 1-6.45 3.16l5.61-5.61C8.69 3.22 9 4.08 9 5ZM7.45 1.84 1.84 7.45a4 4 0 0 1 5.61-5.61Z"]);
      PresenceBlocked12Regular = /* @__PURE__ */ createFluentIcon("PresenceBlocked12Regular", "12", ["M12 6A6 6 0 1 1 0 6a6 6 0 0 1 12 0Zm-1.5 0c0-.97-.3-1.87-.83-2.6L3.39 9.66A4.5 4.5 0 0 0 10.5 6ZM8.6 2.33a4.5 4.5 0 0 0-6.28 6.28l6.29-6.28Z"]);
      PresenceBlocked16Regular = /* @__PURE__ */ createFluentIcon("PresenceBlocked16Regular", "16", ["M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Zm-2 0c0-1.3-.41-2.5-1.1-3.48L4.51 12.9A6 6 0 0 0 14 8Zm-2.52-4.9a6 6 0 0 0-8.37 8.37l8.37-8.36Z"]);
      PresenceBlocked20Regular = /* @__PURE__ */ createFluentIcon("PresenceBlocked20Regular", "20", ["M20 10a10 10 0 1 0-20 0 10 10 0 0 0 20 0Zm-2 0a8 8 0 0 1-12.9 6.32L16.31 5.09A7.97 7.97 0 0 1 18 10Zm-3.1-6.32L3.69 14.91A8 8 0 0 1 14.91 3.68Z"]);
      PresenceBusy10Filled = /* @__PURE__ */ createFluentIcon("PresenceBusy10Filled", "10", ["M10 5A5 5 0 1 1 0 5a5 5 0 0 1 10 0Z"]);
      PresenceBusy12Filled = /* @__PURE__ */ createFluentIcon("PresenceBusy12Filled", "12", ["M12 6A6 6 0 1 1 0 6a6 6 0 0 1 12 0Z"]);
      PresenceBusy16Filled = /* @__PURE__ */ createFluentIcon("PresenceBusy16Filled", "16", ["M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0Z"]);
      PresenceBusy20Filled = /* @__PURE__ */ createFluentIcon("PresenceBusy20Filled", "20", ["M20 10a10 10 0 1 1-20 0 10 10 0 0 1 20 0Z"]);
      PresenceDnd10Filled = /* @__PURE__ */ createFluentIcon("PresenceDnd10Filled", "10", ["M5 10A5 5 0 1 0 5 0a5 5 0 0 0 0 10ZM3.5 4.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1 0-1Z"]);
      PresenceDnd10Regular = /* @__PURE__ */ createFluentIcon("PresenceDnd10Regular", "10", ["M5 0a5 5 0 1 0 0 10A5 5 0 0 0 5 0ZM1 5a4 4 0 1 1 8 0 4 4 0 0 1-8 0Zm2 0c0-.28.22-.5.5-.5h3a.5.5 0 0 1 0 1h-3A.5.5 0 0 1 3 5Z"]);
      PresenceDnd12Filled = /* @__PURE__ */ createFluentIcon("PresenceDnd12Filled", "12", ["M6 12A6 6 0 1 0 6 0a6 6 0 0 0 0 12ZM3.75 5.25h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5Z"]);
      PresenceDnd12Regular = /* @__PURE__ */ createFluentIcon("PresenceDnd12Regular", "12", ["M6 0a6 6 0 1 0 0 12A6 6 0 0 0 6 0ZM1.5 6a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0ZM3 6c0-.41.34-.75.75-.75h4.5a.75.75 0 0 1 0 1.5h-4.5A.75.75 0 0 1 3 6Z"]);
      PresenceDnd16Filled = /* @__PURE__ */ createFluentIcon("PresenceDnd16Filled", "16", ["M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16ZM5.25 7h5.5a1 1 0 1 1 0 2h-5.5a1 1 0 1 1 0-2Z"]);
      PresenceDnd16Regular = /* @__PURE__ */ createFluentIcon("PresenceDnd16Regular", "16", ["M5.25 7a1 1 0 0 0 0 2h5.5a1 1 0 1 0 0-2h-5.5ZM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6a6 6 0 1 0 0 12A6 6 0 0 0 8 2Z"]);
      PresenceDnd20Filled = /* @__PURE__ */ createFluentIcon("PresenceDnd20Filled", "20", ["M10 20a10 10 0 1 0 0-20 10 10 0 0 0 0 20ZM7 9h6a1 1 0 1 1 0 2H7a1 1 0 1 1 0-2Z"]);
      PresenceDnd20Regular = /* @__PURE__ */ createFluentIcon("PresenceDnd20Regular", "20", ["M10 0a10 10 0 1 0 0 20 10 10 0 0 0 0-20ZM2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm4 0a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1Z"]);
      PresenceOffline10Regular = /* @__PURE__ */ createFluentIcon("PresenceOffline10Regular", "10", ["M6.85 3.15c.2.2.2.5 0 .7L5.71 5l1.14 1.15a.5.5 0 1 1-.7.7L5 5.71 3.85 6.85a.5.5 0 1 1-.7-.7L4.29 5 3.15 3.85a.5.5 0 1 1 .7-.7L5 4.29l1.15-1.14c.2-.2.5-.2.7 0ZM0 5a5 5 0 1 1 10 0A5 5 0 0 1 0 5Zm5-4a4 4 0 1 0 0 8 4 4 0 0 0 0-8Z"]);
      PresenceOffline12Regular = /* @__PURE__ */ createFluentIcon("PresenceOffline12Regular", "12", ["M8.03 3.97c.3.3.3.77 0 1.06L7.06 6l.97.97a.75.75 0 0 1-1.06 1.06L6 7.06l-.97.97a.75.75 0 0 1-1.06-1.06L4.94 6l-.97-.97a.75.75 0 0 1 1.06-1.06l.97.97.97-.97c.3-.3.77-.3 1.06 0ZM0 6a6 6 0 1 1 12 0A6 6 0 0 1 0 6Zm6-4.5a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9Z"]);
      PresenceOffline16Regular = /* @__PURE__ */ createFluentIcon("PresenceOffline16Regular", "16", ["M10.7 5.3a1 1 0 0 1 0 1.4L9.42 8l1.3 1.3a1 1 0 0 1-1.42 1.4L8 9.42l-1.3 1.3a1 1 0 0 1-1.4-1.42L6.58 8l-1.3-1.3a1 1 0 0 1 1.42-1.4L8 6.58l1.3-1.3a1 1 0 0 1 1.4 0ZM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6a6 6 0 1 0 0 12A6 6 0 0 0 8 2Z"]);
      PresenceOffline20Regular = /* @__PURE__ */ createFluentIcon("PresenceOffline20Regular", "20", ["M13.7 6.3a1 1 0 0 1 0 1.4L11.42 10l2.3 2.3a1 1 0 0 1-1.42 1.4L10 11.42l-2.3 2.3a1 1 0 0 1-1.4-1.42L8.58 10l-2.3-2.3a1 1 0 0 1 1.42-1.4L10 8.58l2.3-2.3a1 1 0 0 1 1.4 0ZM0 10a10 10 0 1 1 20 0 10 10 0 0 1-20 0Zm10-8a8 8 0 1 0 0 16 8 8 0 0 0 0-16Z"]);
      PresenceOof10Regular = /* @__PURE__ */ createFluentIcon("PresenceOof10Regular", "10", ["M5.35 3.85a.5.5 0 1 0-.7-.7l-1.5 1.5a.5.5 0 0 0 0 .7l1.5 1.5a.5.5 0 1 0 .7-.7L4.7 5.5h1.8a.5.5 0 1 0 0-1H4.7l.65-.65ZM5 0a5 5 0 1 0 0 10A5 5 0 0 0 5 0ZM1 5a4 4 0 1 1 8 0 4 4 0 0 1-8 0Z"]);
      PresenceOof12Regular = /* @__PURE__ */ createFluentIcon("PresenceOof12Regular", "12", ["M6.28 4.53a.75.75 0 0 0-1.06-1.06l-2 2c-.3.3-.3.77 0 1.06l2 2a.75.75 0 0 0 1.06-1.06l-.72-.72h2.69a.75.75 0 1 0 0-1.5h-2.7l.73-.72ZM6 0a6 6 0 1 0 0 12A6 6 0 0 0 6 0ZM1.5 6a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0Z"]);
      PresenceOof16Regular = /* @__PURE__ */ createFluentIcon("PresenceOof16Regular", "16", ["M8.2 6.2a1 1 0 1 0-1.4-1.4L4.3 7.3a1 1 0 0 0 0 1.4l2.5 2.5a1 1 0 0 0 1.4-1.4L7.42 9H11a1 1 0 1 0 0-2H7.41l.8-.8ZM8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0ZM2 8a6 6 0 1 1 12 0A6 6 0 0 1 2 8Z"]);
      PresenceOof20Regular = /* @__PURE__ */ createFluentIcon("PresenceOof20Regular", "20", ["M10.7 7.7A1 1 0 1 0 9.28 6.3l-3 3a1 1 0 0 0 0 1.41l3 3a1 1 0 1 0 1.42-1.41l-1.3-1.3H13a1 1 0 1 0 0-2H9.4l1.3-1.29ZM10 0a10 10 0 1 0 0 20 10 10 0 0 0 0-20ZM2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Z"]);
      PresenceUnknown10Regular = /* @__PURE__ */ createFluentIcon("PresenceUnknown10Regular", "10", ["M5 1a4 4 0 1 0 0 8 4 4 0 0 0 0-8ZM0 5a5 5 0 1 1 10 0A5 5 0 0 1 0 5Z"]);
      PresenceUnknown12Regular = /* @__PURE__ */ createFluentIcon("PresenceUnknown12Regular", "12", ["M6 1.5a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9ZM0 6a6 6 0 1 1 12 0A6 6 0 0 1 0 6Z"]);
      PresenceUnknown16Regular = /* @__PURE__ */ createFluentIcon("PresenceUnknown16Regular", "16", ["M8 2a6 6 0 1 0 0 12A6 6 0 0 0 8 2ZM0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Z"]);
      PresenceUnknown20Regular = /* @__PURE__ */ createFluentIcon("PresenceUnknown20Regular", "20", ["M10 2a8 8 0 1 0 0 16 8 8 0 0 0 0-16ZM0 10a10 10 0 1 1 20 0 10 10 0 0 1-20 0Z"]);
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-13.js
  var init_chunk_13 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-13.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-14.js
  var init_chunk_14 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-14.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-15.js
  var init_chunk_15 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-15.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-16.js
  var init_chunk_16 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-16.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-17.js
  var init_chunk_17 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-17.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-18.js
  var init_chunk_18 = __esm({
    "node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-18.js"() {
      "use client";
    }
  });

  // node_modules/@fluentui/react-icons/lib/utils/constants.js
  var init_constants3 = __esm({
    "node_modules/@fluentui/react-icons/lib/utils/constants.js"() {
    }
  });

  // node_modules/@fluentui/react-icons/lib/index.js
  var init_lib10 = __esm({
    "node_modules/@fluentui/react-icons/lib/index.js"() {
      init_chunk_0();
      init_chunk_1();
      init_chunk_2();
      init_chunk_3();
      init_chunk_4();
      init_chunk_5();
      init_chunk_02();
      init_chunk_12();
      init_chunk_22();
      init_chunk_32();
      init_chunk_42();
      init_chunk_52();
      init_chunk_6();
      init_chunk_7();
      init_chunk_8();
      init_chunk_9();
      init_chunk_10();
      init_chunk_11();
      init_chunk_122();
      init_chunk_13();
      init_chunk_14();
      init_chunk_15();
      init_chunk_16();
      init_chunk_17();
      init_chunk_18();
      init_useIconState();
      init_constants3();
    }
  });

  // node_modules/@fluentui/react-avatar/lib/components/Avatar/renderAvatar.js
  var renderAvatar_unstable;
  var init_renderAvatar = __esm({
    "node_modules/@fluentui/react-avatar/lib/components/Avatar/renderAvatar.js"() {
      init_jsx_runtime();
      init_lib2();
      renderAvatar_unstable = (state) => {
        assertSlots(state);
        return /* @__PURE__ */ jsxs(state.root, {
          children: [
            state.initials && /* @__PURE__ */ jsx(state.initials, {}),
            state.icon && /* @__PURE__ */ jsx(state.icon, {}),
            state.image && /* @__PURE__ */ jsx(state.image, {}),
            state.badge && /* @__PURE__ */ jsx(state.badge, {}),
            state.activeAriaLabelElement
          ]
        });
      };
    }
  });

  // node_modules/@fluentui/react-avatar/lib/utils/getInitials.js
  function getInitialsLatin(displayName, isRtl, firstInitialOnly) {
    let initials = "";
    const splits = displayName.split(" ");
    if (splits.length !== 0) {
      initials += splits[0].charAt(0).toUpperCase();
    }
    if (!firstInitialOnly) {
      if (splits.length === 2) {
        initials += splits[1].charAt(0).toUpperCase();
      } else if (splits.length === 3) {
        initials += splits[2].charAt(0).toUpperCase();
      }
    }
    if (isRtl && initials.length > 1) {
      return initials.charAt(1) + initials.charAt(0);
    }
    return initials;
  }
  function cleanupDisplayName(displayName) {
    displayName = displayName.replace(UNWANTED_ENCLOSURES_REGEX, "");
    displayName = displayName.replace(UNWANTED_CHARS_REGEX, "");
    displayName = displayName.replace(MULTIPLE_WHITESPACES_REGEX, " ");
    displayName = displayName.trim();
    return displayName;
  }
  function getInitials(displayName, isRtl, options) {
    if (!displayName) {
      return "";
    }
    displayName = cleanupDisplayName(displayName);
    if (UNSUPPORTED_TEXT_REGEX.test(displayName) || !(options === null || options === void 0 ? void 0 : options.allowPhoneInitials) && PHONENUMBER_REGEX.test(displayName)) {
      return "";
    }
    return getInitialsLatin(displayName, isRtl, options === null || options === void 0 ? void 0 : options.firstInitialOnly);
  }
  var UNWANTED_ENCLOSURES_REGEX, UNWANTED_CHARS_REGEX, PHONENUMBER_REGEX, MULTIPLE_WHITESPACES_REGEX, UNSUPPORTED_TEXT_REGEX;
  var init_getInitials = __esm({
    "node_modules/@fluentui/react-avatar/lib/utils/getInitials.js"() {
      UNWANTED_ENCLOSURES_REGEX = /[\(\[\{][^\)\]\}]*[\)\]\}]/g;
      UNWANTED_CHARS_REGEX = /[\0-\u001F\!-/:-@\[-`\{-\u00BF\u0250-\u036F\uD800-\uFFFF]/g;
      PHONENUMBER_REGEX = /^\d+[\d\s]*(:?ext|x|)\s*\d+$/i;
      MULTIPLE_WHITESPACES_REGEX = /\s+/g;
      UNSUPPORTED_TEXT_REGEX = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\u1100-\u11FF\u3130-\u318F\uA960-\uA97F\uAC00-\uD7AF\uD7B0-\uD7FF\u3040-\u309F\u30A0-\u30FF\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF]|[\uD840-\uD869][\uDC00-\uDED6]/;
    }
  });

  // node_modules/@fluentui/react-avatar/lib/utils/index.js
  var init_utils2 = __esm({
    "node_modules/@fluentui/react-avatar/lib/utils/index.js"() {
      init_getInitials();
    }
  });

  // node_modules/@fluentui/react-badge/lib/components/Badge/useBadge.js
  var React43, useBadge_unstable;
  var init_useBadge = __esm({
    "node_modules/@fluentui/react-badge/lib/components/Badge/useBadge.js"() {
      React43 = __toESM(require_react());
      init_lib2();
      useBadge_unstable = (props, ref) => {
        const { shape = "circular", size = "medium", iconPosition = "before", appearance = "filled", color = "brand" } = props;
        const state = {
          shape,
          size,
          iconPosition,
          appearance,
          color,
          components: {
            root: "div",
            icon: "span"
          },
          root: slot_exports.always(getIntrinsicElementProps("div", {
            // FIXME:
            // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`
            // but since it would be a breaking change to fix it, we are casting ref to it's proper type
            ref,
            ...props
          }), {
            elementType: "div"
          }),
          icon: slot_exports.optional(props.icon, {
            elementType: "span"
          })
        };
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-badge/lib/components/Badge/renderBadge.js
  var renderBadge_unstable;
  var init_renderBadge = __esm({
    "node_modules/@fluentui/react-badge/lib/components/Badge/renderBadge.js"() {
      init_jsx_runtime();
      init_lib2();
      renderBadge_unstable = (state) => {
        assertSlots(state);
        return /* @__PURE__ */ jsxs(state.root, {
          children: [
            state.iconPosition === "before" && state.icon && /* @__PURE__ */ jsx(state.icon, {}),
            state.root.children,
            state.iconPosition === "after" && state.icon && /* @__PURE__ */ jsx(state.icon, {})
          ]
        });
      };
    }
  });

  // node_modules/@fluentui/react-badge/lib/components/Badge/index.js
  var init_Badge = __esm({
    "node_modules/@fluentui/react-badge/lib/components/Badge/index.js"() {
      init_renderBadge();
      init_useBadge();
    }
  });

  // node_modules/@fluentui/react-badge/lib/Badge.js
  var init_Badge2 = __esm({
    "node_modules/@fluentui/react-badge/lib/Badge.js"() {
      init_Badge();
    }
  });

  // node_modules/@fluentui/react-badge/lib/components/PresenceBadge/presenceIcons.js
  var React44, presenceAwayFilled, presenceAvailableRegular, presenceAvailableFilled, presenceBlockedRegular, presenceBusyFilled, presenceDndFilled, presenceDndRegular, presenceOofRegular, presenceOfflineRegular, presenceUnknownRegular;
  var init_presenceIcons = __esm({
    "node_modules/@fluentui/react-badge/lib/components/PresenceBadge/presenceIcons.js"() {
      React44 = __toESM(require_react());
      init_lib10();
      presenceAwayFilled = {
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        tiny: PresenceAway10Filled,
        "extra-small": PresenceAway10Filled,
        small: PresenceAway12Filled,
        medium: PresenceAway16Filled,
        large: PresenceAway20Filled,
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        "extra-large": PresenceAway20Filled
      };
      presenceAvailableRegular = {
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        tiny: PresenceAvailable10Regular,
        "extra-small": PresenceAvailable10Regular,
        small: PresenceAvailable12Regular,
        medium: PresenceAvailable16Regular,
        large: PresenceAvailable20Regular,
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        "extra-large": PresenceAvailable20Regular
      };
      presenceAvailableFilled = {
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        tiny: PresenceAvailable10Filled,
        "extra-small": PresenceAvailable10Filled,
        small: PresenceAvailable12Filled,
        medium: PresenceAvailable16Filled,
        large: PresenceAvailable20Filled,
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        "extra-large": PresenceAvailable20Filled
      };
      presenceBlockedRegular = {
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        tiny: PresenceBlocked10Regular,
        "extra-small": PresenceBlocked10Regular,
        small: PresenceBlocked12Regular,
        medium: PresenceBlocked16Regular,
        large: PresenceBlocked20Regular,
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        "extra-large": PresenceBlocked20Regular
      };
      presenceBusyFilled = {
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        tiny: PresenceBusy10Filled,
        "extra-small": PresenceBusy10Filled,
        small: PresenceBusy12Filled,
        medium: PresenceBusy16Filled,
        large: PresenceBusy20Filled,
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        "extra-large": PresenceBusy20Filled
      };
      presenceDndFilled = {
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        tiny: PresenceDnd10Filled,
        "extra-small": PresenceDnd10Filled,
        small: PresenceDnd12Filled,
        medium: PresenceDnd16Filled,
        large: PresenceDnd20Filled,
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        "extra-large": PresenceDnd20Filled
      };
      presenceDndRegular = {
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        tiny: PresenceDnd10Regular,
        "extra-small": PresenceDnd10Regular,
        small: PresenceDnd12Regular,
        medium: PresenceDnd16Regular,
        large: PresenceDnd20Regular,
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        "extra-large": PresenceDnd20Regular
      };
      presenceOofRegular = {
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        tiny: PresenceOof10Regular,
        "extra-small": PresenceOof10Regular,
        small: PresenceOof12Regular,
        medium: PresenceOof16Regular,
        large: PresenceOof20Regular,
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        "extra-large": PresenceOof20Regular
      };
      presenceOfflineRegular = {
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        tiny: PresenceOffline10Regular,
        "extra-small": PresenceOffline10Regular,
        small: PresenceOffline12Regular,
        medium: PresenceOffline16Regular,
        large: PresenceOffline20Regular,
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        "extra-large": PresenceOffline20Regular
      };
      presenceUnknownRegular = {
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        tiny: PresenceUnknown10Regular,
        "extra-small": PresenceUnknown10Regular,
        small: PresenceUnknown12Regular,
        medium: PresenceUnknown16Regular,
        large: PresenceUnknown20Regular,
        // FIXME not all presence icon sizes are available
        // https://github.com/microsoft/fluentui/issues/20650
        "extra-large": PresenceUnknown20Regular
      };
    }
  });

  // node_modules/@fluentui/react-badge/lib/components/PresenceBadge/usePresenceBadge.js
  var React45, iconMap, DEFAULT_STRINGS, usePresenceBadge_unstable;
  var init_usePresenceBadge = __esm({
    "node_modules/@fluentui/react-badge/lib/components/PresenceBadge/usePresenceBadge.js"() {
      React45 = __toESM(require_react());
      init_lib2();
      init_presenceIcons();
      init_Badge();
      iconMap = (status, outOfOffice, size) => {
        switch (status) {
          case "available":
            return outOfOffice ? presenceAvailableRegular[size] : presenceAvailableFilled[size];
          case "away":
            return outOfOffice ? presenceOofRegular[size] : presenceAwayFilled[size];
          case "blocked":
            return presenceBlockedRegular[size];
          case "busy":
            return outOfOffice ? presenceUnknownRegular[size] : presenceBusyFilled[size];
          case "do-not-disturb":
            return outOfOffice ? presenceDndRegular[size] : presenceDndFilled[size];
          case "offline":
            return outOfOffice ? presenceOofRegular[size] : presenceOfflineRegular[size];
          case "out-of-office":
            return presenceOofRegular[size];
          case "unknown":
            return presenceUnknownRegular[size];
        }
      };
      DEFAULT_STRINGS = {
        busy: "busy",
        "out-of-office": "out of office",
        away: "away",
        available: "available",
        offline: "offline",
        "do-not-disturb": "do not disturb",
        unknown: "unknown",
        blocked: "blocked"
      };
      usePresenceBadge_unstable = (props, ref) => {
        const { size = "medium", status = "available", outOfOffice = false } = props;
        const statusText = DEFAULT_STRINGS[status];
        const oofText = props.outOfOffice && props.status !== "out-of-office" ? ` ${DEFAULT_STRINGS["out-of-office"]}` : "";
        const IconElement = iconMap(status, outOfOffice, size);
        const state = {
          ...useBadge_unstable({
            "aria-label": statusText + oofText,
            role: "img",
            ...props,
            size,
            icon: slot_exports.optional(props.icon, {
              defaultProps: {
                children: IconElement ? /* @__PURE__ */ React45.createElement(IconElement, null) : null
              },
              renderByDefault: true,
              elementType: "span"
            })
          }, ref),
          status,
          outOfOffice
        };
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-badge/lib/components/PresenceBadge/usePresenceBadgeStyles.styles.js
  var presenceBadgeClassNames, getIsBusy, useRootClassName, useIconClassName, useStyles2, usePresenceBadgeStyles_unstable;
  var init_usePresenceBadgeStyles_styles = __esm({
    "node_modules/@fluentui/react-badge/lib/components/PresenceBadge/usePresenceBadgeStyles.styles.js"() {
      init_index_esm2();
      presenceBadgeClassNames = {
        root: "fui-PresenceBadge",
        icon: "fui-PresenceBadge__icon"
      };
      getIsBusy = (status) => {
        if (status === "busy" || status === "do-not-disturb" || status === "blocked") {
          return true;
        }
        return false;
      };
      useRootClassName = /* @__PURE__ */ __resetStyles2("r832ydo", null, [".r832ydo{display:inline-flex;box-sizing:border-box;align-items:center;justify-content:center;border-radius:var(--borderRadiusCircular);background-color:var(--colorNeutralBackground1);padding:1px;background-clip:content-box;}"]);
      useIconClassName = /* @__PURE__ */ __resetStyles2("r11ag4qr", null, [".r11ag4qr{display:flex;margin:-1px;}"]);
      useStyles2 = /* @__PURE__ */ __styles2({
        statusBusy: {
          sj55zd: "fvi85wt"
        },
        statusAway: {
          sj55zd: "f14k8a89"
        },
        statusAvailable: {
          sj55zd: "fqa5hgp"
        },
        statusOffline: {
          sj55zd: "f11d4kpn"
        },
        statusOutOfOffice: {
          sj55zd: "fdce8r3"
        },
        statusUnknown: {
          sj55zd: "f11d4kpn"
        },
        outOfOffice: {
          sj55zd: "fr0bkrk"
        },
        outOfOfficeAvailable: {
          sj55zd: "fqa5hgp"
        },
        outOfOfficeBusy: {
          sj55zd: "fvi85wt"
        },
        outOfOfficeUnknown: {
          sj55zd: "f11d4kpn"
        },
        tiny: {
          Bubjx69: "f9ikmtg",
          a9b677: "f16dn6v3",
          B2eet1l: "f1w2irj7",
          B5pe6w7: "fab5kbq",
          p4uzdd: "f1ms1d91"
        },
        large: {
          Bubjx69: "f9ikmtg",
          a9b677: "f64fuq3",
          B5pe6w7: "f1vfi1yj",
          p4uzdd: "f15s34gz"
        },
        extraLarge: {
          Bubjx69: "f9ikmtg",
          a9b677: "f1w9dchk",
          B5pe6w7: "f14efy9b",
          p4uzdd: "fhipgdu"
        }
      }, {
        d: [".fvi85wt{color:var(--colorPaletteRedBackground3);}", ".f14k8a89{color:var(--colorPaletteMarigoldBackground3);}", ".fqa5hgp{color:var(--colorPaletteLightGreenForeground3);}", ".f11d4kpn{color:var(--colorNeutralForeground3);}", ".fdce8r3{color:var(--colorPaletteBerryForeground3);}", ".fr0bkrk{color:var(--colorNeutralBackground1);}", ".f9ikmtg{aspect-ratio:1;}", ".f16dn6v3{width:6px;}", ".f1w2irj7{background-clip:unset;}", ".fab5kbq svg{width:6px!important;}", ".f1ms1d91 svg{height:6px!important;}", ".f64fuq3{width:20px;}", ".f1vfi1yj svg{width:20px!important;}", ".f15s34gz svg{height:20px!important;}", ".f1w9dchk{width:28px;}", ".f14efy9b svg{width:28px!important;}", ".fhipgdu svg{height:28px!important;}"]
      });
      usePresenceBadgeStyles_unstable = (state) => {
        "use no memo";
        const rootClassName = useRootClassName();
        const iconClassName = useIconClassName();
        const styles = useStyles2();
        const isBusy = getIsBusy(state.status);
        state.root.className = mergeClasses(presenceBadgeClassNames.root, rootClassName, isBusy && styles.statusBusy, state.status === "away" && styles.statusAway, state.status === "available" && styles.statusAvailable, state.status === "offline" && styles.statusOffline, state.status === "out-of-office" && styles.statusOutOfOffice, state.status === "unknown" && styles.statusUnknown, state.outOfOffice && styles.outOfOffice, state.outOfOffice && state.status === "available" && styles.outOfOfficeAvailable, state.outOfOffice && isBusy && styles.outOfOfficeBusy, state.outOfOffice && (state.status === "out-of-office" || state.status === "away" || state.status === "offline") && styles.statusOutOfOffice, state.outOfOffice && state.status === "unknown" && styles.outOfOfficeUnknown, state.size === "tiny" && styles.tiny, state.size === "large" && styles.large, state.size === "extra-large" && styles.extraLarge, state.root.className);
        if (state.icon) {
          state.icon.className = mergeClasses(presenceBadgeClassNames.icon, iconClassName, state.icon.className);
        }
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-badge/lib/components/PresenceBadge/PresenceBadge.js
  var React46, PresenceBadge;
  var init_PresenceBadge = __esm({
    "node_modules/@fluentui/react-badge/lib/components/PresenceBadge/PresenceBadge.js"() {
      React46 = __toESM(require_react());
      init_usePresenceBadge();
      init_usePresenceBadgeStyles_styles();
      init_lib();
      init_Badge2();
      PresenceBadge = /* @__PURE__ */ React46.forwardRef((props, ref) => {
        const state = usePresenceBadge_unstable(props, ref);
        usePresenceBadgeStyles_unstable(state);
        useCustomStyleHook("usePresenceBadgeStyles_unstable")(state);
        return renderBadge_unstable(state);
      });
      PresenceBadge.displayName = "PresenceBadge";
    }
  });

  // node_modules/@fluentui/react-badge/lib/components/PresenceBadge/index.js
  var init_PresenceBadge2 = __esm({
    "node_modules/@fluentui/react-badge/lib/components/PresenceBadge/index.js"() {
      init_PresenceBadge();
    }
  });

  // node_modules/@fluentui/react-badge/lib/PresenceBadge.js
  var init_PresenceBadge3 = __esm({
    "node_modules/@fluentui/react-badge/lib/PresenceBadge.js"() {
      init_PresenceBadge2();
    }
  });

  // node_modules/@fluentui/react-badge/lib/index.js
  var init_lib11 = __esm({
    "node_modules/@fluentui/react-badge/lib/index.js"() {
      init_PresenceBadge3();
    }
  });

  // node_modules/@fluentui/react-avatar/lib/contexts/AvatarContext.js
  var React47, avatarContext, avatarContextDefaultValue, AvatarContextProvider, useAvatarContext;
  var init_AvatarContext = __esm({
    "node_modules/@fluentui/react-avatar/lib/contexts/AvatarContext.js"() {
      React47 = __toESM(require_react());
      avatarContext = React47.createContext(void 0);
      avatarContextDefaultValue = {};
      AvatarContextProvider = avatarContext.Provider;
      useAvatarContext = () => {
        var _React_useContext;
        return (_React_useContext = React47.useContext(avatarContext)) !== null && _React_useContext !== void 0 ? _React_useContext : avatarContextDefaultValue;
      };
    }
  });

  // node_modules/@fluentui/react-avatar/lib/components/Avatar/useAvatar.js
  var React48, DEFAULT_STRINGS2, useAvatar_unstable, getBadgeSize, avatarColors, getHashCode;
  var init_useAvatar = __esm({
    "node_modules/@fluentui/react-avatar/lib/components/Avatar/useAvatar.js"() {
      React48 = __toESM(require_react());
      init_lib2();
      init_utils2();
      init_lib10();
      init_lib11();
      init_lib();
      init_AvatarContext();
      DEFAULT_STRINGS2 = {
        active: "active",
        inactive: "inactive"
      };
      useAvatar_unstable = (props, ref) => {
        const { dir } = useFluent();
        const { shape: contextShape, size: contextSize } = useAvatarContext();
        const { name, size = contextSize !== null && contextSize !== void 0 ? contextSize : 32, shape = contextShape !== null && contextShape !== void 0 ? contextShape : "circular", active = "unset", activeAppearance = "ring", idForColor } = props;
        let { color = "neutral" } = props;
        if (color === "colorful") {
          var _ref;
          color = avatarColors[getHashCode((_ref = idForColor !== null && idForColor !== void 0 ? idForColor : name) !== null && _ref !== void 0 ? _ref : "") % avatarColors.length];
        }
        const baseId = useId2("avatar-");
        const root = slot_exports.always(getIntrinsicElementProps(
          "span",
          {
            role: "img",
            id: baseId,
            // aria-label and/or aria-labelledby are resolved below
            ...props,
            ref
          },
          /* excludedPropNames: */
          [
            "name"
          ]
        ), {
          elementType: "span"
        });
        const [imageHidden, setImageHidden] = React48.useState(void 0);
        let image = slot_exports.optional(props.image, {
          defaultProps: {
            alt: "",
            role: "presentation",
            "aria-hidden": true,
            hidden: imageHidden
          },
          elementType: "img"
        });
        if (!(image === null || image === void 0 ? void 0 : image.src)) {
          image = void 0;
        }
        if (image) {
          image.onError = mergeCallbacks(image.onError, () => setImageHidden(true));
          image.onLoad = mergeCallbacks(image.onLoad, () => setImageHidden(void 0));
        }
        let initials = slot_exports.optional(props.initials, {
          renderByDefault: true,
          defaultProps: {
            children: getInitials(name, dir === "rtl", {
              firstInitialOnly: size <= 16
            }),
            id: baseId + "__initials"
          },
          elementType: "span"
        });
        if (!(initials === null || initials === void 0 ? void 0 : initials.children)) {
          initials = void 0;
        }
        let icon = void 0;
        if (!initials && (!image || imageHidden)) {
          icon = slot_exports.optional(props.icon, {
            renderByDefault: true,
            defaultProps: {
              children: /* @__PURE__ */ React48.createElement(PersonRegular, null),
              "aria-hidden": true
            },
            elementType: "span"
          });
        }
        const badge = slot_exports.optional(props.badge, {
          defaultProps: {
            size: getBadgeSize(size),
            id: baseId + "__badge"
          },
          elementType: PresenceBadge
        });
        let activeAriaLabelElement;
        if (!root["aria-label"] && !root["aria-labelledby"]) {
          if (name) {
            root["aria-label"] = name;
            if (badge) {
              root["aria-labelledby"] = root.id + " " + badge.id;
            }
          } else if (initials) {
            root["aria-labelledby"] = initials.id + (badge ? " " + badge.id : "");
          }
          if (active === "active" || active === "inactive") {
            const activeText = DEFAULT_STRINGS2[active];
            if (root["aria-labelledby"]) {
              const activeId = baseId + "__active";
              root["aria-labelledby"] += " " + activeId;
              activeAriaLabelElement = /* @__PURE__ */ React48.createElement("span", {
                hidden: true,
                id: activeId
              }, activeText);
            } else if (root["aria-label"]) {
              root["aria-label"] += " " + activeText;
            }
          }
        }
        return {
          size,
          shape,
          active,
          activeAppearance,
          activeAriaLabelElement,
          color,
          components: {
            root: "span",
            initials: "span",
            icon: "span",
            image: "img",
            badge: PresenceBadge
          },
          root,
          initials,
          icon,
          image,
          badge
        };
      };
      getBadgeSize = (size) => {
        if (size >= 96) {
          return "extra-large";
        } else if (size >= 64) {
          return "large";
        } else if (size >= 56) {
          return "medium";
        } else if (size >= 40) {
          return "small";
        } else if (size >= 28) {
          return "extra-small";
        } else {
          return "tiny";
        }
      };
      avatarColors = [
        "dark-red",
        "cranberry",
        "red",
        "pumpkin",
        "peach",
        "marigold",
        "gold",
        "brass",
        "brown",
        "forest",
        "seafoam",
        "dark-green",
        "light-teal",
        "teal",
        "steel",
        "blue",
        "royal-blue",
        "cornflower",
        "navy",
        "lavender",
        "purple",
        "grape",
        "lilac",
        "pink",
        "magenta",
        "plum",
        "beige",
        "mink",
        "platinum",
        "anchor"
      ];
      getHashCode = (str) => {
        let hashCode = 0;
        for (let len = str.length - 1; len >= 0; len--) {
          const ch = str.charCodeAt(len);
          const shift = len % 8;
          hashCode ^= (ch << shift) + (ch >> 8 - shift);
        }
        return hashCode;
      };
    }
  });

  // node_modules/@fluentui/react-avatar/lib/components/Avatar/useAvatarStyles.styles.js
  var avatarClassNames, useRootClassName2, useImageClassName, useIconInitialsClassName, useStyles3, useSizeStyles, useColorStyles, useRingColorStyles, useAvatarStyles_unstable;
  var init_useAvatarStyles_styles = __esm({
    "node_modules/@fluentui/react-avatar/lib/components/Avatar/useAvatarStyles.styles.js"() {
      init_index_esm2();
      avatarClassNames = {
        root: "fui-Avatar",
        image: "fui-Avatar__image",
        initials: "fui-Avatar__initials",
        icon: "fui-Avatar__icon",
        badge: "fui-Avatar__badge"
      };
      useRootClassName2 = /* @__PURE__ */ __resetStyles2("r81b29z", "r1aatmv", {
        r: [".r81b29z{display:inline-block;flex-shrink:0;position:relative;vertical-align:middle;border-radius:var(--borderRadiusCircular);font-family:var(--fontFamilyBase);font-weight:var(--fontWeightSemibold);font-size:var(--fontSizeBase300);width:32px;height:32px;}", ".r81b29z::before,.r81b29z::after{position:absolute;top:0;left:0;bottom:0;right:0;z-index:-1;margin:calc(-2 * var(--fui-Avatar-ringWidth, 0px));border-radius:inherit;transition-property:margin,opacity;transition-timing-function:var(--curveEasyEaseMax),var(--curveLinear);transition-duration:var(--durationUltraSlow),var(--durationSlower);}", ".r81b29z::before{border-style:solid;border-width:var(--fui-Avatar-ringWidth);}", ".r1aatmv{display:inline-block;flex-shrink:0;position:relative;vertical-align:middle;border-radius:var(--borderRadiusCircular);font-family:var(--fontFamilyBase);font-weight:var(--fontWeightSemibold);font-size:var(--fontSizeBase300);width:32px;height:32px;}", ".r1aatmv::before,.r1aatmv::after{position:absolute;top:0;right:0;bottom:0;left:0;z-index:-1;margin:calc(-2 * var(--fui-Avatar-ringWidth, 0px));border-radius:inherit;transition-property:margin,opacity;transition-timing-function:var(--curveEasyEaseMax),var(--curveLinear);transition-duration:var(--durationUltraSlow),var(--durationSlower);}", ".r1aatmv::before{border-style:solid;border-width:var(--fui-Avatar-ringWidth);}"],
        s: ["@media screen and (prefers-reduced-motion: reduce){.r81b29z::before,.r81b29z::after{transition-duration:0.01ms;}}", "@media screen and (prefers-reduced-motion: reduce){.r1aatmv::before,.r1aatmv::after{transition-duration:0.01ms;}}"]
      });
      useImageClassName = /* @__PURE__ */ __resetStyles2("r136dc0n", "rjly0nl", [".r136dc0n{position:absolute;top:0;left:0;width:100%;height:100%;border-radius:inherit;object-fit:cover;vertical-align:top;}", ".rjly0nl{position:absolute;top:0;right:0;width:100%;height:100%;border-radius:inherit;object-fit:cover;vertical-align:top;}"]);
      useIconInitialsClassName = /* @__PURE__ */ __resetStyles2("rip04v", "r31uzil", [".rip04v{position:absolute;box-sizing:border-box;top:0;left:0;width:100%;height:100%;line-height:1;border:var(--strokeWidthThin) solid var(--colorTransparentStroke);display:flex;align-items:center;justify-content:center;vertical-align:center;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;border-radius:inherit;}", ".r31uzil{position:absolute;box-sizing:border-box;top:0;right:0;width:100%;height:100%;line-height:1;border:var(--strokeWidthThin) solid var(--colorTransparentStroke);display:flex;align-items:center;justify-content:center;vertical-align:center;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;border-radius:inherit;}"]);
      useStyles3 = /* @__PURE__ */ __styles2({
        textCaption2Strong: {
          Be2twd7: "f13mqy1h"
        },
        textCaption1Strong: {
          Be2twd7: "fy9rknc"
        },
        textSubtitle2: {
          Be2twd7: "fod5ikn"
        },
        textSubtitle1: {
          Be2twd7: "f1pp30po"
        },
        textTitle3: {
          Be2twd7: "f1x0m3f5"
        },
        squareSmall: {
          Beyfa6y: 0,
          Bbmb7ep: 0,
          Btl43ni: 0,
          B7oj6ja: 0,
          Dimara: "fq9zq91"
        },
        squareMedium: {
          Beyfa6y: 0,
          Bbmb7ep: 0,
          Btl43ni: 0,
          B7oj6ja: 0,
          Dimara: "ft85np5"
        },
        squareLarge: {
          Beyfa6y: 0,
          Bbmb7ep: 0,
          Btl43ni: 0,
          B7oj6ja: 0,
          Dimara: "f1o0qvyv"
        },
        squareXLarge: {
          Beyfa6y: 0,
          Bbmb7ep: 0,
          Btl43ni: 0,
          B7oj6ja: 0,
          Dimara: "f1kijzfu"
        },
        activeOrInactive: {
          Bz10aip: "ftfx35i",
          Bmy1vo4: "fv0atk9",
          B3o57yi: "f1iry5bo",
          Bkqvd7p: "f15n41j8",
          Hwfdqs: "f1onx1g3"
        },
        ring: {
          Ftih45: "f1wl9k8s"
        },
        ringBadgeCutout: {
          f4a502: "fp2gujx"
        },
        ringThick: {
          of393c: "fq1w1vq"
        },
        ringThicker: {
          of393c: "fzg6ace"
        },
        ringThickest: {
          of393c: "f1nu8p71"
        },
        shadow: {
          Bsft5z2: "f13zj6fq"
        },
        shadow4: {
          Be6vj1x: "fcjn15l"
        },
        shadow8: {
          Be6vj1x: "f1tm8t9f"
        },
        shadow16: {
          Be6vj1x: "f1a1aohj"
        },
        shadow28: {
          Be6vj1x: "fond6v5"
        },
        inactive: {
          abs64n: "fp25eh",
          Bz10aip: "f1clczzi",
          Bkqvd7p: "f1l3s34x",
          Bfgortx: 0,
          Bnvr3x9: 0,
          b2tv09: 0,
          Bucmhp4: 0,
          iayac2: "flkahu5",
          b6ubon: "fw457kn",
          Bqinb2h: "f1wmllxl"
        },
        badge: {
          qhf8xq: "f1euv43f",
          B5kzvoi: "f1yab3r1",
          j35jbq: ["f1e31b4d", "f1vgc2s3"]
        },
        badgeCutout: {
          btxmck: "f1eugkqs"
        },
        badgeAlign: {
          Dnlfbu: ["f1tlnv9o", "f1y9kyih"]
        },
        tiny: {
          Bdjeniz: "f1uwoubl",
          niu6jh: "fid048z"
        },
        "extra-small": {
          Bdjeniz: "f13ar0e0",
          niu6jh: "fid048z"
        },
        small: {
          Bdjeniz: "fwwuruf",
          niu6jh: "fid048z"
        },
        medium: {
          Bdjeniz: "f1af27q5",
          niu6jh: "fid048z"
        },
        large: {
          Bdjeniz: "f18yy57a",
          niu6jh: "f924bxt"
        },
        "extra-large": {
          Bdjeniz: "f2jg042",
          niu6jh: "f924bxt"
        },
        icon12: {
          Be2twd7: "f1ugzwwg"
        },
        icon16: {
          Be2twd7: "f4ybsrx"
        },
        icon20: {
          Be2twd7: "fe5j1ua"
        },
        icon24: {
          Be2twd7: "f1rt2boy"
        },
        icon28: {
          Be2twd7: "f24l1pt"
        },
        icon32: {
          Be2twd7: "ffl51b"
        },
        icon48: {
          Be2twd7: "f18m8u13"
        }
      }, {
        d: [".f13mqy1h{font-size:var(--fontSizeBase100);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".f1pp30po{font-size:var(--fontSizeBase500);}", ".f1x0m3f5{font-size:var(--fontSizeBase600);}", [".fq9zq91{border-radius:var(--borderRadiusSmall);}", {
          p: -1
        }], [".ft85np5{border-radius:var(--borderRadiusMedium);}", {
          p: -1
        }], [".f1o0qvyv{border-radius:var(--borderRadiusLarge);}", {
          p: -1
        }], [".f1kijzfu{border-radius:var(--borderRadiusXLarge);}", {
          p: -1
        }], ".ftfx35i{transform:perspective(1px);}", ".fv0atk9{transition-property:transform,opacity;}", ".f1iry5bo{transition-duration:var(--durationUltraSlow),var(--durationFaster);}", ".f15n41j8{transition-timing-function:var(--curveEasyEaseMax),var(--curveLinear);}", '.f1wl9k8s::before{content:"";}', ".fp2gujx::before{-webkit-mask-image:radial-gradient(circle at bottom calc(var(--fui-Avatar-badgeRadius) + 2 * var(--fui-Avatar-ringWidth)) var(--fui-Avatar-badgeAlign) calc(var(--fui-Avatar-badgeRadius) + 2 * var(--fui-Avatar-ringWidth)), transparent calc(var(--fui-Avatar-badgeRadius) + var(--fui-Avatar-badgeGap) - 0.25px), white calc(var(--fui-Avatar-badgeRadius) + var(--fui-Avatar-badgeGap) + 0.25px));mask-image:radial-gradient(circle at bottom calc(var(--fui-Avatar-badgeRadius) + 2 * var(--fui-Avatar-ringWidth)) var(--fui-Avatar-badgeAlign) calc(var(--fui-Avatar-badgeRadius) + 2 * var(--fui-Avatar-ringWidth)), transparent calc(var(--fui-Avatar-badgeRadius) + var(--fui-Avatar-badgeGap) - 0.25px), white calc(var(--fui-Avatar-badgeRadius) + var(--fui-Avatar-badgeGap) + 0.25px));}", ".fq1w1vq{--fui-Avatar-ringWidth:var(--strokeWidthThick);}", ".fzg6ace{--fui-Avatar-ringWidth:var(--strokeWidthThicker);}", ".f1nu8p71{--fui-Avatar-ringWidth:var(--strokeWidthThickest);}", '.f13zj6fq::after{content:"";}', ".fcjn15l::after{box-shadow:var(--shadow4);}", ".f1tm8t9f::after{box-shadow:var(--shadow8);}", ".f1a1aohj::after{box-shadow:var(--shadow16);}", ".fond6v5::after{box-shadow:var(--shadow28);}", ".fp25eh{opacity:0.8;}", ".f1clczzi{transform:scale(0.875);}", ".f1l3s34x{transition-timing-function:var(--curveDecelerateMin),var(--curveLinear);}", [".flkahu5::before,.flkahu5::after{margin:0;}", {
          p: -1
        }], ".fw457kn::before,.fw457kn::after{opacity:0;}", ".f1wmllxl::before,.f1wmllxl::after{transition-timing-function:var(--curveDecelerateMin),var(--curveLinear);}", ".f1euv43f{position:absolute;}", ".f1yab3r1{bottom:0;}", ".f1e31b4d{right:0;}", ".f1vgc2s3{left:0;}", ".f1eugkqs{-webkit-mask-image:radial-gradient(circle at bottom var(--fui-Avatar-badgeRadius) var(--fui-Avatar-badgeAlign) var(--fui-Avatar-badgeRadius), transparent calc(var(--fui-Avatar-badgeRadius) + var(--fui-Avatar-badgeGap) - 0.25px), white calc(var(--fui-Avatar-badgeRadius) + var(--fui-Avatar-badgeGap) + 0.25px));mask-image:radial-gradient(circle at bottom var(--fui-Avatar-badgeRadius) var(--fui-Avatar-badgeAlign) var(--fui-Avatar-badgeRadius), transparent calc(var(--fui-Avatar-badgeRadius) + var(--fui-Avatar-badgeGap) - 0.25px), white calc(var(--fui-Avatar-badgeRadius) + var(--fui-Avatar-badgeGap) + 0.25px));}", ".f1tlnv9o{--fui-Avatar-badgeAlign:right;}", ".f1y9kyih{--fui-Avatar-badgeAlign:left;}", ".f1uwoubl{--fui-Avatar-badgeRadius:3px;}", ".fid048z{--fui-Avatar-badgeGap:var(--strokeWidthThin);}", ".f13ar0e0{--fui-Avatar-badgeRadius:5px;}", ".fwwuruf{--fui-Avatar-badgeRadius:6px;}", ".f1af27q5{--fui-Avatar-badgeRadius:8px;}", ".f18yy57a{--fui-Avatar-badgeRadius:10px;}", ".f924bxt{--fui-Avatar-badgeGap:var(--strokeWidthThick);}", ".f2jg042{--fui-Avatar-badgeRadius:14px;}", ".f1ugzwwg{font-size:12px;}", ".f4ybsrx{font-size:16px;}", ".fe5j1ua{font-size:20px;}", ".f1rt2boy{font-size:24px;}", ".f24l1pt{font-size:28px;}", ".ffl51b{font-size:32px;}", ".f18m8u13{font-size:48px;}"],
        m: [["@media screen and (prefers-reduced-motion: reduce){.f1onx1g3{transition-duration:0.01ms;}}", {
          m: "screen and (prefers-reduced-motion: reduce)"
        }]]
      });
      useSizeStyles = /* @__PURE__ */ __styles2({
        "16": {
          a9b677: "fjw5fx7",
          Bqenvij: "fd461yt"
        },
        "20": {
          a9b677: "f64fuq3",
          Bqenvij: "fjamq6b"
        },
        "24": {
          a9b677: "fq4mcun",
          Bqenvij: "frvgh55"
        },
        "28": {
          a9b677: "f1w9dchk",
          Bqenvij: "fxldao9"
        },
        "32": {
          a9b677: "f1szoe96",
          Bqenvij: "f1d2rq10"
        },
        "36": {
          a9b677: "fpdz1er",
          Bqenvij: "f8ljn23"
        },
        "40": {
          a9b677: "feqmc2u",
          Bqenvij: "fbhnoac"
        },
        "48": {
          a9b677: "f124akge",
          Bqenvij: "ff2sm71"
        },
        "56": {
          a9b677: "f1u66zr1",
          Bqenvij: "fzki0ko"
        },
        "64": {
          a9b677: "fa9ln6p",
          Bqenvij: "f16k9i2m"
        },
        "72": {
          a9b677: "fhcae8x",
          Bqenvij: "f1shusfg"
        },
        "96": {
          a9b677: "f1kyr2gn",
          Bqenvij: "fypu0ge"
        },
        "120": {
          a9b677: "fwfqyga",
          Bqenvij: "fjr5b71"
        },
        "128": {
          a9b677: "f1iksgmy",
          Bqenvij: "fele2au"
        }
      }, {
        d: [".fjw5fx7{width:16px;}", ".fd461yt{height:16px;}", ".f64fuq3{width:20px;}", ".fjamq6b{height:20px;}", ".fq4mcun{width:24px;}", ".frvgh55{height:24px;}", ".f1w9dchk{width:28px;}", ".fxldao9{height:28px;}", ".f1szoe96{width:32px;}", ".f1d2rq10{height:32px;}", ".fpdz1er{width:36px;}", ".f8ljn23{height:36px;}", ".feqmc2u{width:40px;}", ".fbhnoac{height:40px;}", ".f124akge{width:48px;}", ".ff2sm71{height:48px;}", ".f1u66zr1{width:56px;}", ".fzki0ko{height:56px;}", ".fa9ln6p{width:64px;}", ".f16k9i2m{height:64px;}", ".fhcae8x{width:72px;}", ".f1shusfg{height:72px;}", ".f1kyr2gn{width:96px;}", ".fypu0ge{height:96px;}", ".fwfqyga{width:120px;}", ".fjr5b71{height:120px;}", ".f1iksgmy{width:128px;}", ".fele2au{height:128px;}"]
      });
      useColorStyles = /* @__PURE__ */ __styles2({
        neutral: {
          sj55zd: "f11d4kpn",
          De3pzq: "f18f03hv"
        },
        brand: {
          sj55zd: "fonrgv7",
          De3pzq: "f1blnnmj"
        },
        "dark-red": {
          sj55zd: "fqjd1y1",
          De3pzq: "f1vq2oo4"
        },
        cranberry: {
          sj55zd: "fg9gses",
          De3pzq: "f1lwxszt"
        },
        red: {
          sj55zd: "f23f7i0",
          De3pzq: "f1q9qhfq"
        },
        pumpkin: {
          sj55zd: "fjnan08",
          De3pzq: "fz91bi3"
        },
        peach: {
          sj55zd: "fknu15p",
          De3pzq: "f1b9nr51"
        },
        marigold: {
          sj55zd: "f9603vw",
          De3pzq: "f3z4w6d"
        },
        gold: {
          sj55zd: "fmq0uwp",
          De3pzq: "fg50kya"
        },
        brass: {
          sj55zd: "f28g5vo",
          De3pzq: "f4w2gd0"
        },
        brown: {
          sj55zd: "ftl572b",
          De3pzq: "f14wu1f4"
        },
        forest: {
          sj55zd: "f1gymlvd",
          De3pzq: "f19ut4y6"
        },
        seafoam: {
          sj55zd: "fnnb6wn",
          De3pzq: "f1n057jc"
        },
        "dark-green": {
          sj55zd: "ff58qw8",
          De3pzq: "f11t05wk"
        },
        "light-teal": {
          sj55zd: "f1up9qbj",
          De3pzq: "f42feg1"
        },
        teal: {
          sj55zd: "f135dsb4",
          De3pzq: "f6hvv1p"
        },
        steel: {
          sj55zd: "f151dlcp",
          De3pzq: "f1lnp8zf"
        },
        blue: {
          sj55zd: "f1rjv50u",
          De3pzq: "f1ggcpy6"
        },
        "royal-blue": {
          sj55zd: "f1emykk5",
          De3pzq: "f12rj61f"
        },
        cornflower: {
          sj55zd: "fqsigj7",
          De3pzq: "f8k7hur"
        },
        navy: {
          sj55zd: "f1nj97xi",
          De3pzq: "f19gw0ux"
        },
        lavender: {
          sj55zd: "fwctg0i",
          De3pzq: "ff379vm"
        },
        purple: {
          sj55zd: "fjrsgpu",
          De3pzq: "f1mzf1e1"
        },
        grape: {
          sj55zd: "f1fiiydq",
          De3pzq: "f1o4k8oy"
        },
        lilac: {
          sj55zd: "f1res9jt",
          De3pzq: "f1x6mz1o"
        },
        pink: {
          sj55zd: "fv3fbbi",
          De3pzq: "fydlv6t"
        },
        magenta: {
          sj55zd: "f1f1fwnz",
          De3pzq: "f4xb6j5"
        },
        plum: {
          sj55zd: "f8ptl6j",
          De3pzq: "fqo8e26"
        },
        beige: {
          sj55zd: "f1ntv3ld",
          De3pzq: "f101elhj"
        },
        mink: {
          sj55zd: "f1fscmp",
          De3pzq: "f13g8o5c"
        },
        platinum: {
          sj55zd: "f1dr00v2",
          De3pzq: "fkh7blw"
        },
        anchor: {
          sj55zd: "f1f3ti53",
          De3pzq: "fu4yj0j"
        }
      }, {
        d: [".f11d4kpn{color:var(--colorNeutralForeground3);}", ".f18f03hv{background-color:var(--colorNeutralBackground6);}", ".fonrgv7{color:var(--colorNeutralForegroundStaticInverted);}", ".f1blnnmj{background-color:var(--colorBrandBackgroundStatic);}", ".fqjd1y1{color:var(--colorPaletteDarkRedForeground2);}", ".f1vq2oo4{background-color:var(--colorPaletteDarkRedBackground2);}", ".fg9gses{color:var(--colorPaletteCranberryForeground2);}", ".f1lwxszt{background-color:var(--colorPaletteCranberryBackground2);}", ".f23f7i0{color:var(--colorPaletteRedForeground2);}", ".f1q9qhfq{background-color:var(--colorPaletteRedBackground2);}", ".fjnan08{color:var(--colorPalettePumpkinForeground2);}", ".fz91bi3{background-color:var(--colorPalettePumpkinBackground2);}", ".fknu15p{color:var(--colorPalettePeachForeground2);}", ".f1b9nr51{background-color:var(--colorPalettePeachBackground2);}", ".f9603vw{color:var(--colorPaletteMarigoldForeground2);}", ".f3z4w6d{background-color:var(--colorPaletteMarigoldBackground2);}", ".fmq0uwp{color:var(--colorPaletteGoldForeground2);}", ".fg50kya{background-color:var(--colorPaletteGoldBackground2);}", ".f28g5vo{color:var(--colorPaletteBrassForeground2);}", ".f4w2gd0{background-color:var(--colorPaletteBrassBackground2);}", ".ftl572b{color:var(--colorPaletteBrownForeground2);}", ".f14wu1f4{background-color:var(--colorPaletteBrownBackground2);}", ".f1gymlvd{color:var(--colorPaletteForestForeground2);}", ".f19ut4y6{background-color:var(--colorPaletteForestBackground2);}", ".fnnb6wn{color:var(--colorPaletteSeafoamForeground2);}", ".f1n057jc{background-color:var(--colorPaletteSeafoamBackground2);}", ".ff58qw8{color:var(--colorPaletteDarkGreenForeground2);}", ".f11t05wk{background-color:var(--colorPaletteDarkGreenBackground2);}", ".f1up9qbj{color:var(--colorPaletteLightTealForeground2);}", ".f42feg1{background-color:var(--colorPaletteLightTealBackground2);}", ".f135dsb4{color:var(--colorPaletteTealForeground2);}", ".f6hvv1p{background-color:var(--colorPaletteTealBackground2);}", ".f151dlcp{color:var(--colorPaletteSteelForeground2);}", ".f1lnp8zf{background-color:var(--colorPaletteSteelBackground2);}", ".f1rjv50u{color:var(--colorPaletteBlueForeground2);}", ".f1ggcpy6{background-color:var(--colorPaletteBlueBackground2);}", ".f1emykk5{color:var(--colorPaletteRoyalBlueForeground2);}", ".f12rj61f{background-color:var(--colorPaletteRoyalBlueBackground2);}", ".fqsigj7{color:var(--colorPaletteCornflowerForeground2);}", ".f8k7hur{background-color:var(--colorPaletteCornflowerBackground2);}", ".f1nj97xi{color:var(--colorPaletteNavyForeground2);}", ".f19gw0ux{background-color:var(--colorPaletteNavyBackground2);}", ".fwctg0i{color:var(--colorPaletteLavenderForeground2);}", ".ff379vm{background-color:var(--colorPaletteLavenderBackground2);}", ".fjrsgpu{color:var(--colorPalettePurpleForeground2);}", ".f1mzf1e1{background-color:var(--colorPalettePurpleBackground2);}", ".f1fiiydq{color:var(--colorPaletteGrapeForeground2);}", ".f1o4k8oy{background-color:var(--colorPaletteGrapeBackground2);}", ".f1res9jt{color:var(--colorPaletteLilacForeground2);}", ".f1x6mz1o{background-color:var(--colorPaletteLilacBackground2);}", ".fv3fbbi{color:var(--colorPalettePinkForeground2);}", ".fydlv6t{background-color:var(--colorPalettePinkBackground2);}", ".f1f1fwnz{color:var(--colorPaletteMagentaForeground2);}", ".f4xb6j5{background-color:var(--colorPaletteMagentaBackground2);}", ".f8ptl6j{color:var(--colorPalettePlumForeground2);}", ".fqo8e26{background-color:var(--colorPalettePlumBackground2);}", ".f1ntv3ld{color:var(--colorPaletteBeigeForeground2);}", ".f101elhj{background-color:var(--colorPaletteBeigeBackground2);}", ".f1fscmp{color:var(--colorPaletteMinkForeground2);}", ".f13g8o5c{background-color:var(--colorPaletteMinkBackground2);}", ".f1dr00v2{color:var(--colorPalettePlatinumForeground2);}", ".fkh7blw{background-color:var(--colorPalettePlatinumBackground2);}", ".f1f3ti53{color:var(--colorPaletteAnchorForeground2);}", ".fu4yj0j{background-color:var(--colorPaletteAnchorBackground2);}"]
      });
      useRingColorStyles = /* @__PURE__ */ __styles2({
        neutral: {
          Bic5iru: "f1uuiafn"
        },
        brand: {
          Bic5iru: "f1uuiafn"
        },
        "dark-red": {
          Bic5iru: "f1t2x9on"
        },
        cranberry: {
          Bic5iru: "f1pvshc9"
        },
        red: {
          Bic5iru: "f1ectbk9"
        },
        pumpkin: {
          Bic5iru: "fvzpl0b"
        },
        peach: {
          Bic5iru: "fwj2kd7"
        },
        marigold: {
          Bic5iru: "fr120vy"
        },
        gold: {
          Bic5iru: "f8xmmar"
        },
        brass: {
          Bic5iru: "f1hbety2"
        },
        brown: {
          Bic5iru: "f1vg3s4g"
        },
        forest: {
          Bic5iru: "f1m3olm5"
        },
        seafoam: {
          Bic5iru: "f17xiqtr"
        },
        "dark-green": {
          Bic5iru: "fx32vyh"
        },
        "light-teal": {
          Bic5iru: "f1mkihwv"
        },
        teal: {
          Bic5iru: "fecnooh"
        },
        steel: {
          Bic5iru: "f15hfgzm"
        },
        blue: {
          Bic5iru: "fqproka"
        },
        "royal-blue": {
          Bic5iru: "f17v2w59"
        },
        cornflower: {
          Bic5iru: "fp0q1mo"
        },
        navy: {
          Bic5iru: "f1nlym55"
        },
        lavender: {
          Bic5iru: "f62vk8h"
        },
        purple: {
          Bic5iru: "f15zl69q"
        },
        grape: {
          Bic5iru: "f53w4j7"
        },
        lilac: {
          Bic5iru: "fu2771t"
        },
        pink: {
          Bic5iru: "fzflscs"
        },
        magenta: {
          Bic5iru: "fb6rmqc"
        },
        plum: {
          Bic5iru: "f1a4gm5b"
        },
        beige: {
          Bic5iru: "f1qpf9z1"
        },
        mink: {
          Bic5iru: "f1l7or83"
        },
        platinum: {
          Bic5iru: "fzrj0iu"
        },
        anchor: {
          Bic5iru: "f8oz6wf"
        }
      }, {
        d: [".f1uuiafn::before{color:var(--colorBrandStroke1);}", ".f1t2x9on::before{color:var(--colorPaletteDarkRedBorderActive);}", ".f1pvshc9::before{color:var(--colorPaletteCranberryBorderActive);}", ".f1ectbk9::before{color:var(--colorPaletteRedBorderActive);}", ".fvzpl0b::before{color:var(--colorPalettePumpkinBorderActive);}", ".fwj2kd7::before{color:var(--colorPalettePeachBorderActive);}", ".fr120vy::before{color:var(--colorPaletteMarigoldBorderActive);}", ".f8xmmar::before{color:var(--colorPaletteGoldBorderActive);}", ".f1hbety2::before{color:var(--colorPaletteBrassBorderActive);}", ".f1vg3s4g::before{color:var(--colorPaletteBrownBorderActive);}", ".f1m3olm5::before{color:var(--colorPaletteForestBorderActive);}", ".f17xiqtr::before{color:var(--colorPaletteSeafoamBorderActive);}", ".fx32vyh::before{color:var(--colorPaletteDarkGreenBorderActive);}", ".f1mkihwv::before{color:var(--colorPaletteLightTealBorderActive);}", ".fecnooh::before{color:var(--colorPaletteTealBorderActive);}", ".f15hfgzm::before{color:var(--colorPaletteSteelBorderActive);}", ".fqproka::before{color:var(--colorPaletteBlueBorderActive);}", ".f17v2w59::before{color:var(--colorPaletteRoyalBlueBorderActive);}", ".fp0q1mo::before{color:var(--colorPaletteCornflowerBorderActive);}", ".f1nlym55::before{color:var(--colorPaletteNavyBorderActive);}", ".f62vk8h::before{color:var(--colorPaletteLavenderBorderActive);}", ".f15zl69q::before{color:var(--colorPalettePurpleBorderActive);}", ".f53w4j7::before{color:var(--colorPaletteGrapeBorderActive);}", ".fu2771t::before{color:var(--colorPaletteLilacBorderActive);}", ".fzflscs::before{color:var(--colorPalettePinkBorderActive);}", ".fb6rmqc::before{color:var(--colorPaletteMagentaBorderActive);}", ".f1a4gm5b::before{color:var(--colorPalettePlumBorderActive);}", ".f1qpf9z1::before{color:var(--colorPaletteBeigeBorderActive);}", ".f1l7or83::before{color:var(--colorPaletteMinkBorderActive);}", ".fzrj0iu::before{color:var(--colorPalettePlatinumBorderActive);}", ".f8oz6wf::before{color:var(--colorPaletteAnchorBorderActive);}"]
      });
      useAvatarStyles_unstable = (state) => {
        "use no memo";
        const {
          size,
          shape,
          active,
          activeAppearance,
          color
        } = state;
        const rootClassName = useRootClassName2();
        const imageClassName = useImageClassName();
        const iconInitialsClassName = useIconInitialsClassName();
        const styles = useStyles3();
        const sizeStyles = useSizeStyles();
        const colorStyles = useColorStyles();
        const ringColorStyles = useRingColorStyles();
        const rootClasses = [rootClassName, size !== 32 && sizeStyles[size]];
        if (state.badge) {
          rootClasses.push(styles.badgeAlign, styles[state.badge.size || "medium"]);
        }
        if (size <= 24) {
          rootClasses.push(styles.textCaption2Strong);
        } else if (size <= 28) {
          rootClasses.push(styles.textCaption1Strong);
        } else if (size <= 40) {
        } else if (size <= 56) {
          rootClasses.push(styles.textSubtitle2);
        } else if (size <= 96) {
          rootClasses.push(styles.textSubtitle1);
        } else {
          rootClasses.push(styles.textTitle3);
        }
        if (shape === "square") {
          if (size <= 24) {
            rootClasses.push(styles.squareSmall);
          } else if (size <= 48) {
            rootClasses.push(styles.squareMedium);
          } else if (size <= 72) {
            rootClasses.push(styles.squareLarge);
          } else {
            rootClasses.push(styles.squareXLarge);
          }
        }
        if (active === "active" || active === "inactive") {
          rootClasses.push(styles.activeOrInactive);
          if (activeAppearance === "ring" || activeAppearance === "ring-shadow") {
            rootClasses.push(styles.ring, ringColorStyles[color]);
            if (state.badge) {
              rootClasses.push(styles.ringBadgeCutout);
            }
            if (size <= 48) {
              rootClasses.push(styles.ringThick);
            } else if (size <= 64) {
              rootClasses.push(styles.ringThicker);
            } else {
              rootClasses.push(styles.ringThickest);
            }
          }
          if (activeAppearance === "shadow" || activeAppearance === "ring-shadow") {
            rootClasses.push(styles.shadow);
            if (size <= 28) {
              rootClasses.push(styles.shadow4);
            } else if (size <= 48) {
              rootClasses.push(styles.shadow8);
            } else if (size <= 64) {
              rootClasses.push(styles.shadow16);
            } else {
              rootClasses.push(styles.shadow28);
            }
          }
          if (active === "inactive") {
            rootClasses.push(styles.inactive);
          }
        }
        state.root.className = mergeClasses(avatarClassNames.root, ...rootClasses, state.root.className);
        if (state.badge) {
          state.badge.className = mergeClasses(avatarClassNames.badge, styles.badge, state.badge.className);
        }
        if (state.image) {
          state.image.className = mergeClasses(avatarClassNames.image, imageClassName, colorStyles[color], state.badge && styles.badgeCutout, state.image.className);
        }
        if (state.initials) {
          state.initials.className = mergeClasses(avatarClassNames.initials, iconInitialsClassName, colorStyles[color], state.badge && styles.badgeCutout, state.initials.className);
        }
        if (state.icon) {
          let iconSizeClass;
          if (size <= 16) {
            iconSizeClass = styles.icon12;
          } else if (size <= 24) {
            iconSizeClass = styles.icon16;
          } else if (size <= 40) {
            iconSizeClass = styles.icon20;
          } else if (size <= 48) {
            iconSizeClass = styles.icon24;
          } else if (size <= 56) {
            iconSizeClass = styles.icon28;
          } else if (size <= 72) {
            iconSizeClass = styles.icon32;
          } else {
            iconSizeClass = styles.icon48;
          }
          state.icon.className = mergeClasses(avatarClassNames.icon, iconInitialsClassName, iconSizeClass, colorStyles[color], state.badge && styles.badgeCutout, state.icon.className);
        }
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-avatar/lib/components/Avatar/Avatar.js
  var React49, Avatar;
  var init_Avatar = __esm({
    "node_modules/@fluentui/react-avatar/lib/components/Avatar/Avatar.js"() {
      React49 = __toESM(require_react());
      init_renderAvatar();
      init_useAvatar();
      init_lib();
      init_useAvatarStyles_styles();
      Avatar = /* @__PURE__ */ React49.forwardRef((props, ref) => {
        const state = useAvatar_unstable(props, ref);
        useAvatarStyles_unstable(state);
        useCustomStyleHook("useAvatarStyles_unstable")(state);
        return renderAvatar_unstable(state);
      });
      Avatar.displayName = "Avatar";
    }
  });

  // node_modules/@fluentui/react-avatar/lib/components/Avatar/index.js
  var init_Avatar2 = __esm({
    "node_modules/@fluentui/react-avatar/lib/components/Avatar/index.js"() {
      init_Avatar();
    }
  });

  // node_modules/@fluentui/react-avatar/lib/Avatar.js
  var init_Avatar3 = __esm({
    "node_modules/@fluentui/react-avatar/lib/Avatar.js"() {
      init_Avatar2();
    }
  });

  // node_modules/@fluentui/react-avatar/lib/index.js
  var init_lib12 = __esm({
    "node_modules/@fluentui/react-avatar/lib/index.js"() {
      init_Avatar3();
    }
  });

  // node_modules/@fluentui/react-button/lib/components/Button/renderButton.js
  var renderButton_unstable;
  var init_renderButton = __esm({
    "node_modules/@fluentui/react-button/lib/components/Button/renderButton.js"() {
      init_jsx_runtime();
      init_lib2();
      renderButton_unstable = (state) => {
        assertSlots(state);
        const { iconOnly, iconPosition } = state;
        return /* @__PURE__ */ jsxs(state.root, {
          children: [
            iconPosition !== "after" && state.icon && /* @__PURE__ */ jsx(state.icon, {}),
            !iconOnly && state.root.children,
            iconPosition === "after" && state.icon && /* @__PURE__ */ jsx(state.icon, {})
          ]
        });
      };
    }
  });

  // node_modules/@fluentui/react-button/lib/contexts/ButtonContext.js
  var React50, buttonContext, buttonContextDefaultValue, ButtonContextProvider, useButtonContext;
  var init_ButtonContext = __esm({
    "node_modules/@fluentui/react-button/lib/contexts/ButtonContext.js"() {
      React50 = __toESM(require_react());
      buttonContext = React50.createContext(void 0);
      buttonContextDefaultValue = {};
      ButtonContextProvider = buttonContext.Provider;
      useButtonContext = () => {
        var _React_useContext;
        return (_React_useContext = React50.useContext(buttonContext)) !== null && _React_useContext !== void 0 ? _React_useContext : buttonContextDefaultValue;
      };
    }
  });

  // node_modules/@fluentui/react-button/lib/components/Button/useButton.js
  var React51, useButton_unstable;
  var init_useButton = __esm({
    "node_modules/@fluentui/react-button/lib/components/Button/useButton.js"() {
      React51 = __toESM(require_react());
      init_lib9();
      init_lib2();
      init_ButtonContext();
      useButton_unstable = (props, ref) => {
        const { size: contextSize } = useButtonContext();
        const { appearance = "secondary", as = "button", disabled = false, disabledFocusable = false, icon, iconPosition = "before", shape = "rounded", size = contextSize !== null && contextSize !== void 0 ? contextSize : "medium" } = props;
        const iconShorthand = slot_exports.optional(icon, {
          elementType: "span"
        });
        return {
          // Props passed at the top-level
          appearance,
          disabled,
          disabledFocusable,
          iconPosition,
          shape,
          size,
          iconOnly: Boolean((iconShorthand === null || iconShorthand === void 0 ? void 0 : iconShorthand.children) && !props.children),
          components: {
            root: "button",
            icon: "span"
          },
          root: slot_exports.always(getIntrinsicElementProps(as, useARIAButtonProps(props.as, props)), {
            elementType: "button",
            defaultProps: {
              ref,
              type: as === "button" ? "button" : void 0
            }
          }),
          icon: iconShorthand
        };
      };
    }
  });

  // node_modules/@fluentui/react-button/lib/components/Button/useButtonStyles.styles.js
  var buttonClassNames, boxShadowStrokeWidthThinMoz, useRootBaseClassName, useIconBaseClassName, useRootStyles2, useRootDisabledStyles, useRootFocusStyles, useRootIconOnlyStyles, useIconStyles, useButtonStyles_unstable;
  var init_useButtonStyles_styles = __esm({
    "node_modules/@fluentui/react-button/lib/components/Button/useButtonStyles.styles.js"() {
      init_lib4();
      init_index_esm2();
      buttonClassNames = {
        root: "fui-Button",
        icon: "fui-Button__icon"
      };
      boxShadowStrokeWidthThinMoz = `calc(${tokens.strokeWidthThin} + 0.25px)`;
      useRootBaseClassName = /* @__PURE__ */ __resetStyles2("r1alrhcs", null, {
        r: [".r1alrhcs{align-items:center;box-sizing:border-box;display:inline-flex;justify-content:center;text-decoration-line:none;vertical-align:middle;margin:0;overflow:hidden;background-color:var(--colorNeutralBackground1);color:var(--colorNeutralForeground1);border:var(--strokeWidthThin) solid var(--colorNeutralStroke1);font-family:var(--fontFamilyBase);outline-style:none;padding:5px var(--spacingHorizontalM);min-width:96px;border-radius:var(--borderRadiusMedium);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightSemibold);line-height:var(--lineHeightBase300);transition-duration:var(--durationFaster);transition-property:background,border,color;transition-timing-function:var(--curveEasyEase);}", ".r1alrhcs:hover{background-color:var(--colorNeutralBackground1Hover);border-color:var(--colorNeutralStroke1Hover);color:var(--colorNeutralForeground1Hover);cursor:pointer;}", ".r1alrhcs:hover:active{background-color:var(--colorNeutralBackground1Pressed);border-color:var(--colorNeutralStroke1Pressed);color:var(--colorNeutralForeground1Pressed);outline-style:none;}", ".r1alrhcs[data-fui-focus-visible]{border-color:var(--colorStrokeFocus2);border-radius:var(--borderRadiusMedium);border-width:1px;outline:var(--strokeWidthThick) solid var(--colorTransparentStroke);box-shadow:0 0 0 var(--strokeWidthThin) var(--colorStrokeFocus2) inset;z-index:1;}"],
        s: ["@media screen and (prefers-reduced-motion: reduce){.r1alrhcs{transition-duration:0.01ms;}}", "@media (forced-colors: active){.r1alrhcs:focus{border-color:ButtonText;}.r1alrhcs:hover{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}.r1alrhcs:hover:active{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}}", "@supports (-moz-appearance:button){.r1alrhcs[data-fui-focus-visible]{box-shadow:0 0 0 calc(var(--strokeWidthThin) + 0.25px) var(--colorStrokeFocus2) inset;}}"]
      });
      useIconBaseClassName = /* @__PURE__ */ __resetStyles2("rywnvv2", null, [".rywnvv2{align-items:center;display:inline-flex;justify-content:center;font-size:20px;height:20px;width:20px;--fui-Button__icon--spacing:var(--spacingHorizontalSNudge);}"]);
      useRootStyles2 = /* @__PURE__ */ __styles2({
        outline: {
          De3pzq: "f1c21dwh",
          Jwef8y: "fjxutwb",
          iro3zm: "fwiml72"
        },
        primary: {
          De3pzq: "ffp7eso",
          g2u3we: "f1p3nwhy",
          h3c5rm: ["f11589ue", "f1pdflbu"],
          B9xav0g: "f1q5o8ev",
          zhjwy3: ["f1pdflbu", "f11589ue"],
          sj55zd: "f1phragk",
          Jwef8y: "f15wkkf3",
          Bgoe8wy: "f1s2uweq",
          Bwzppfd: ["fr80ssc", "fecsdlb"],
          oetu4i: "f1ukrpxl",
          gg5e9n: ["fecsdlb", "fr80ssc"],
          Bi91k9c: "f1rq72xc",
          iro3zm: "fnp9lpt",
          b661bw: "f1h0usnq",
          Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
          B9zn80p: "f16h9ulv",
          Bpld233: ["fx2bmrt", "fs4ktlq"],
          B2d53fq: "f1d6v5y2",
          Bsw6fvg: "f1rirnrt",
          Bjwas2f: "f1uu00uk",
          Bn1d65q: ["fkvaka8", "f9a0qzu"],
          Bxeuatn: "f1ux7til",
          n51gp8: ["f9a0qzu", "fkvaka8"],
          Bbusuzp: "f1lkg8j3",
          ycbfsm: "fkc42ay",
          Bqrx1nm: "fq7113v",
          pgvf35: "ff1wgvm",
          Bh7lczh: ["fiob0tu", "f1x4h75k"],
          dpv3f4: "f1j6scgf",
          Bpnjhaq: ["f1x4h75k", "fiob0tu"],
          ze5xyy: "f4xjyn1",
          g2kj27: "fbgcvur",
          Bf756sw: "f1ks1yx8",
          Bow2dr7: ["f1o6qegi", "fmxjhhp"],
          Bvhedfk: "fcnxywj",
          Gye4lf: ["fmxjhhp", "f1o6qegi"],
          pc6evw: "f9ddjv3"
        },
        secondary: {},
        subtle: {
          De3pzq: "fhovq9v",
          g2u3we: "f1p3nwhy",
          h3c5rm: ["f11589ue", "f1pdflbu"],
          B9xav0g: "f1q5o8ev",
          zhjwy3: ["f1pdflbu", "f11589ue"],
          sj55zd: "fkfq4zb",
          Jwef8y: "f1t94bn6",
          Bgoe8wy: "f1s2uweq",
          Bwzppfd: ["fr80ssc", "fecsdlb"],
          oetu4i: "f1ukrpxl",
          gg5e9n: ["fecsdlb", "fr80ssc"],
          Bi91k9c: "fnwyq0v",
          Bk3fhr4: "ft1hn21",
          Bmfj8id: "fuxngvv",
          Bbdnnc7: "fy5bs14",
          iro3zm: "fsv2rcd",
          b661bw: "f1h0usnq",
          Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
          B9zn80p: "f16h9ulv",
          Bpld233: ["fx2bmrt", "fs4ktlq"],
          B2d53fq: "f1omzyqd",
          em6i61: "f1dfjoow",
          vm6p8p: "f1j98vj9",
          x3br3k: "fj8yq94",
          ze5xyy: "f4xjyn1",
          Bx3q9su: "f1et0tmh",
          pc6evw: "f9ddjv3",
          xd2cci: "f1wi8ngl"
        },
        transparent: {
          De3pzq: "f1c21dwh",
          g2u3we: "f1p3nwhy",
          h3c5rm: ["f11589ue", "f1pdflbu"],
          B9xav0g: "f1q5o8ev",
          zhjwy3: ["f1pdflbu", "f11589ue"],
          sj55zd: "fkfq4zb",
          Jwef8y: "fjxutwb",
          Bgoe8wy: "f1s2uweq",
          Bwzppfd: ["fr80ssc", "fecsdlb"],
          oetu4i: "f1ukrpxl",
          gg5e9n: ["fecsdlb", "fr80ssc"],
          Bi91k9c: "f139oj5f",
          Bk3fhr4: "ft1hn21",
          Bmfj8id: "fuxngvv",
          iro3zm: "fwiml72",
          b661bw: "f1h0usnq",
          Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
          B9zn80p: "f16h9ulv",
          Bpld233: ["fx2bmrt", "fs4ktlq"],
          B2d53fq: "f1fg1p5m",
          em6i61: "f1dfjoow",
          vm6p8p: "f1j98vj9",
          Bqrx1nm: "f1tme0vf",
          ze5xyy: "f4xjyn1",
          g2kj27: "f18onu3q",
          pc6evw: "f9ddjv3"
        },
        circular: {
          Beyfa6y: 0,
          Bbmb7ep: 0,
          Btl43ni: 0,
          B7oj6ja: 0,
          Dimara: "f44lkw9"
        },
        rounded: {},
        square: {
          Beyfa6y: 0,
          Bbmb7ep: 0,
          Btl43ni: 0,
          B7oj6ja: 0,
          Dimara: "f1fabniw"
        },
        small: {
          Bf4jedk: "fh7ncta",
          Byoj8tv: 0,
          uwmqm3: 0,
          z189sj: 0,
          z8tnut: 0,
          B0ocmuz: "fneth5b",
          Beyfa6y: 0,
          Bbmb7ep: 0,
          Btl43ni: 0,
          B7oj6ja: 0,
          Dimara: "ft85np5",
          Be2twd7: "fy9rknc",
          Bhrd7zp: "figsok6",
          Bg96gwp: "fwrc4pm"
        },
        smallWithIcon: {
          Byoj8tv: "f1brlhvm",
          z8tnut: "f1sl3k7w"
        },
        medium: {},
        large: {
          Bf4jedk: "f14es27b",
          Byoj8tv: 0,
          uwmqm3: 0,
          z189sj: 0,
          z8tnut: 0,
          B0ocmuz: "f4db1ww",
          Beyfa6y: 0,
          Bbmb7ep: 0,
          Btl43ni: 0,
          B7oj6ja: 0,
          Dimara: "ft85np5",
          Be2twd7: "fod5ikn",
          Bhrd7zp: "fl43uef",
          Bg96gwp: "faaz57k"
        },
        largeWithIcon: {
          Byoj8tv: "fy7v416",
          z8tnut: "f1a1bwwz"
        }
      }, {
        d: [".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".ffp7eso{background-color:var(--colorBrandBackground);}", ".f1p3nwhy{border-top-color:transparent;}", ".f11589ue{border-right-color:transparent;}", ".f1pdflbu{border-left-color:transparent;}", ".f1q5o8ev{border-bottom-color:transparent;}", ".f1phragk{color:var(--colorNeutralForegroundOnBrand);}", ".fhovq9v{background-color:var(--colorSubtleBackground);}", ".fkfq4zb{color:var(--colorNeutralForeground2);}", [".f44lkw9{border-radius:var(--borderRadiusCircular);}", {
          p: -1
        }], [".f1fabniw{border-radius:var(--borderRadiusNone);}", {
          p: -1
        }], ".fh7ncta{min-width:64px;}", [".fneth5b{padding:3px var(--spacingHorizontalS);}", {
          p: -1
        }], [".ft85np5{border-radius:var(--borderRadiusMedium);}", {
          p: -1
        }], ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".f1brlhvm{padding-bottom:1px;}", ".f1sl3k7w{padding-top:1px;}", ".f14es27b{min-width:96px;}", [".f4db1ww{padding:8px var(--spacingHorizontalL);}", {
          p: -1
        }], [".ft85np5{border-radius:var(--borderRadiusMedium);}", {
          p: -1
        }], ".fod5ikn{font-size:var(--fontSizeBase400);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".fy7v416{padding-bottom:7px;}", ".f1a1bwwz{padding-top:7px;}"],
        h: [".fjxutwb:hover{background-color:var(--colorTransparentBackgroundHover);}", ".fwiml72:hover:active{background-color:var(--colorTransparentBackgroundPressed);}", ".f15wkkf3:hover{background-color:var(--colorBrandBackgroundHover);}", ".f1s2uweq:hover{border-top-color:transparent;}", ".fr80ssc:hover{border-right-color:transparent;}", ".fecsdlb:hover{border-left-color:transparent;}", ".f1ukrpxl:hover{border-bottom-color:transparent;}", ".f1rq72xc:hover{color:var(--colorNeutralForegroundOnBrand);}", ".fnp9lpt:hover:active{background-color:var(--colorBrandBackgroundPressed);}", ".f1h0usnq:hover:active{border-top-color:transparent;}", ".fs4ktlq:hover:active{border-right-color:transparent;}", ".fx2bmrt:hover:active{border-left-color:transparent;}", ".f16h9ulv:hover:active{border-bottom-color:transparent;}", ".f1d6v5y2:hover:active{color:var(--colorNeutralForegroundOnBrand);}", ".f1t94bn6:hover{background-color:var(--colorSubtleBackgroundHover);}", ".fnwyq0v:hover{color:var(--colorNeutralForeground2Hover);}", ".ft1hn21:hover .fui-Icon-filled{display:inline;}", ".fuxngvv:hover .fui-Icon-regular{display:none;}", ".fy5bs14:hover .fui-Button__icon{color:var(--colorNeutralForeground2BrandHover);}", ".fsv2rcd:hover:active{background-color:var(--colorSubtleBackgroundPressed);}", ".f1omzyqd:hover:active{color:var(--colorNeutralForeground2Pressed);}", ".f1dfjoow:hover:active .fui-Icon-filled{display:inline;}", ".f1j98vj9:hover:active .fui-Icon-regular{display:none;}", ".fj8yq94:hover:active .fui-Button__icon{color:var(--colorNeutralForeground2BrandPressed);}", ".f139oj5f:hover{color:var(--colorNeutralForeground2BrandHover);}", ".f1fg1p5m:hover:active{color:var(--colorNeutralForeground2BrandPressed);}"],
        m: [["@media (forced-colors: active){.f1rirnrt{background-color:Highlight;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1uu00uk{border-top-color:HighlightText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f9a0qzu{border-left-color:HighlightText;}.fkvaka8{border-right-color:HighlightText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1ux7til{border-bottom-color:HighlightText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1lkg8j3{color:HighlightText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.fkc42ay{forced-color-adjust:none;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.fq7113v:hover{background-color:HighlightText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.ff1wgvm:hover{border-top-color:Highlight;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1x4h75k:hover{border-left-color:Highlight;}.fiob0tu:hover{border-right-color:Highlight;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1j6scgf:hover{border-bottom-color:Highlight;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f4xjyn1:hover{color:Highlight;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.fbgcvur:hover:active{background-color:HighlightText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1ks1yx8:hover:active{border-top-color:Highlight;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1o6qegi:hover:active{border-right-color:Highlight;}.fmxjhhp:hover:active{border-left-color:Highlight;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.fcnxywj:hover:active{border-bottom-color:Highlight;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f9ddjv3:hover:active{color:Highlight;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1et0tmh:hover .fui-Button__icon{color:Highlight;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1wi8ngl:hover:active .fui-Button__icon{color:Highlight;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1tme0vf:hover{background-color:var(--colorTransparentBackground);}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f18onu3q:hover:active{background-color:var(--colorTransparentBackground);}}", {
          m: "(forced-colors: active)"
        }]]
      });
      useRootDisabledStyles = /* @__PURE__ */ __styles2({
        base: {
          De3pzq: "f1bg9a2p",
          g2u3we: "f1jj8ep1",
          h3c5rm: ["f15xbau", "fy0fskl"],
          B9xav0g: "f4ikngz",
          zhjwy3: ["fy0fskl", "f15xbau"],
          sj55zd: "f1s2aq7o",
          Bceei9c: "fdrzuqr",
          Bfinmwp: "f15x8b5r",
          Jwef8y: "f1falr9n",
          Bgoe8wy: "f12mpcsy",
          Bwzppfd: ["f1gwvigk", "f18rmfxp"],
          oetu4i: "f1jnshp0",
          gg5e9n: ["f18rmfxp", "f1gwvigk"],
          Bi91k9c: "fvgxktp",
          eoavqd: "fphbwmw",
          Bk3fhr4: "f19vpps7",
          Bmfj8id: "fv5swzo",
          Bbdnnc7: "f1al02dq",
          iro3zm: "f1t6o4dc",
          b661bw: "f10ztigi",
          Bk6r4ia: ["f1ft5sdu", "f1gzf82w"],
          B9zn80p: "f12zbtn2",
          Bpld233: ["f1gzf82w", "f1ft5sdu"],
          B2d53fq: "fcvwxyo",
          c3iz72: "f8w4c43",
          em6i61: "f1ol4fw6",
          vm6p8p: "f1q1lw4e",
          x3br3k: "f1dwjv2g"
        },
        highContrast: {
          Bsw6fvg: "f4lkoma",
          Bjwas2f: "fg455y9",
          Bn1d65q: ["f1rvyvqg", "f14g86mu"],
          Bxeuatn: "f1cwzwz",
          n51gp8: ["f14g86mu", "f1rvyvqg"],
          Bbusuzp: "f1dcs8yz",
          Bm2fdqk: "fuigjrg",
          G867l3: "fjwq6ea",
          gdbnj: ["f1lr3nhc", "f1mbxvi6"],
          mxns5l: "fn5gmvv",
          o3nasb: ["f1mbxvi6", "f1lr3nhc"],
          Bqrx1nm: "f1vmkb5g",
          pgvf35: "f53ppgq",
          Bh7lczh: ["f1663y11", "f80fkiy"],
          dpv3f4: "f18v5270",
          Bpnjhaq: ["f80fkiy", "f1663y11"],
          ze5xyy: "f1kc2mi9",
          Bx3q9su: "f4dhi0o",
          g2kj27: "f1y0svfh",
          Bf756sw: "fihuait",
          Bow2dr7: ["fnxhupq", "fyd6l6x"],
          Bvhedfk: "fx507ft",
          Gye4lf: ["fyd6l6x", "fnxhupq"],
          pc6evw: "fb3rf2x",
          xd2cci: "fequ9m0"
        },
        outline: {
          De3pzq: "f1c21dwh",
          Jwef8y: "f9ql6rf",
          iro3zm: "f3h1zc4"
        },
        primary: {
          g2u3we: "f1p3nwhy",
          h3c5rm: ["f11589ue", "f1pdflbu"],
          B9xav0g: "f1q5o8ev",
          zhjwy3: ["f1pdflbu", "f11589ue"],
          Bgoe8wy: "f1s2uweq",
          Bwzppfd: ["fr80ssc", "fecsdlb"],
          oetu4i: "f1ukrpxl",
          gg5e9n: ["fecsdlb", "fr80ssc"],
          b661bw: "f1h0usnq",
          Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
          B9zn80p: "f16h9ulv",
          Bpld233: ["fx2bmrt", "fs4ktlq"]
        },
        secondary: {},
        subtle: {
          De3pzq: "f1c21dwh",
          g2u3we: "f1p3nwhy",
          h3c5rm: ["f11589ue", "f1pdflbu"],
          B9xav0g: "f1q5o8ev",
          zhjwy3: ["f1pdflbu", "f11589ue"],
          Jwef8y: "f9ql6rf",
          Bgoe8wy: "f1s2uweq",
          Bwzppfd: ["fr80ssc", "fecsdlb"],
          oetu4i: "f1ukrpxl",
          gg5e9n: ["fecsdlb", "fr80ssc"],
          iro3zm: "f3h1zc4",
          b661bw: "f1h0usnq",
          Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
          B9zn80p: "f16h9ulv",
          Bpld233: ["fx2bmrt", "fs4ktlq"]
        },
        transparent: {
          De3pzq: "f1c21dwh",
          g2u3we: "f1p3nwhy",
          h3c5rm: ["f11589ue", "f1pdflbu"],
          B9xav0g: "f1q5o8ev",
          zhjwy3: ["f1pdflbu", "f11589ue"],
          Jwef8y: "f9ql6rf",
          Bgoe8wy: "f1s2uweq",
          Bwzppfd: ["fr80ssc", "fecsdlb"],
          oetu4i: "f1ukrpxl",
          gg5e9n: ["fecsdlb", "fr80ssc"],
          iro3zm: "f3h1zc4",
          b661bw: "f1h0usnq",
          Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
          B9zn80p: "f16h9ulv",
          Bpld233: ["fx2bmrt", "fs4ktlq"]
        }
      }, {
        d: [".f1bg9a2p{background-color:var(--colorNeutralBackgroundDisabled);}", ".f1jj8ep1{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f15xbau{border-right-color:var(--colorNeutralStrokeDisabled);}", ".fy0fskl{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f4ikngz{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".fdrzuqr{cursor:not-allowed;}", ".f15x8b5r .fui-Button__icon{color:var(--colorNeutralForegroundDisabled);}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1p3nwhy{border-top-color:transparent;}", ".f11589ue{border-right-color:transparent;}", ".f1pdflbu{border-left-color:transparent;}", ".f1q5o8ev{border-bottom-color:transparent;}"],
        h: [".f1falr9n:hover{background-color:var(--colorNeutralBackgroundDisabled);}", ".f12mpcsy:hover{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f1gwvigk:hover{border-right-color:var(--colorNeutralStrokeDisabled);}", ".f18rmfxp:hover{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f1jnshp0:hover{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".fvgxktp:hover{color:var(--colorNeutralForegroundDisabled);}", ".fphbwmw:hover{cursor:not-allowed;}", ".f19vpps7:hover .fui-Icon-filled{display:none;}", ".fv5swzo:hover .fui-Icon-regular{display:inline;}", ".f1al02dq:hover .fui-Button__icon{color:var(--colorNeutralForegroundDisabled);}", ".f1t6o4dc:hover:active{background-color:var(--colorNeutralBackgroundDisabled);}", ".f10ztigi:hover:active{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f1ft5sdu:hover:active{border-right-color:var(--colorNeutralStrokeDisabled);}", ".f1gzf82w:hover:active{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f12zbtn2:hover:active{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".fcvwxyo:hover:active{color:var(--colorNeutralForegroundDisabled);}", ".f8w4c43:hover:active{cursor:not-allowed;}", ".f1ol4fw6:hover:active .fui-Icon-filled{display:none;}", ".f1q1lw4e:hover:active .fui-Icon-regular{display:inline;}", ".f1dwjv2g:hover:active .fui-Button__icon{color:var(--colorNeutralForegroundDisabled);}", ".f9ql6rf:hover{background-color:var(--colorTransparentBackground);}", ".f3h1zc4:hover:active{background-color:var(--colorTransparentBackground);}", ".f1s2uweq:hover{border-top-color:transparent;}", ".fr80ssc:hover{border-right-color:transparent;}", ".fecsdlb:hover{border-left-color:transparent;}", ".f1ukrpxl:hover{border-bottom-color:transparent;}", ".f1h0usnq:hover:active{border-top-color:transparent;}", ".fs4ktlq:hover:active{border-right-color:transparent;}", ".fx2bmrt:hover:active{border-left-color:transparent;}", ".f16h9ulv:hover:active{border-bottom-color:transparent;}"],
        m: [["@media (forced-colors: active){.f4lkoma{background-color:ButtonFace;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.fg455y9{border-top-color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f14g86mu{border-left-color:GrayText;}.f1rvyvqg{border-right-color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1cwzwz{border-bottom-color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.fuigjrg .fui-Button__icon{color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.fjwq6ea:focus{border-top-color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1lr3nhc:focus{border-right-color:GrayText;}.f1mbxvi6:focus{border-left-color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.fn5gmvv:focus{border-bottom-color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1vmkb5g:hover{background-color:ButtonFace;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f53ppgq:hover{border-top-color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1663y11:hover{border-right-color:GrayText;}.f80fkiy:hover{border-left-color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f18v5270:hover{border-bottom-color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1kc2mi9:hover{color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f4dhi0o:hover .fui-Button__icon{color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1y0svfh:hover:active{background-color:ButtonFace;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.fihuait:hover:active{border-top-color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.fnxhupq:hover:active{border-right-color:GrayText;}.fyd6l6x:hover:active{border-left-color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.fx507ft:hover:active{border-bottom-color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.fb3rf2x:hover:active{color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.fequ9m0:hover:active .fui-Button__icon{color:GrayText;}}", {
          m: "(forced-colors: active)"
        }]]
      });
      useRootFocusStyles = /* @__PURE__ */ __styles2({
        circular: {
          Bw81rd7: 0,
          kdpuga: 0,
          dm238s: 0,
          B6xbmo0: 0,
          B3whbx2: "f1062rbf"
        },
        rounded: {},
        square: {
          Bw81rd7: 0,
          kdpuga: 0,
          dm238s: 0,
          B6xbmo0: 0,
          B3whbx2: "fj0ryk1"
        },
        primary: {
          B8q5s1w: "f17t0x8g",
          Bci5o5g: ["f194v5ow", "fk7jm04"],
          n8qw10: "f1qgg65p",
          Bdrgwmp: ["fk7jm04", "f194v5ow"],
          j6ew2k: ["fhgccpy", "fjo7pq6"],
          he4mth: "f32wu9k",
          Byr4aka: "fu5nqqq",
          lks7q5: ["f13prjl2", "f1nl83rv"],
          Bnan3qt: "f1czftr5",
          k1dn9: ["f1nl83rv", "f13prjl2"],
          Boium3a: ["f12k37oa", "fdnykm2"],
          tm8e47: "fr96u23"
        },
        small: {
          Bw81rd7: 0,
          kdpuga: 0,
          dm238s: 0,
          B6xbmo0: 0,
          B3whbx2: "fazmxh"
        },
        medium: {},
        large: {
          Bw81rd7: 0,
          kdpuga: 0,
          dm238s: 0,
          B6xbmo0: 0,
          B3whbx2: "f1b6alqh"
        }
      }, {
        d: [[".f1062rbf[data-fui-focus-visible]{border-radius:var(--borderRadiusCircular);}", {
          p: -1
        }], [".fj0ryk1[data-fui-focus-visible]{border-radius:var(--borderRadiusNone);}", {
          p: -1
        }], ".f17t0x8g[data-fui-focus-visible]{border-top-color:var(--colorStrokeFocus2);}", ".f194v5ow[data-fui-focus-visible]{border-right-color:var(--colorStrokeFocus2);}", ".fk7jm04[data-fui-focus-visible]{border-left-color:var(--colorStrokeFocus2);}", ".f1qgg65p[data-fui-focus-visible]{border-bottom-color:var(--colorStrokeFocus2);}", ".fhgccpy[data-fui-focus-visible]{box-shadow:var(--shadow2),0 0 0 var(--strokeWidthThin) var(--colorStrokeFocus2) inset,0 0 0 var(--strokeWidthThick) var(--colorNeutralForegroundOnBrand) inset;}", ".fjo7pq6[data-fui-focus-visible]{box-shadow:var(--shadow2),0 0 0 var(--strokeWidthThin) var(--colorStrokeFocus2) inset,0 0 0 var(--strokeWidthThick) var(--colorNeutralForegroundOnBrand) inset;}", ".f32wu9k[data-fui-focus-visible]:hover{box-shadow:var(--shadow2),0 0 0 var(--strokeWidthThin) var(--colorStrokeFocus2) inset;}", ".fu5nqqq[data-fui-focus-visible]:hover{border-top-color:var(--colorStrokeFocus2);}", ".f13prjl2[data-fui-focus-visible]:hover{border-right-color:var(--colorStrokeFocus2);}", ".f1nl83rv[data-fui-focus-visible]:hover{border-left-color:var(--colorStrokeFocus2);}", ".f1czftr5[data-fui-focus-visible]:hover{border-bottom-color:var(--colorStrokeFocus2);}", [".fazmxh[data-fui-focus-visible]{border-radius:var(--borderRadiusSmall);}", {
          p: -1
        }], [".f1b6alqh[data-fui-focus-visible]{border-radius:var(--borderRadiusLarge);}", {
          p: -1
        }]],
        t: ["@supports (-moz-appearance:button){.f12k37oa[data-fui-focus-visible]{box-shadow:var(--shadow2),0 0 0 calc(var(--strokeWidthThin) + 0.25px) var(--colorStrokeFocus2) inset,0 0 0 var(--strokeWidthThick) var(--colorNeutralForegroundOnBrand) inset;}.fdnykm2[data-fui-focus-visible]{box-shadow:var(--shadow2),0 0 0 calc(var(--strokeWidthThin) + 0.25px) var(--colorStrokeFocus2) inset,0 0 0 var(--strokeWidthThick) var(--colorNeutralForegroundOnBrand) inset;}}", "@supports (-moz-appearance:button){.fr96u23[data-fui-focus-visible]:hover{box-shadow:var(--shadow2),0 0 0 calc(var(--strokeWidthThin) + 0.25px) var(--colorStrokeFocus2) inset;}}"]
      });
      useRootIconOnlyStyles = /* @__PURE__ */ __styles2({
        small: {
          Byoj8tv: 0,
          uwmqm3: 0,
          z189sj: 0,
          z8tnut: 0,
          B0ocmuz: "fu97m5z",
          Bf4jedk: "f17fgpbq",
          B2u0y6b: "f1jt17bm"
        },
        medium: {
          Byoj8tv: 0,
          uwmqm3: 0,
          z189sj: 0,
          z8tnut: 0,
          B0ocmuz: "f18ktai2",
          Bf4jedk: "fwbmr0d",
          B2u0y6b: "f44c6la"
        },
        large: {
          Byoj8tv: 0,
          uwmqm3: 0,
          z189sj: 0,
          z8tnut: 0,
          B0ocmuz: "f1hbd1aw",
          Bf4jedk: "f12clzc2",
          B2u0y6b: "fjy1crr"
        }
      }, {
        d: [[".fu97m5z{padding:1px;}", {
          p: -1
        }], ".f17fgpbq{min-width:24px;}", ".f1jt17bm{max-width:24px;}", [".f18ktai2{padding:5px;}", {
          p: -1
        }], ".fwbmr0d{min-width:32px;}", ".f44c6la{max-width:32px;}", [".f1hbd1aw{padding:7px;}", {
          p: -1
        }], ".f12clzc2{min-width:40px;}", ".fjy1crr{max-width:40px;}"]
      });
      useIconStyles = /* @__PURE__ */ __styles2({
        small: {
          Be2twd7: "fe5j1ua",
          Bqenvij: "fjamq6b",
          a9b677: "f64fuq3",
          Bqrlyyl: "fbaiahx"
        },
        medium: {},
        large: {
          Be2twd7: "f1rt2boy",
          Bqenvij: "frvgh55",
          a9b677: "fq4mcun",
          Bqrlyyl: "f1exjqw5"
        },
        before: {
          t21cq0: ["f1nizpg2", "f1a695kz"]
        },
        after: {
          Frg6f3: ["f1a695kz", "f1nizpg2"]
        }
      }, {
        d: [".fe5j1ua{font-size:20px;}", ".fjamq6b{height:20px;}", ".f64fuq3{width:20px;}", ".fbaiahx{--fui-Button__icon--spacing:var(--spacingHorizontalXS);}", ".f1rt2boy{font-size:24px;}", ".frvgh55{height:24px;}", ".fq4mcun{width:24px;}", ".f1exjqw5{--fui-Button__icon--spacing:var(--spacingHorizontalSNudge);}", ".f1nizpg2{margin-right:var(--fui-Button__icon--spacing);}", ".f1a695kz{margin-left:var(--fui-Button__icon--spacing);}"]
      });
      useButtonStyles_unstable = (state) => {
        "use no memo";
        const rootBaseClassName = useRootBaseClassName();
        const iconBaseClassName = useIconBaseClassName();
        const rootStyles = useRootStyles2();
        const rootDisabledStyles = useRootDisabledStyles();
        const rootFocusStyles = useRootFocusStyles();
        const rootIconOnlyStyles = useRootIconOnlyStyles();
        const iconStyles = useIconStyles();
        const {
          appearance,
          disabled,
          disabledFocusable,
          icon,
          iconOnly,
          iconPosition,
          shape,
          size
        } = state;
        state.root.className = mergeClasses(
          buttonClassNames.root,
          rootBaseClassName,
          appearance && rootStyles[appearance],
          rootStyles[size],
          icon && size === "small" && rootStyles.smallWithIcon,
          icon && size === "large" && rootStyles.largeWithIcon,
          rootStyles[shape],
          // Disabled styles
          (disabled || disabledFocusable) && rootDisabledStyles.base,
          (disabled || disabledFocusable) && rootDisabledStyles.highContrast,
          appearance && (disabled || disabledFocusable) && rootDisabledStyles[appearance],
          // Focus styles
          appearance === "primary" && rootFocusStyles.primary,
          rootFocusStyles[size],
          rootFocusStyles[shape],
          // Icon-only styles
          iconOnly && rootIconOnlyStyles[size],
          // User provided class name
          state.root.className
        );
        if (state.icon) {
          state.icon.className = mergeClasses(buttonClassNames.icon, iconBaseClassName, !!state.root.children && iconStyles[iconPosition], iconStyles[size], state.icon.className);
        }
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-button/lib/components/Button/Button.js
  var React52, Button;
  var init_Button = __esm({
    "node_modules/@fluentui/react-button/lib/components/Button/Button.js"() {
      React52 = __toESM(require_react());
      init_renderButton();
      init_useButton();
      init_useButtonStyles_styles();
      init_lib();
      Button = /* @__PURE__ */ React52.forwardRef((props, ref) => {
        const state = useButton_unstable(props, ref);
        useButtonStyles_unstable(state);
        useCustomStyleHook("useButtonStyles_unstable")(state);
        return renderButton_unstable(state);
      });
      Button.displayName = "Button";
    }
  });

  // node_modules/@fluentui/react-button/lib/components/Button/index.js
  var init_Button2 = __esm({
    "node_modules/@fluentui/react-button/lib/components/Button/index.js"() {
      init_Button();
      init_renderButton();
      init_useButton();
      init_useButtonStyles_styles();
    }
  });

  // node_modules/@fluentui/react-button/lib/Button.js
  var init_Button3 = __esm({
    "node_modules/@fluentui/react-button/lib/Button.js"() {
      init_Button2();
    }
  });

  // node_modules/@fluentui/react-button/lib/contexts/index.js
  var init_contexts2 = __esm({
    "node_modules/@fluentui/react-button/lib/contexts/index.js"() {
      init_ButtonContext();
    }
  });

  // node_modules/@fluentui/react-button/lib/index.js
  var init_lib13 = __esm({
    "node_modules/@fluentui/react-button/lib/index.js"() {
      init_Button3();
      init_contexts2();
    }
  });

  // node_modules/@fluentui/react-field/lib/contexts/FieldContext.js
  var React53, FieldContext, FieldContextProvider, useFieldContext_unstable;
  var init_FieldContext = __esm({
    "node_modules/@fluentui/react-field/lib/contexts/FieldContext.js"() {
      React53 = __toESM(require_react());
      FieldContext = React53.createContext(void 0);
      FieldContextProvider = FieldContext.Provider;
      useFieldContext_unstable = () => React53.useContext(FieldContext);
    }
  });

  // node_modules/@fluentui/react-field/lib/contexts/useFieldControlProps.js
  function useFieldControlProps_unstable(props, options) {
    return getFieldControlProps(useFieldContext_unstable(), props, options);
  }
  function getFieldControlProps(context, props, options) {
    if (!context) {
      return props;
    }
    props = {
      ...props
    };
    const { generatedControlId, hintId, labelFor, labelId, required, validationMessageId, validationState } = context;
    if (generatedControlId) {
      var _props;
      var _id;
      (_id = (_props = props).id) !== null && _id !== void 0 ? _id : _props.id = generatedControlId;
    }
    if (labelId && (!(options === null || options === void 0 ? void 0 : options.supportsLabelFor) || labelFor !== props.id)) {
      var _props1, _arialabelledby;
      var _;
      (_ = (_props1 = props)[_arialabelledby = "aria-labelledby"]) !== null && _ !== void 0 ? _ : _props1[_arialabelledby] = labelId;
    }
    if (validationMessageId || hintId) {
      props["aria-describedby"] = [
        validationMessageId,
        hintId,
        props === null || props === void 0 ? void 0 : props["aria-describedby"]
      ].filter(Boolean).join(" ");
    }
    if (validationState === "error") {
      var _props2, _ariainvalid;
      var _1;
      (_1 = (_props2 = props)[_ariainvalid = "aria-invalid"]) !== null && _1 !== void 0 ? _1 : _props2[_ariainvalid] = true;
    }
    if (required) {
      if (options === null || options === void 0 ? void 0 : options.supportsRequired) {
        var _props3;
        var _required;
        (_required = (_props3 = props).required) !== null && _required !== void 0 ? _required : _props3.required = true;
      } else {
        var _props4, _ariarequired;
        var _2;
        (_2 = (_props4 = props)[_ariarequired = "aria-required"]) !== null && _2 !== void 0 ? _2 : _props4[_ariarequired] = true;
      }
    }
    if (options === null || options === void 0 ? void 0 : options.supportsSize) {
      var _props5;
      var _size;
      (_size = (_props5 = props).size) !== null && _size !== void 0 ? _size : _props5.size = context.size;
    }
    return props;
  }
  var init_useFieldControlProps = __esm({
    "node_modules/@fluentui/react-field/lib/contexts/useFieldControlProps.js"() {
      init_FieldContext();
    }
  });

  // node_modules/@fluentui/react-field/lib/contexts/index.js
  var init_contexts3 = __esm({
    "node_modules/@fluentui/react-field/lib/contexts/index.js"() {
      init_useFieldControlProps();
    }
  });

  // node_modules/@fluentui/react-label/lib/components/Label/useLabel.js
  var React54, useLabel_unstable;
  var init_useLabel = __esm({
    "node_modules/@fluentui/react-label/lib/components/Label/useLabel.js"() {
      React54 = __toESM(require_react());
      init_lib2();
      useLabel_unstable = (props, ref) => {
        const { disabled = false, required = false, weight = "regular", size = "medium" } = props;
        return {
          disabled,
          required: slot_exports.optional(required === true ? "*" : required || void 0, {
            defaultProps: {
              "aria-hidden": "true"
            },
            elementType: "span"
          }),
          weight,
          size,
          components: {
            root: "label",
            required: "span"
          },
          root: slot_exports.always(getIntrinsicElementProps("label", {
            // FIXME:
            // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLLabelElement`
            // but since it would be a breaking change to fix it, we are casting ref to it's proper type
            ref,
            ...props
          }), {
            elementType: "label"
          })
        };
      };
    }
  });

  // node_modules/@fluentui/react-label/lib/components/Label/renderLabel.js
  var renderLabel_unstable;
  var init_renderLabel = __esm({
    "node_modules/@fluentui/react-label/lib/components/Label/renderLabel.js"() {
      init_jsx_runtime();
      init_lib2();
      renderLabel_unstable = (state) => {
        assertSlots(state);
        return /* @__PURE__ */ jsxs(state.root, {
          children: [
            state.root.children,
            state.required && /* @__PURE__ */ jsx(state.required, {})
          ]
        });
      };
    }
  });

  // node_modules/@fluentui/react-label/lib/components/Label/useLabelStyles.styles.js
  var labelClassNames, useStyles4, useLabelStyles_unstable;
  var init_useLabelStyles_styles = __esm({
    "node_modules/@fluentui/react-label/lib/components/Label/useLabelStyles.styles.js"() {
      init_index_esm2();
      labelClassNames = {
        root: "fui-Label",
        required: "fui-Label__required"
      };
      useStyles4 = /* @__PURE__ */ __styles2({
        root: {
          Bahqtrf: "fk6fouc",
          sj55zd: "f19n0e5"
        },
        disabled: {
          sj55zd: "f1s2aq7o",
          Bbusuzp: "f1dcs8yz"
        },
        required: {
          sj55zd: "f1whyuy6",
          uwmqm3: ["fruq291", "f7x41pl"]
        },
        small: {
          Be2twd7: "fy9rknc",
          Bg96gwp: "fwrc4pm"
        },
        medium: {
          Be2twd7: "fkhj508",
          Bg96gwp: "f1i3iumi"
        },
        large: {
          Be2twd7: "fod5ikn",
          Bg96gwp: "faaz57k",
          Bhrd7zp: "fl43uef"
        },
        semibold: {
          Bhrd7zp: "fl43uef"
        }
      }, {
        d: [".fk6fouc{font-family:var(--fontFamilyBase);}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".f1whyuy6{color:var(--colorPaletteRedForeground3);}", ".fruq291{padding-left:var(--spacingHorizontalXS);}", ".f7x41pl{padding-right:var(--spacingHorizontalXS);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}"],
        m: [["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
          m: "(forced-colors: active)"
        }]]
      });
      useLabelStyles_unstable = (state) => {
        "use no memo";
        const styles = useStyles4();
        state.root.className = mergeClasses(labelClassNames.root, styles.root, state.disabled && styles.disabled, styles[state.size], state.weight === "semibold" && styles.semibold, state.root.className);
        if (state.required) {
          state.required.className = mergeClasses(labelClassNames.required, styles.required, state.disabled && styles.disabled, state.required.className);
        }
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-label/lib/components/Label/Label.js
  var React55, Label;
  var init_Label = __esm({
    "node_modules/@fluentui/react-label/lib/components/Label/Label.js"() {
      React55 = __toESM(require_react());
      init_useLabel();
      init_renderLabel();
      init_useLabelStyles_styles();
      init_lib();
      Label = /* @__PURE__ */ React55.forwardRef((props, ref) => {
        const state = useLabel_unstable(props, ref);
        useLabelStyles_unstable(state);
        useCustomStyleHook("useLabelStyles_unstable")(state);
        return renderLabel_unstable(state);
      });
      Label.displayName = "Label";
    }
  });

  // node_modules/@fluentui/react-label/lib/components/Label/index.js
  var init_Label2 = __esm({
    "node_modules/@fluentui/react-label/lib/components/Label/index.js"() {
      init_Label();
    }
  });

  // node_modules/@fluentui/react-label/lib/Label.js
  var init_Label3 = __esm({
    "node_modules/@fluentui/react-label/lib/Label.js"() {
      init_Label2();
    }
  });

  // node_modules/@fluentui/react-label/lib/index.js
  var init_lib14 = __esm({
    "node_modules/@fluentui/react-label/lib/index.js"() {
      init_Label3();
    }
  });

  // node_modules/@fluentui/react-field/lib/index.js
  var init_lib15 = __esm({
    "node_modules/@fluentui/react-field/lib/index.js"() {
      init_contexts3();
    }
  });

  // node_modules/@fluentui/react-link/lib/components/Link/useLinkState.js
  var React56, useLinkState_unstable;
  var init_useLinkState = __esm({
    "node_modules/@fluentui/react-link/lib/components/Link/useLinkState.js"() {
      React56 = __toESM(require_react());
      init_lib8();
      useLinkState_unstable = (state) => {
        const { disabled, disabledFocusable } = state;
        const { onClick, onKeyDown, role, tabIndex } = state.root;
        if (state.root.as === "a") {
          state.root.href = disabled ? void 0 : state.root.href;
          if (disabled || disabledFocusable) {
            state.root.role = role || "link";
          }
        }
        if (state.root.as === "a" || state.root.as === "span") {
          state.root.tabIndex = tabIndex !== null && tabIndex !== void 0 ? tabIndex : disabled && !disabledFocusable ? void 0 : 0;
        }
        state.root.onClick = (ev) => {
          if (disabled || disabledFocusable) {
            ev.preventDefault();
          } else {
            onClick === null || onClick === void 0 ? void 0 : onClick(ev);
          }
        };
        state.root.onKeyDown = (ev) => {
          const keyPressed = ev.key === Enter || ev.key === Space;
          if ((disabled || disabledFocusable) && keyPressed) {
            ev.preventDefault();
            ev.stopPropagation();
          } else {
            onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(ev);
            if (state.root.as === "span" && !!state.root.onClick && !onKeyDown && keyPressed) {
              ev.preventDefault();
              ev.currentTarget.click();
            }
          }
        };
        state.disabled = disabled || disabledFocusable;
        state.root["aria-disabled"] = disabled || disabledFocusable || void 0;
        if (state.root.as === "button") {
          state.root.disabled = disabled && !disabledFocusable;
        }
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-link/lib/contexts/linkContext.js
  var React57, LinkContext, linkContextDefaultValue, LinkContextProvider, useLinkContext;
  var init_linkContext = __esm({
    "node_modules/@fluentui/react-link/lib/contexts/linkContext.js"() {
      React57 = __toESM(require_react());
      LinkContext = React57.createContext(void 0);
      linkContextDefaultValue = {
        inline: false
      };
      LinkContextProvider = LinkContext.Provider;
      useLinkContext = () => {
        var _React_useContext;
        return (_React_useContext = React57.useContext(LinkContext)) !== null && _React_useContext !== void 0 ? _React_useContext : linkContextDefaultValue;
      };
    }
  });

  // node_modules/@fluentui/react-link/lib/components/Link/useLink.js
  var React58, useLink_unstable;
  var init_useLink = __esm({
    "node_modules/@fluentui/react-link/lib/components/Link/useLink.js"() {
      React58 = __toESM(require_react());
      init_lib2();
      init_lib();
      init_useLinkState();
      init_linkContext();
      useLink_unstable = (props, ref) => {
        const backgroundAppearance = useBackgroundAppearance();
        const { inline: inlineContext } = useLinkContext();
        const { appearance = "default", disabled = false, disabledFocusable = false, inline = false } = props;
        const elementType = props.as || (props.href ? "a" : "button");
        const propsWithAssignedAs = {
          role: elementType === "span" ? "button" : void 0,
          type: elementType === "button" ? "button" : void 0,
          ...props,
          as: elementType
        };
        const state = {
          // Props passed at the top-level
          appearance,
          disabled,
          disabledFocusable,
          inline: inline !== null && inline !== void 0 ? inline : !!inlineContext,
          // Slots definition
          components: {
            root: elementType
          },
          root: slot_exports.always(getIntrinsicElementProps(elementType, {
            ref,
            ...propsWithAssignedAs
          }), {
            elementType
          }),
          backgroundAppearance
        };
        useLinkState_unstable(state);
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-link/lib/components/Link/useLinkStyles.styles.js
  var linkClassNames, useStyles5, useLinkStyles_unstable;
  var init_useLinkStyles_styles = __esm({
    "node_modules/@fluentui/react-link/lib/components/Link/useLinkStyles.styles.js"() {
      init_index_esm2();
      linkClassNames = {
        root: "fui-Link"
      };
      useStyles5 = /* @__PURE__ */ __styles2({
        focusIndicator: {
          Bttzg6e: "fhgqx19",
          B3uz8dt: "f1olyrje",
          B6ihwck: "f1p93eir",
          g9k6zt: "f1nev41a"
        },
        root: {
          B486eqv: "f2hkw1w",
          De3pzq: "f3rmtva",
          B7ck84d: "f1ewtqcl",
          sj55zd: "fyind8e",
          Bceei9c: "f1k6fduh",
          mc9l5x: "f1w7gpdv",
          Bahqtrf: "fk6fouc",
          Be2twd7: "fkhj508",
          Bhrd7zp: "figsok6",
          jrapky: 0,
          Frg6f3: 0,
          t21cq0: 0,
          B6of3ja: 0,
          B74szlk: "f1s184ao",
          Byoj8tv: 0,
          uwmqm3: 0,
          z189sj: 0,
          z8tnut: 0,
          B0ocmuz: "f1mk8lai",
          B68tc82: 0,
          Bmxbyg5: 0,
          Bpg54ce: "fnbmjn9",
          fsow6f: ["f1o700av", "fes3tcz"],
          w71qe1: "f1iuv45f",
          Bkioxbp: "f1cmlufx",
          ygn44y: "f9n3di6",
          famaaq: "f1ids18y",
          Bde5pd6: "f1tx3yz7",
          Bi91k9c: "f1deo86v",
          i089h6: "f1eh06m1",
          lj723h: "f1iescvh"
        },
        button: {
          icvyot: "f1ern45e",
          vrafjx: ["f1n71otn", "f1deefiw"],
          oivjwe: "f1h8hb77",
          wvpqe5: ["f1deefiw", "f1n71otn"]
        },
        href: {
          Be2twd7: "fjoy568"
        },
        subtle: {
          sj55zd: "fkfq4zb",
          Bde5pd6: "f1tx3yz7",
          Bi91k9c: "fnwyq0v",
          i089h6: "f1eh06m1",
          lj723h: "flvvhsy"
        },
        inline: {
          w71qe1: "f13mvf36"
        },
        disabled: {
          w71qe1: "f1iuv45f",
          sj55zd: "f1s2aq7o",
          Bceei9c: "fdrzuqr",
          Bde5pd6: "fbnuktb",
          Bi91k9c: "fvgxktp",
          i089h6: "fljg2da",
          lj723h: "f19wldhg"
        },
        inverted: {
          sj55zd: "f1qz2gb0",
          Bi91k9c: "f1mlt8il",
          lj723h: "f1hsd4st"
        }
      }, {
        d: [".fhgqx19[data-fui-focus-visible]{text-decoration-color:var(--colorStrokeFocus2);}", ".f1olyrje[data-fui-focus-visible]{text-decoration-line:underline;}", ".f1p93eir[data-fui-focus-visible]{text-decoration-style:double;}", ".f1nev41a[data-fui-focus-visible]{outline-style:none;}", ".f3rmtva{background-color:transparent;}", ".f1ewtqcl{box-sizing:border-box;}", ".fyind8e{color:var(--colorBrandForegroundLink);}", ".f1k6fduh{cursor:pointer;}", ".f1w7gpdv{display:inline;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", [".f1s184ao{margin:0;}", {
          p: -1
        }], [".f1mk8lai{padding:0;}", {
          p: -1
        }], [".fnbmjn9{overflow:inherit;}", {
          p: -1
        }], ".f1o700av{text-align:left;}", ".fes3tcz{text-align:right;}", ".f1iuv45f{text-decoration-line:none;}", ".f1cmlufx{text-decoration-thickness:var(--strokeWidthThin);}", ".f9n3di6{text-overflow:inherit;}", ".f1ids18y{-webkit-user-select:text;-moz-user-select:text;user-select:text;}", ".f1ern45e{border-top-style:none;}", ".f1n71otn{border-right-style:none;}", ".f1deefiw{border-left-style:none;}", ".f1h8hb77{border-bottom-style:none;}", ".fjoy568{font-size:inherit;}", ".fkfq4zb{color:var(--colorNeutralForeground2);}", ".f13mvf36{text-decoration-line:underline;}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".fdrzuqr{cursor:not-allowed;}", ".f1qz2gb0{color:var(--colorBrandForegroundInverted);}"],
        i: [".f2hkw1w:focus-visible{outline-style:none;}"],
        h: [".f1tx3yz7:hover{text-decoration-line:underline;}", ".f1deo86v:hover{color:var(--colorBrandForegroundLinkHover);}", ".fnwyq0v:hover{color:var(--colorNeutralForeground2Hover);}", ".fbnuktb:hover{text-decoration-line:none;}", ".fvgxktp:hover{color:var(--colorNeutralForegroundDisabled);}", ".f1mlt8il:hover{color:var(--colorBrandForegroundInvertedHover);}"],
        a: [".f1eh06m1:active{text-decoration-line:underline;}", ".f1iescvh:active{color:var(--colorBrandForegroundLinkPressed);}", ".flvvhsy:active{color:var(--colorNeutralForeground2Pressed);}", ".fljg2da:active{text-decoration-line:none;}", ".f19wldhg:active{color:var(--colorNeutralForegroundDisabled);}", ".f1hsd4st:active{color:var(--colorBrandForegroundInvertedPressed);}"]
      });
      useLinkStyles_unstable = (state) => {
        "use no memo";
        const styles = useStyles5();
        const {
          appearance,
          disabled,
          inline,
          root,
          backgroundAppearance
        } = state;
        state.root.className = mergeClasses(linkClassNames.root, styles.root, styles.focusIndicator, root.as === "a" && root.href && styles.href, root.as === "button" && styles.button, appearance === "subtle" && styles.subtle, backgroundAppearance === "inverted" && styles.inverted, inline && styles.inline, disabled && styles.disabled, state.root.className);
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-link/lib/components/Link/renderLink.js
  var renderLink_unstable;
  var init_renderLink = __esm({
    "node_modules/@fluentui/react-link/lib/components/Link/renderLink.js"() {
      init_jsx_runtime();
      init_lib2();
      renderLink_unstable = (state) => {
        assertSlots(state);
        return /* @__PURE__ */ jsx(state.root, {});
      };
    }
  });

  // node_modules/@fluentui/react-link/lib/components/Link/Link.js
  var React59, Link3;
  var init_Link = __esm({
    "node_modules/@fluentui/react-link/lib/components/Link/Link.js"() {
      React59 = __toESM(require_react());
      init_useLink();
      init_useLinkStyles_styles();
      init_renderLink();
      init_lib();
      Link3 = /* @__PURE__ */ React59.forwardRef((props, ref) => {
        const state = useLink_unstable(props, ref);
        useLinkStyles_unstable(state);
        useCustomStyleHook("useLinkStyles_unstable")(state);
        return renderLink_unstable(state);
      });
      Link3.displayName = "Link";
    }
  });

  // node_modules/@fluentui/react-link/lib/components/Link/index.js
  var init_Link2 = __esm({
    "node_modules/@fluentui/react-link/lib/components/Link/index.js"() {
      init_Link();
    }
  });

  // node_modules/@fluentui/react-link/lib/contexts/index.js
  var init_contexts4 = __esm({
    "node_modules/@fluentui/react-link/lib/contexts/index.js"() {
      init_linkContext();
    }
  });

  // node_modules/@fluentui/react-link/lib/Link.js
  var init_Link3 = __esm({
    "node_modules/@fluentui/react-link/lib/Link.js"() {
      init_Link2();
    }
  });

  // node_modules/@fluentui/react-link/lib/index.js
  var init_lib16 = __esm({
    "node_modules/@fluentui/react-link/lib/index.js"() {
      init_Link3();
      init_contexts4();
    }
  });

  // node_modules/@fluentui/react-spinner/lib/contexts/SpinnerContext.js
  var React60, SpinnerContext, SpinnerContextDefaultValue, SpinnerContextProvider, useSpinnerContext;
  var init_SpinnerContext = __esm({
    "node_modules/@fluentui/react-spinner/lib/contexts/SpinnerContext.js"() {
      React60 = __toESM(require_react());
      SpinnerContext = React60.createContext(void 0);
      SpinnerContextDefaultValue = {};
      SpinnerContextProvider = SpinnerContext.Provider;
      useSpinnerContext = () => {
        var _React_useContext;
        return (_React_useContext = React60.useContext(SpinnerContext)) !== null && _React_useContext !== void 0 ? _React_useContext : SpinnerContextDefaultValue;
      };
    }
  });

  // node_modules/@fluentui/react-spinner/lib/components/Spinner/useSpinner.js
  var React61, useSpinner_unstable;
  var init_useSpinner = __esm({
    "node_modules/@fluentui/react-spinner/lib/components/Spinner/useSpinner.js"() {
      React61 = __toESM(require_react());
      init_lib2();
      init_lib14();
      init_SpinnerContext();
      useSpinner_unstable = (props, ref) => {
        const { size: contextSize } = useSpinnerContext();
        const { appearance = "primary", labelPosition = "after", size = contextSize !== null && contextSize !== void 0 ? contextSize : "medium", delay = 0 } = props;
        const baseId = useId2("spinner");
        const { role = "progressbar", ...rest } = props;
        const nativeRoot = slot_exports.always(getIntrinsicElementProps("div", {
          // FIXME:
          // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`
          // but since it would be a breaking change to fix it, we are casting ref to it's proper type
          ref,
          role,
          ...rest
        }, [
          "size"
        ]), {
          elementType: "div"
        });
        const [isShownAfterDelay, setIsShownAfterDelay] = React61.useState(false);
        const [setDelayTimeout, clearDelayTimeout] = useTimeout();
        React61.useEffect(() => {
          if (delay <= 0) {
            return;
          }
          setDelayTimeout(() => {
            setIsShownAfterDelay(true);
          }, delay);
          return () => {
            clearDelayTimeout();
          };
        }, [
          setDelayTimeout,
          clearDelayTimeout,
          delay
        ]);
        const labelShorthand = slot_exports.optional(props.label, {
          defaultProps: {
            id: baseId
          },
          renderByDefault: false,
          elementType: Label
        });
        const spinnerShortHand = slot_exports.optional(props.spinner, {
          renderByDefault: true,
          elementType: "span"
        });
        if (labelShorthand && nativeRoot && !nativeRoot["aria-labelledby"]) {
          nativeRoot["aria-labelledby"] = labelShorthand.id;
        }
        const state = {
          appearance,
          delay,
          labelPosition,
          size,
          shouldRenderSpinner: !delay || isShownAfterDelay,
          components: {
            root: "div",
            spinner: "span",
            spinnerTail: "span",
            label: Label
          },
          root: nativeRoot,
          spinner: spinnerShortHand,
          spinnerTail: slot_exports.always(props.spinnerTail, {
            elementType: "span"
          }),
          label: labelShorthand
        };
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-spinner/lib/components/Spinner/renderSpinner.js
  var renderSpinner_unstable;
  var init_renderSpinner = __esm({
    "node_modules/@fluentui/react-spinner/lib/components/Spinner/renderSpinner.js"() {
      init_jsx_runtime();
      init_lib2();
      renderSpinner_unstable = (state) => {
        assertSlots(state);
        const { labelPosition, shouldRenderSpinner } = state;
        return /* @__PURE__ */ jsxs(state.root, {
          children: [
            state.label && shouldRenderSpinner && (labelPosition === "above" || labelPosition === "before") && /* @__PURE__ */ jsx(state.label, {}),
            state.spinner && shouldRenderSpinner && /* @__PURE__ */ jsx(state.spinner, {
              children: state.spinnerTail && /* @__PURE__ */ jsx(state.spinnerTail, {})
            }),
            state.label && shouldRenderSpinner && (labelPosition === "below" || labelPosition === "after") && /* @__PURE__ */ jsx(state.label, {})
          ]
        });
      };
    }
  });

  // node_modules/@fluentui/react-spinner/lib/components/Spinner/useSpinnerStyles.styles.js
  var spinnerClassNames, useRootBaseClassName2, useRootStyles3, useSpinnerBaseClassName, useSpinnerTailBaseClassName, useSpinnerStyles, useLabelStyles, useSpinnerStyles_unstable;
  var init_useSpinnerStyles_styles = __esm({
    "node_modules/@fluentui/react-spinner/lib/components/Spinner/useSpinnerStyles.styles.js"() {
      init_lib();
      init_index_esm2();
      spinnerClassNames = {
        root: "fui-Spinner",
        spinner: "fui-Spinner__spinner",
        spinnerTail: "fui-Spinner__spinnerTail",
        label: "fui-Spinner__label"
      };
      useRootBaseClassName2 = /* @__PURE__ */ __resetStyles2("r82apo5", null, [".r82apo5{display:flex;align-items:center;justify-content:center;line-height:0;gap:8px;overflow:hidden;}"]);
      useRootStyles3 = /* @__PURE__ */ __styles2({
        vertical: {
          Beiy3e4: "f1vx9l62"
        }
      }, {
        d: [".f1vx9l62{flex-direction:column;}"]
      });
      useSpinnerBaseClassName = /* @__PURE__ */ __resetStyles2("rvgcg50", "r15nd2jo", {
        r: [".rvgcg50{position:relative;flex-shrink:0;-webkit-mask-image:radial-gradient(closest-side, transparent calc(100% - var(--fui-Spinner--strokeWidth) - 1px), white calc(100% - var(--fui-Spinner--strokeWidth)) calc(100% - 1px), transparent 100%);mask-image:radial-gradient(closest-side, transparent calc(100% - var(--fui-Spinner--strokeWidth) - 1px), white calc(100% - var(--fui-Spinner--strokeWidth)) calc(100% - 1px), transparent 100%);background-color:var(--colorBrandStroke2Contrast);color:var(--colorBrandStroke1);animation-duration:1.5s;animation-iteration-count:infinite;animation-timing-function:linear;animation-name:rb7n1on;}", "@keyframes rb7n1on{0%{transform:rotate(0deg);}100%{transform:rotate(360deg);}}", ".r15nd2jo{position:relative;flex-shrink:0;-webkit-mask-image:radial-gradient(closest-side, transparent calc(100% - var(--fui-Spinner--strokeWidth) - 1px), white calc(100% - var(--fui-Spinner--strokeWidth)) calc(100% - 1px), transparent 100%);mask-image:radial-gradient(closest-side, transparent calc(100% - var(--fui-Spinner--strokeWidth) - 1px), white calc(100% - var(--fui-Spinner--strokeWidth)) calc(100% - 1px), transparent 100%);background-color:var(--colorBrandStroke2Contrast);color:var(--colorBrandStroke1);animation-duration:1.5s;animation-iteration-count:infinite;animation-timing-function:linear;animation-name:r1gx3jof;}", "@keyframes r1gx3jof{0%{transform:rotate(0deg);}100%{transform:rotate(-360deg);}}"],
        s: ["@media screen and (forced-colors: active){.rvgcg50{background-color:HighlightText;color:Highlight;forced-color-adjust:none;}}", "@media screen and (prefers-reduced-motion: reduce){.rvgcg50{animation-duration:1.8s;}}", "@media screen and (forced-colors: active){.r15nd2jo{background-color:HighlightText;color:Highlight;forced-color-adjust:none;}}", "@media screen and (prefers-reduced-motion: reduce){.r15nd2jo{animation-duration:1.8s;}}"]
      });
      useSpinnerTailBaseClassName = /* @__PURE__ */ __resetStyles2("rxov3xa", "r1o544mv", {
        r: [".rxov3xa{position:absolute;display:block;width:100%;height:100%;-webkit-mask-image:conic-gradient(transparent 105deg, white 105deg);mask-image:conic-gradient(transparent 105deg, white 105deg);animation-duration:1.5s;animation-iteration-count:infinite;animation-timing-function:var(--curveEasyEase);animation-name:r15mim6k;}", '.rxov3xa::before,.rxov3xa::after{content:"";position:absolute;display:block;width:100%;height:100%;animation:inherit;background-image:conic-gradient(currentcolor 135deg, transparent 135deg);}', "@keyframes r15mim6k{0%{transform:rotate(-135deg);}50%{transform:rotate(0deg);}100%{transform:rotate(225deg);}}", ".rxov3xa::before{animation-name:r18vhmn8;}", "@keyframes r18vhmn8{0%{transform:rotate(0deg);}50%{transform:rotate(105deg);}100%{transform:rotate(0deg);}}", ".rxov3xa::after{animation-name:rkgrvoi;}", "@keyframes rkgrvoi{0%{transform:rotate(0deg);}50%{transform:rotate(225deg);}100%{transform:rotate(0deg);}}", ".r1o544mv{position:absolute;display:block;width:100%;height:100%;-webkit-mask-image:conic-gradient(transparent 105deg, white 105deg);mask-image:conic-gradient(transparent 105deg, white 105deg);animation-duration:1.5s;animation-iteration-count:infinite;animation-timing-function:var(--curveEasyEase);animation-name:r109gmi5;}", '.r1o544mv::before,.r1o544mv::after{content:"";position:absolute;display:block;width:100%;height:100%;animation:inherit;background-image:conic-gradient(currentcolor 135deg, transparent 135deg);}', "@keyframes r109gmi5{0%{transform:rotate(135deg);}50%{transform:rotate(0deg);}100%{transform:rotate(-225deg);}}", ".r1o544mv::before{animation-name:r17whflh;}", "@keyframes r17whflh{0%{transform:rotate(0deg);}50%{transform:rotate(-105deg);}100%{transform:rotate(0deg);}}", ".r1o544mv::after{animation-name:re4odhl;}", "@keyframes re4odhl{0%{transform:rotate(0deg);}50%{transform:rotate(-225deg);}100%{transform:rotate(0deg);}}"],
        s: ["@media screen and (prefers-reduced-motion: reduce){.rxov3xa{animation-iteration-count:0;background-image:conic-gradient(transparent 120deg, currentcolor 360deg);}.rxov3xa::before,.rxov3xa::after{content:none;}}", "@media screen and (prefers-reduced-motion: reduce){.r1o544mv{animation-iteration-count:0;background-image:conic-gradient(transparent 120deg, currentcolor 360deg);}.r1o544mv::before,.r1o544mv::after{content:none;}}"]
      });
      useSpinnerStyles = /* @__PURE__ */ __styles2({
        inverted: {
          De3pzq: "fr407j0",
          sj55zd: "f1f7voed"
        },
        rtlTail: {
          btxmck: "f179dep3",
          gb5jj2: "fbz9ihp",
          Br2kee7: "f1wkkxo7"
        },
        "extra-tiny": {
          Bqenvij: "fd461yt",
          a9b677: "fjw5fx7",
          qmp6fs: "f1v3ph3m"
        },
        tiny: {
          Bqenvij: "fjamq6b",
          a9b677: "f64fuq3",
          qmp6fs: "f1v3ph3m"
        },
        "extra-small": {
          Bqenvij: "frvgh55",
          a9b677: "fq4mcun",
          qmp6fs: "f1v3ph3m"
        },
        small: {
          Bqenvij: "fxldao9",
          a9b677: "f1w9dchk",
          qmp6fs: "f1v3ph3m"
        },
        medium: {
          Bqenvij: "f1d2rq10",
          a9b677: "f1szoe96",
          qmp6fs: "fb52u90"
        },
        large: {
          Bqenvij: "f8ljn23",
          a9b677: "fpdz1er",
          qmp6fs: "fb52u90"
        },
        "extra-large": {
          Bqenvij: "fbhnoac",
          a9b677: "feqmc2u",
          qmp6fs: "fb52u90"
        },
        huge: {
          Bqenvij: "f1ft4266",
          a9b677: "fksc0bp",
          qmp6fs: "fa3u9ii"
        }
      }, {
        d: [".fr407j0{background-color:var(--colorNeutralStrokeAlpha2);}", ".f1f7voed{color:var(--colorNeutralStrokeOnBrand2);}", ".f179dep3{-webkit-mask-image:conic-gradient(white 255deg, transparent 255deg);mask-image:conic-gradient(white 255deg, transparent 255deg);}", ".fbz9ihp::before,.fbz9ihp::after{background-image:conic-gradient(transparent 225deg, currentcolor 225deg);}", ".fd461yt{height:16px;}", ".fjw5fx7{width:16px;}", ".f1v3ph3m{--fui-Spinner--strokeWidth:var(--strokeWidthThick);}", ".fjamq6b{height:20px;}", ".f64fuq3{width:20px;}", ".frvgh55{height:24px;}", ".fq4mcun{width:24px;}", ".fxldao9{height:28px;}", ".f1w9dchk{width:28px;}", ".f1d2rq10{height:32px;}", ".f1szoe96{width:32px;}", ".fb52u90{--fui-Spinner--strokeWidth:var(--strokeWidthThicker);}", ".f8ljn23{height:36px;}", ".fpdz1er{width:36px;}", ".fbhnoac{height:40px;}", ".feqmc2u{width:40px;}", ".f1ft4266{height:44px;}", ".fksc0bp{width:44px;}", ".fa3u9ii{--fui-Spinner--strokeWidth:var(--strokeWidthThickest);}"],
        m: [["@media screen and (prefers-reduced-motion: reduce){.f1wkkxo7{background-image:conic-gradient(currentcolor 0deg, transparent 240deg);}}", {
          m: "screen and (prefers-reduced-motion: reduce)"
        }]]
      });
      useLabelStyles = /* @__PURE__ */ __styles2({
        inverted: {
          sj55zd: "fonrgv7"
        },
        "extra-tiny": {
          Bahqtrf: "fk6fouc",
          Be2twd7: "fkhj508",
          Bhrd7zp: "figsok6",
          Bg96gwp: "f1i3iumi"
        },
        tiny: {
          Bahqtrf: "fk6fouc",
          Be2twd7: "fkhj508",
          Bhrd7zp: "figsok6",
          Bg96gwp: "f1i3iumi"
        },
        "extra-small": {
          Bahqtrf: "fk6fouc",
          Be2twd7: "fkhj508",
          Bhrd7zp: "figsok6",
          Bg96gwp: "f1i3iumi"
        },
        small: {
          Bahqtrf: "fk6fouc",
          Be2twd7: "fkhj508",
          Bhrd7zp: "figsok6",
          Bg96gwp: "f1i3iumi"
        },
        medium: {
          Bahqtrf: "fk6fouc",
          Be2twd7: "fod5ikn",
          Bhrd7zp: "fl43uef",
          Bg96gwp: "faaz57k"
        },
        large: {
          Bahqtrf: "fk6fouc",
          Be2twd7: "fod5ikn",
          Bhrd7zp: "fl43uef",
          Bg96gwp: "faaz57k"
        },
        "extra-large": {
          Bahqtrf: "fk6fouc",
          Be2twd7: "fod5ikn",
          Bhrd7zp: "fl43uef",
          Bg96gwp: "faaz57k"
        },
        huge: {
          Bahqtrf: "fk6fouc",
          Be2twd7: "f1pp30po",
          Bhrd7zp: "fl43uef",
          Bg96gwp: "f106mvju"
        }
      }, {
        d: [".fonrgv7{color:var(--colorNeutralForegroundStaticInverted);}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".f1pp30po{font-size:var(--fontSizeBase500);}", ".f106mvju{line-height:var(--lineHeightBase500);}"]
      });
      useSpinnerStyles_unstable = (state) => {
        "use no memo";
        const {
          labelPosition,
          size,
          appearance
        } = state;
        const {
          dir
        } = useFluent();
        const rootBaseClassName = useRootBaseClassName2();
        const rootStyles = useRootStyles3();
        const spinnerBaseClassName = useSpinnerBaseClassName();
        const spinnerStyles = useSpinnerStyles();
        const spinnerTailBaseClassName = useSpinnerTailBaseClassName();
        const labelStyles = useLabelStyles();
        state.root.className = mergeClasses(spinnerClassNames.root, rootBaseClassName, (labelPosition === "above" || labelPosition === "below") && rootStyles.vertical, state.root.className);
        if (state.spinner) {
          state.spinner.className = mergeClasses(spinnerClassNames.spinner, spinnerBaseClassName, spinnerStyles[size], appearance === "inverted" && spinnerStyles.inverted, state.spinner.className);
        }
        if (state.spinnerTail) {
          state.spinnerTail.className = mergeClasses(spinnerClassNames.spinnerTail, spinnerTailBaseClassName, dir === "rtl" && spinnerStyles.rtlTail, state.spinnerTail.className);
        }
        if (state.label) {
          state.label.className = mergeClasses(spinnerClassNames.label, labelStyles[size], appearance === "inverted" && labelStyles.inverted, state.label.className);
        }
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-spinner/lib/components/Spinner/Spinner.js
  var React62, Spinner;
  var init_Spinner = __esm({
    "node_modules/@fluentui/react-spinner/lib/components/Spinner/Spinner.js"() {
      React62 = __toESM(require_react());
      init_useSpinner();
      init_renderSpinner();
      init_useSpinnerStyles_styles();
      init_lib();
      Spinner = /* @__PURE__ */ React62.forwardRef((props, ref) => {
        const state = useSpinner_unstable(props, ref);
        useSpinnerStyles_unstable(state);
        useCustomStyleHook("useSpinnerStyles_unstable")(state);
        return renderSpinner_unstable(state);
      });
      Spinner.displayName = "Spinner";
    }
  });

  // node_modules/@fluentui/react-spinner/lib/components/Spinner/index.js
  var init_Spinner2 = __esm({
    "node_modules/@fluentui/react-spinner/lib/components/Spinner/index.js"() {
      init_Spinner();
    }
  });

  // node_modules/@fluentui/react-spinner/lib/Spinner.js
  var init_Spinner3 = __esm({
    "node_modules/@fluentui/react-spinner/lib/Spinner.js"() {
      init_Spinner2();
    }
  });

  // node_modules/@fluentui/react-spinner/lib/index.js
  var init_lib17 = __esm({
    "node_modules/@fluentui/react-spinner/lib/index.js"() {
      init_Spinner3();
    }
  });

  // node_modules/@fluentui/react-text/lib/components/Text/useText.js
  var React63, useText_unstable;
  var init_useText = __esm({
    "node_modules/@fluentui/react-text/lib/components/Text/useText.js"() {
      React63 = __toESM(require_react());
      init_lib2();
      useText_unstable = (props, ref) => {
        const { wrap, truncate, block, italic, underline, strikethrough, size, font, weight, align } = props;
        const state = {
          align: align !== null && align !== void 0 ? align : "start",
          block: block !== null && block !== void 0 ? block : false,
          font: font !== null && font !== void 0 ? font : "base",
          italic: italic !== null && italic !== void 0 ? italic : false,
          size: size !== null && size !== void 0 ? size : 300,
          strikethrough: strikethrough !== null && strikethrough !== void 0 ? strikethrough : false,
          truncate: truncate !== null && truncate !== void 0 ? truncate : false,
          underline: underline !== null && underline !== void 0 ? underline : false,
          weight: weight !== null && weight !== void 0 ? weight : "regular",
          wrap: wrap !== null && wrap !== void 0 ? wrap : true,
          components: {
            root: "span"
          },
          root: slot_exports.always(getIntrinsicElementProps("span", {
            // FIXME:
            // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLHeadingElement & HTMLPreElement`
            // but since it would be a breaking change to fix it, we are casting ref to it's proper type
            ref,
            ...props
          }), {
            elementType: "span"
          })
        };
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-text/lib/components/Text/renderText.js
  var renderText_unstable;
  var init_renderText = __esm({
    "node_modules/@fluentui/react-text/lib/components/Text/renderText.js"() {
      init_jsx_runtime();
      init_lib2();
      renderText_unstable = (state) => {
        assertSlots(state);
        return /* @__PURE__ */ jsx(state.root, {});
      };
    }
  });

  // node_modules/@fluentui/react-text/lib/components/Text/useTextStyles.styles.js
  var textClassNames, useStyles6, useTextStyles_unstable;
  var init_useTextStyles_styles = __esm({
    "node_modules/@fluentui/react-text/lib/components/Text/useTextStyles.styles.js"() {
      init_index_esm2();
      textClassNames = {
        root: "fui-Text"
      };
      useStyles6 = /* @__PURE__ */ __styles2({
        root: {
          Bahqtrf: "fk6fouc",
          Be2twd7: "fkhj508",
          Bg96gwp: "f1i3iumi",
          Bhrd7zp: "figsok6",
          fsow6f: "fpgzoln",
          mc9l5x: "f1w7gpdv",
          Huce71: "f6juhto",
          B68tc82: 0,
          Bmxbyg5: 0,
          Bpg54ce: "f1gl81tg",
          ygn44y: "f2jf649"
        },
        nowrap: {
          Huce71: "fz5stix",
          B68tc82: 0,
          Bmxbyg5: 0,
          Bpg54ce: "f1a3p1vp"
        },
        truncate: {
          ygn44y: "f1cmbuwj"
        },
        block: {
          mc9l5x: "ftgm304"
        },
        italic: {
          B80ckks: "f1j4dglz"
        },
        underline: {
          w71qe1: "f13mvf36"
        },
        strikethrough: {
          w71qe1: "fv5q2k7"
        },
        strikethroughUnderline: {
          w71qe1: "f1drk4o6"
        },
        base100: {
          Be2twd7: "f13mqy1h",
          Bg96gwp: "fcpl73t"
        },
        base200: {
          Be2twd7: "fy9rknc",
          Bg96gwp: "fwrc4pm"
        },
        base400: {
          Be2twd7: "fod5ikn",
          Bg96gwp: "faaz57k"
        },
        base500: {
          Be2twd7: "f1pp30po",
          Bg96gwp: "f106mvju"
        },
        base600: {
          Be2twd7: "f1x0m3f5",
          Bg96gwp: "fb86gi6"
        },
        hero700: {
          Be2twd7: "fojgt09",
          Bg96gwp: "fcen8rp"
        },
        hero800: {
          Be2twd7: "fccw675",
          Bg96gwp: "f1ebx5kk"
        },
        hero900: {
          Be2twd7: "f15afnhw",
          Bg96gwp: "fr3w3wp"
        },
        hero1000: {
          Be2twd7: "fpyltcb",
          Bg96gwp: "f1ivgwrt"
        },
        monospace: {
          Bahqtrf: "f1fedwem"
        },
        numeric: {
          Bahqtrf: "f1uq0ln5"
        },
        weightMedium: {
          Bhrd7zp: "fdj6btp"
        },
        weightSemibold: {
          Bhrd7zp: "fl43uef"
        },
        weightBold: {
          Bhrd7zp: "flh3ekv"
        },
        alignCenter: {
          fsow6f: "f17mccla"
        },
        alignEnd: {
          fsow6f: "f12ymhq5"
        },
        alignJustify: {
          fsow6f: "f1j59e10"
        }
      }, {
        d: [".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fpgzoln{text-align:start;}", ".f1w7gpdv{display:inline;}", ".f6juhto{white-space:normal;}", [".f1gl81tg{overflow:visible;}", {
          p: -1
        }], ".f2jf649{text-overflow:clip;}", ".fz5stix{white-space:nowrap;}", [".f1a3p1vp{overflow:hidden;}", {
          p: -1
        }], ".f1cmbuwj{text-overflow:ellipsis;}", ".ftgm304{display:block;}", ".f1j4dglz{font-style:italic;}", ".f13mvf36{text-decoration-line:underline;}", ".fv5q2k7{text-decoration-line:line-through;}", ".f1drk4o6{text-decoration-line:line-through underline;}", ".f13mqy1h{font-size:var(--fontSizeBase100);}", ".fcpl73t{line-height:var(--lineHeightBase100);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".f1pp30po{font-size:var(--fontSizeBase500);}", ".f106mvju{line-height:var(--lineHeightBase500);}", ".f1x0m3f5{font-size:var(--fontSizeBase600);}", ".fb86gi6{line-height:var(--lineHeightBase600);}", ".fojgt09{font-size:var(--fontSizeHero700);}", ".fcen8rp{line-height:var(--lineHeightHero700);}", ".fccw675{font-size:var(--fontSizeHero800);}", ".f1ebx5kk{line-height:var(--lineHeightHero800);}", ".f15afnhw{font-size:var(--fontSizeHero900);}", ".fr3w3wp{line-height:var(--lineHeightHero900);}", ".fpyltcb{font-size:var(--fontSizeHero1000);}", ".f1ivgwrt{line-height:var(--lineHeightHero1000);}", ".f1fedwem{font-family:var(--fontFamilyMonospace);}", ".f1uq0ln5{font-family:var(--fontFamilyNumeric);}", ".fdj6btp{font-weight:var(--fontWeightMedium);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".flh3ekv{font-weight:var(--fontWeightBold);}", ".f17mccla{text-align:center;}", ".f12ymhq5{text-align:end;}", ".f1j59e10{text-align:justify;}"]
      });
      useTextStyles_unstable = (state) => {
        "use no memo";
        const styles = useStyles6();
        state.root.className = mergeClasses(textClassNames.root, styles.root, state.wrap === false && styles.nowrap, state.truncate && styles.truncate, state.block && styles.block, state.italic && styles.italic, state.underline && styles.underline, state.strikethrough && styles.strikethrough, state.underline && state.strikethrough && styles.strikethroughUnderline, state.size === 100 && styles.base100, state.size === 200 && styles.base200, state.size === 400 && styles.base400, state.size === 500 && styles.base500, state.size === 600 && styles.base600, state.size === 700 && styles.hero700, state.size === 800 && styles.hero800, state.size === 900 && styles.hero900, state.size === 1e3 && styles.hero1000, state.font === "monospace" && styles.monospace, state.font === "numeric" && styles.numeric, state.weight === "medium" && styles.weightMedium, state.weight === "semibold" && styles.weightSemibold, state.weight === "bold" && styles.weightBold, state.align === "center" && styles.alignCenter, state.align === "end" && styles.alignEnd, state.align === "justify" && styles.alignJustify, state.root.className);
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-text/lib/components/Text/Text.js
  var React64, Text;
  var init_Text = __esm({
    "node_modules/@fluentui/react-text/lib/components/Text/Text.js"() {
      React64 = __toESM(require_react());
      init_useText();
      init_renderText();
      init_useTextStyles_styles();
      init_lib();
      Text = /* @__PURE__ */ React64.forwardRef((props, ref) => {
        const state = useText_unstable(props, ref);
        useTextStyles_unstable(state);
        useCustomStyleHook("useTextStyles_unstable")(state);
        return renderText_unstable(state);
      });
      Text.displayName = "Text";
    }
  });

  // node_modules/@fluentui/react-text/lib/components/Text/index.js
  var init_Text2 = __esm({
    "node_modules/@fluentui/react-text/lib/components/Text/index.js"() {
      init_Text();
    }
  });

  // node_modules/@fluentui/react-text/lib/Text.js
  var init_Text3 = __esm({
    "node_modules/@fluentui/react-text/lib/Text.js"() {
      init_Text2();
    }
  });

  // node_modules/@fluentui/react-text/lib/index.js
  var init_lib18 = __esm({
    "node_modules/@fluentui/react-text/lib/index.js"() {
      init_Text3();
    }
  });

  // node_modules/@fluentui/react-textarea/lib/components/Textarea/renderTextarea.js
  var renderTextarea_unstable;
  var init_renderTextarea = __esm({
    "node_modules/@fluentui/react-textarea/lib/components/Textarea/renderTextarea.js"() {
      init_jsx_runtime();
      init_lib2();
      renderTextarea_unstable = (state) => {
        assertSlots(state);
        return /* @__PURE__ */ jsx(state.root, {
          children: /* @__PURE__ */ jsx(state.textarea, {})
        });
      };
    }
  });

  // node_modules/@fluentui/react-textarea/lib/components/Textarea/useTextarea.js
  var React65, useTextarea_unstable;
  var init_useTextarea = __esm({
    "node_modules/@fluentui/react-textarea/lib/components/Textarea/useTextarea.js"() {
      React65 = __toESM(require_react());
      init_lib15();
      init_lib2();
      init_lib();
      useTextarea_unstable = (props, ref) => {
        props = useFieldControlProps_unstable(props, {
          supportsLabelFor: true,
          supportsRequired: true,
          supportsSize: true
        });
        const overrides = useOverrides();
        var _overrides_inputDefaultAppearance;
        const { size = "medium", appearance = (_overrides_inputDefaultAppearance = overrides.inputDefaultAppearance) !== null && _overrides_inputDefaultAppearance !== void 0 ? _overrides_inputDefaultAppearance : "outline", resize = "none", onChange } = props;
        if (appearance === "filled-darker-shadow" || appearance === "filled-lighter-shadow") {
          console.error("The 'filled-darker-shadow' and 'filled-lighter-shadow' appearances are deprecated and will be removed in the future.");
        }
        const [value, setValue] = useControllableState({
          state: props.value,
          defaultState: props.defaultValue,
          initialState: void 0
        });
        const nativeProps = getPartitionedNativeProps({
          props,
          primarySlotTagName: "textarea",
          excludedPropNames: [
            "onChange",
            "value",
            "defaultValue"
          ]
        });
        const state = {
          size,
          appearance,
          resize,
          components: {
            root: "span",
            textarea: "textarea"
          },
          textarea: slot_exports.always(props.textarea, {
            defaultProps: {
              ref,
              ...nativeProps.primary
            },
            elementType: "textarea"
          }),
          root: slot_exports.always(props.root, {
            defaultProps: nativeProps.root,
            elementType: "span"
          })
        };
        state.textarea.value = value;
        state.textarea.onChange = useEventCallback((ev) => {
          const newValue = ev.target.value;
          onChange === null || onChange === void 0 ? void 0 : onChange(ev, {
            value: newValue
          });
          setValue(newValue);
        });
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-textarea/lib/components/Textarea/useTextareaStyles.styles.js
  var textareaClassNames, useRootStyles4, useTextareaStyles, useTextareaResizeStyles, useTextareaStyles_unstable;
  var init_useTextareaStyles_styles = __esm({
    "node_modules/@fluentui/react-textarea/lib/components/Textarea/useTextareaStyles.styles.js"() {
      init_index_esm2();
      textareaClassNames = {
        root: "fui-Textarea",
        textarea: "fui-Textarea__textarea"
      };
      useRootStyles4 = /* @__PURE__ */ __styles2({
        base: {
          mc9l5x: "ftuwxu6",
          B7ck84d: "f1ewtqcl",
          qhf8xq: "f10pi13n",
          Byoj8tv: 0,
          uwmqm3: 0,
          z189sj: 0,
          z8tnut: 0,
          B0ocmuz: "f1yiegib",
          jrapky: 0,
          Frg6f3: 0,
          t21cq0: 0,
          B6of3ja: 0,
          B74szlk: "f1s184ao",
          Beyfa6y: 0,
          Bbmb7ep: 0,
          Btl43ni: 0,
          B7oj6ja: 0,
          Dimara: "ft85np5",
          ha4doy: "f12kltsn"
        },
        disabled: {
          De3pzq: "f1c21dwh",
          Bgfg5da: 0,
          B9xav0g: 0,
          oivjwe: 0,
          Bn0qgzm: 0,
          B4g9neb: 0,
          zhjwy3: 0,
          wvpqe5: 0,
          ibv6hh: 0,
          u1mtju: 0,
          h3c5rm: 0,
          vrafjx: 0,
          Bekrc4i: 0,
          i8vvqc: 0,
          g2u3we: 0,
          icvyot: 0,
          B4j52fo: 0,
          irswps: "ff3nzm7",
          Bjwas2f: "fg455y9",
          Bn1d65q: ["f1rvyvqg", "f14g86mu"],
          Bxeuatn: "f1cwzwz",
          n51gp8: ["f14g86mu", "f1rvyvqg"]
        },
        interactive: {
          li1rpt: "f1gw3sf2",
          Bsft5z2: "f13zj6fq",
          E3zdtr: "f1mdlcz9",
          Eqx8gd: ["f1a7op3", "f1cjjd47"],
          By385i5: "f1gboi2j",
          B1piin3: ["f1cjjd47", "f1a7op3"],
          Dlnsje: "ffyw7fx",
          d9w3h3: ["f1kp91vd", "f1ibwz09"],
          B3778ie: ["f1ibwz09", "f1kp91vd"],
          B1q35kw: 0,
          Bw17bha: 0,
          Bcgy8vk: 0,
          Bjuhk93: "f1mnjydx",
          Gjdm7m: "fj2g8qd",
          b1kco5: "f1yk9hq",
          Ba2ppi3: "fhwpy7i",
          F2fol1: "f14ee0xe",
          lck23g: "f1xhbsuh",
          df92cz: "fv8e3ye",
          I188md: "ftb5wc6",
          umuwi5: "fjw5xc1",
          Blcqepd: "f1xdyd5c",
          nplu4u: "fatpbeo",
          Bioka5o: "fb7uyps",
          H713fs: "f1cmft4k",
          B9ooomg: "f1x58t8o",
          Bercvud: "f1ibeo51",
          Bbr2w1p: "f1vnc8sk",
          Bduesf4: "f3e99gv",
          Bpq79vn: "fhljsf7"
        },
        filled: {
          Bgfg5da: 0,
          B9xav0g: 0,
          oivjwe: 0,
          Bn0qgzm: 0,
          B4g9neb: 0,
          zhjwy3: 0,
          wvpqe5: 0,
          ibv6hh: 0,
          u1mtju: 0,
          h3c5rm: 0,
          vrafjx: 0,
          Bekrc4i: 0,
          i8vvqc: 0,
          g2u3we: 0,
          icvyot: 0,
          B4j52fo: 0,
          irswps: "f88035w",
          q7v0qe: "ftmjh5b",
          kmh5ft: ["f17blpuu", "fsrcdbj"],
          nagaa4: "f1tpwn32",
          B1yhkcb: ["fsrcdbj", "f17blpuu"]
        },
        "filled-darker": {
          De3pzq: "f16xq7d1"
        },
        "filled-lighter": {
          De3pzq: "fxugw4r"
        },
        "filled-darker-shadow": {
          De3pzq: "f16xq7d1",
          Bgfg5da: 0,
          B9xav0g: 0,
          oivjwe: 0,
          Bn0qgzm: 0,
          B4g9neb: 0,
          zhjwy3: 0,
          wvpqe5: 0,
          ibv6hh: 0,
          u1mtju: 0,
          h3c5rm: 0,
          vrafjx: 0,
          Bekrc4i: 0,
          i8vvqc: 0,
          g2u3we: 0,
          icvyot: 0,
          B4j52fo: 0,
          irswps: "f1gmd7mu",
          E5pizo: "fyed02w"
        },
        "filled-lighter-shadow": {
          De3pzq: "fxugw4r",
          Bgfg5da: 0,
          B9xav0g: 0,
          oivjwe: 0,
          Bn0qgzm: 0,
          B4g9neb: 0,
          zhjwy3: 0,
          wvpqe5: 0,
          ibv6hh: 0,
          u1mtju: 0,
          h3c5rm: 0,
          vrafjx: 0,
          Bekrc4i: 0,
          i8vvqc: 0,
          g2u3we: 0,
          icvyot: 0,
          B4j52fo: 0,
          irswps: "f1gmd7mu",
          E5pizo: "fyed02w"
        },
        outline: {
          De3pzq: "fxugw4r",
          Bgfg5da: 0,
          B9xav0g: "f1c1zstj",
          oivjwe: 0,
          Bn0qgzm: 0,
          B4g9neb: 0,
          zhjwy3: 0,
          wvpqe5: 0,
          ibv6hh: 0,
          u1mtju: 0,
          h3c5rm: 0,
          vrafjx: 0,
          Bekrc4i: 0,
          i8vvqc: 0,
          g2u3we: 0,
          icvyot: 0,
          B4j52fo: 0,
          irswps: "fhz96rm"
        },
        outlineInteractive: {
          kzujx5: 0,
          oetu4i: "f1l4zc64",
          gvrnp0: 0,
          xv9156: 0,
          jek2p4: 0,
          gg5e9n: 0,
          Beu9t3s: 0,
          dt87k2: 0,
          Bt1vbvt: 0,
          Bwzppfd: 0,
          Bop6t4b: 0,
          B2zwrfe: 0,
          Bwp2tzp: 0,
          Bgoe8wy: 0,
          Bf40cpq: 0,
          ckks6v: 0,
          Baalond: "f9mts5e",
          v2iqwr: 0,
          wmxk5l: "f1z0osm6",
          Bj33j0h: 0,
          Bs0cc2w: 0,
          qwjtx1: 0,
          B50zh58: 0,
          f7epvg: 0,
          e1hlit: 0,
          B7mkhst: 0,
          ak43y8: 0,
          Bbcopvn: 0,
          Bvecx4l: 0,
          lwioe0: 0,
          B6oc9vd: 0,
          e2sjt0: 0,
          uqwnxt: 0,
          asj8p9: "f1acnei2",
          Br8fjdy: 0,
          zoxjo1: "f1so894s",
          Bt3ojkv: 0,
          B7pmvfx: 0,
          Bfht2n1: 0,
          an54nd: 0,
          t1ykpo: 0,
          Belqbek: 0,
          bbt1vd: 0,
          Brahy3i: 0,
          r7b1zc: 0,
          rexu52: 0,
          ovtnii: 0,
          Bvq3b66: 0,
          Bawrxx6: 0,
          Bbs6y8j: 0,
          B2qpgjt: "f19ezbcq"
        },
        invalid: {
          tvckwq: "fs4k3qj",
          gk2u95: ["fcee079", "fmyw78r"],
          hhx65j: "f1fgmyf4",
          Bxowmz0: ["fmyw78r", "fcee079"]
        }
      }, {
        d: [".ftuwxu6{display:inline-flex;}", ".f1ewtqcl{box-sizing:border-box;}", ".f10pi13n{position:relative;}", [".f1yiegib{padding:0 0 var(--strokeWidthThick) 0;}", {
          p: -1
        }], [".f1s184ao{margin:0;}", {
          p: -1
        }], [".ft85np5{border-radius:var(--borderRadiusMedium);}", {
          p: -1
        }], ".f12kltsn{vertical-align:top;}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", [".ff3nzm7{border:var(--strokeWidthThin) solid var(--colorNeutralStrokeDisabled);}", {
          p: -2
        }], ".f1gw3sf2::after{box-sizing:border-box;}", '.f13zj6fq::after{content:"";}', ".f1mdlcz9::after{position:absolute;}", ".f1a7op3::after{left:-1px;}", ".f1cjjd47::after{right:-1px;}", ".f1gboi2j::after{bottom:-1px;}", ".ffyw7fx::after{height:max(var(--strokeWidthThick), var(--borderRadiusMedium));}", ".f1kp91vd::after{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1ibwz09::after{border-bottom-right-radius:var(--borderRadiusMedium);}", [".f1mnjydx::after{border-bottom:var(--strokeWidthThick) solid var(--colorCompoundBrandStroke);}", {
          p: -1
        }], ".fj2g8qd::after{clip-path:inset(calc(100% - var(--strokeWidthThick)) 0 0 0);}", ".f1yk9hq::after{transform:scaleX(0);}", ".fhwpy7i::after{transition-property:transform;}", ".f14ee0xe::after{transition-duration:var(--durationUltraFast);}", ".f1xhbsuh::after{transition-delay:var(--curveAccelerateMid);}", [".f88035w{border:var(--strokeWidthThin) solid var(--colorTransparentStroke);}", {
          p: -2
        }], ".f16xq7d1{background-color:var(--colorNeutralBackground3);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", [".f1gmd7mu{border:var(--strokeWidthThin) solid var(--colorTransparentStrokeInteractive);}", {
          p: -2
        }], ".fyed02w{box-shadow:var(--shadow2);}", [".f1gmd7mu{border:var(--strokeWidthThin) solid var(--colorTransparentStrokeInteractive);}", {
          p: -2
        }], [".fhz96rm{border:var(--strokeWidthThin) solid var(--colorNeutralStroke1);}", {
          p: -2
        }], ".f1c1zstj{border-bottom-color:var(--colorNeutralStrokeAccessible);}", ".fs4k3qj:not(:focus-within),.fs4k3qj:hover:not(:focus-within){border-top-color:var(--colorPaletteRedBorder2);}", ".fcee079:not(:focus-within),.fcee079:hover:not(:focus-within){border-right-color:var(--colorPaletteRedBorder2);}", ".fmyw78r:not(:focus-within),.fmyw78r:hover:not(:focus-within){border-left-color:var(--colorPaletteRedBorder2);}", ".f1fgmyf4:not(:focus-within),.f1fgmyf4:hover:not(:focus-within){border-bottom-color:var(--colorPaletteRedBorder2);}"],
        m: [["@media (forced-colors: active){.fg455y9{border-top-color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f14g86mu{border-left-color:GrayText;}.f1rvyvqg{border-right-color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media (forced-colors: active){.f1cwzwz{border-bottom-color:GrayText;}}", {
          m: "(forced-colors: active)"
        }], ["@media screen and (prefers-reduced-motion: reduce){.fv8e3ye::after{transition-duration:0.01ms;}}", {
          m: "screen and (prefers-reduced-motion: reduce)"
        }], ["@media screen and (prefers-reduced-motion: reduce){.ftb5wc6::after{transition-delay:0.01ms;}}", {
          m: "screen and (prefers-reduced-motion: reduce)"
        }], ["@media screen and (prefers-reduced-motion: reduce){.f1cmft4k:focus-within::after{transition-duration:0.01ms;}}", {
          m: "screen and (prefers-reduced-motion: reduce)"
        }], ["@media screen and (prefers-reduced-motion: reduce){.f1x58t8o:focus-within::after{transition-delay:0.01ms;}}", {
          m: "screen and (prefers-reduced-motion: reduce)"
        }]],
        w: [".fjw5xc1:focus-within::after{transform:scaleX(1);}", ".f1xdyd5c:focus-within::after{transition-property:transform;}", ".fatpbeo:focus-within::after{transition-duration:var(--durationNormal);}", ".fb7uyps:focus-within::after{transition-delay:var(--curveDecelerateMid);}", ".f1ibeo51:focus-within:active::after{border-bottom-color:var(--colorCompoundBrandStrokePressed);}", ".f1vnc8sk:focus-within{outline-width:var(--strokeWidthThick);}", ".f3e99gv:focus-within{outline-style:solid;}", ".fhljsf7:focus-within{outline-color:transparent;}", [".f19ezbcq:focus-within{border:var(--strokeWidthThin) solid var(--colorNeutralStroke1Pressed);}", {
          p: -2
        }], ".f1so894s:focus-within{border-bottom-color:var(--colorCompoundBrandStroke);}"],
        h: [".ftmjh5b:hover,.ftmjh5b:focus-within{border-top-color:var(--colorTransparentStrokeInteractive);}", ".f17blpuu:hover,.f17blpuu:focus-within{border-right-color:var(--colorTransparentStrokeInteractive);}", ".fsrcdbj:hover,.fsrcdbj:focus-within{border-left-color:var(--colorTransparentStrokeInteractive);}", ".f1tpwn32:hover,.f1tpwn32:focus-within{border-bottom-color:var(--colorTransparentStrokeInteractive);}", [".f9mts5e:hover{border:var(--strokeWidthThin) solid var(--colorNeutralStroke1Hover);}", {
          p: -2
        }], ".f1l4zc64:hover{border-bottom-color:var(--colorNeutralStrokeAccessibleHover);}"],
        a: [[".f1acnei2:active{border:var(--strokeWidthThin) solid var(--colorNeutralStroke1Pressed);}", {
          p: -2
        }], ".f1z0osm6:active{border-bottom-color:var(--colorNeutralStrokeAccessiblePressed);}"]
      });
      useTextareaStyles = /* @__PURE__ */ __styles2({
        base: {
          icvyot: "f1ern45e",
          vrafjx: ["f1n71otn", "f1deefiw"],
          oivjwe: "f1h8hb77",
          wvpqe5: ["f1deefiw", "f1n71otn"],
          jrapky: 0,
          Frg6f3: 0,
          t21cq0: 0,
          B6of3ja: 0,
          B74szlk: "f1s184ao",
          De3pzq: "f3rmtva",
          B7ck84d: "f1ewtqcl",
          sj55zd: "f19n0e5",
          Bh6795r: "fqerorx",
          Bahqtrf: "fk6fouc",
          Bqenvij: "f1l02sjl",
          yvdlaj: "fwyc1cq",
          B3o7kgh: "f13ta7ih",
          B4brmom: "f1vw9udw",
          Brrnbx2: "fbb3kq8",
          oeaueh: "f1s6fcnf"
        },
        disabled: {
          sj55zd: "f1s2aq7o",
          Bceei9c: "fdrzuqr",
          yvdlaj: "fahhnxm"
        },
        small: {
          sshi5w: "f1w5jphr",
          Byoj8tv: 0,
          uwmqm3: 0,
          z189sj: 0,
          z8tnut: 0,
          B0ocmuz: "f1pnffij",
          Bxyxcbc: "f192z54u",
          Bahqtrf: "fk6fouc",
          Be2twd7: "fy9rknc",
          Bhrd7zp: "figsok6",
          Bg96gwp: "fwrc4pm"
        },
        medium: {
          sshi5w: "fvmd9f",
          Byoj8tv: 0,
          uwmqm3: 0,
          z189sj: 0,
          z8tnut: 0,
          B0ocmuz: "f1ww82xo",
          Bxyxcbc: "f1if7ixc",
          Bahqtrf: "fk6fouc",
          Be2twd7: "fkhj508",
          Bhrd7zp: "figsok6",
          Bg96gwp: "f1i3iumi"
        },
        large: {
          sshi5w: "f1kfson",
          Byoj8tv: 0,
          uwmqm3: 0,
          z189sj: 0,
          z8tnut: 0,
          B0ocmuz: "f15hvtkj",
          Bxyxcbc: "f3kip1f",
          Bahqtrf: "fk6fouc",
          Be2twd7: "fod5ikn",
          Bhrd7zp: "figsok6",
          Bg96gwp: "faaz57k"
        }
      }, {
        d: [".f1ern45e{border-top-style:none;}", ".f1n71otn{border-right-style:none;}", ".f1deefiw{border-left-style:none;}", ".f1h8hb77{border-bottom-style:none;}", [".f1s184ao{margin:0;}", {
          p: -1
        }], ".f3rmtva{background-color:transparent;}", ".f1ewtqcl{box-sizing:border-box;}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".fqerorx{flex-grow:1;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".f1l02sjl{height:100%;}", ".fwyc1cq::-webkit-input-placeholder{color:var(--colorNeutralForeground4);}", ".fwyc1cq::-moz-placeholder{color:var(--colorNeutralForeground4);}", ".f13ta7ih::-webkit-input-placeholder{opacity:1;}", ".f13ta7ih::-moz-placeholder{opacity:1;}", ".f1vw9udw::selection{color:var(--colorNeutralForegroundInverted);}", ".fbb3kq8::selection{background-color:var(--colorNeutralBackgroundInverted);}", ".f1s6fcnf{outline-style:none;}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".fdrzuqr{cursor:not-allowed;}", ".fahhnxm::-webkit-input-placeholder{color:var(--colorNeutralForegroundDisabled);}", ".fahhnxm::-moz-placeholder{color:var(--colorNeutralForegroundDisabled);}", ".f1w5jphr{min-height:40px;}", [".f1pnffij{padding:var(--spacingVerticalXS) calc(var(--spacingHorizontalSNudge) + var(--spacingHorizontalXXS));}", {
          p: -1
        }], ".f192z54u{max-height:200px;}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".fvmd9f{min-height:52px;}", [".f1ww82xo{padding:var(--spacingVerticalSNudge) calc(var(--spacingHorizontalMNudge) + var(--spacingHorizontalXXS));}", {
          p: -1
        }], ".f1if7ixc{max-height:260px;}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".f1kfson{min-height:64px;}", [".f15hvtkj{padding:var(--spacingVerticalS) calc(var(--spacingHorizontalM) + var(--spacingHorizontalXXS));}", {
          p: -1
        }], ".f3kip1f{max-height:320px;}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".faaz57k{line-height:var(--lineHeightBase400);}"]
      });
      useTextareaResizeStyles = /* @__PURE__ */ __styles2({
        none: {
          B3rzk8w: "f1o1s39h"
        },
        both: {
          B3rzk8w: "f1pxm0xe"
        },
        horizontal: {
          B3rzk8w: "fq6nmtn"
        },
        vertical: {
          B3rzk8w: "f1f5ktr4"
        }
      }, {
        d: [".f1o1s39h{resize:none;}", ".f1pxm0xe{resize:both;}", ".fq6nmtn{resize:horizontal;}", ".f1f5ktr4{resize:vertical;}"]
      });
      useTextareaStyles_unstable = (state) => {
        "use no memo";
        const {
          size,
          appearance,
          resize
        } = state;
        const disabled = state.textarea.disabled;
        const invalid = `${state.textarea["aria-invalid"]}` === "true";
        const filled = appearance.startsWith("filled");
        const rootStyles = useRootStyles4();
        state.root.className = mergeClasses(textareaClassNames.root, rootStyles.base, disabled && rootStyles.disabled, !disabled && filled && rootStyles.filled, !disabled && rootStyles[appearance], !disabled && rootStyles.interactive, !disabled && appearance === "outline" && rootStyles.outlineInteractive, !disabled && invalid && rootStyles.invalid, state.root.className);
        const textareaStyles = useTextareaStyles();
        const textareaResizeStyles = useTextareaResizeStyles();
        state.textarea.className = mergeClasses(textareaClassNames.textarea, textareaStyles.base, textareaStyles[size], textareaResizeStyles[resize], disabled && textareaStyles.disabled, state.textarea.className);
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-textarea/lib/components/Textarea/Textarea.js
  var React66, Textarea;
  var init_Textarea = __esm({
    "node_modules/@fluentui/react-textarea/lib/components/Textarea/Textarea.js"() {
      React66 = __toESM(require_react());
      init_renderTextarea();
      init_useTextarea();
      init_useTextareaStyles_styles();
      init_lib();
      Textarea = /* @__PURE__ */ React66.forwardRef((props, ref) => {
        const state = useTextarea_unstable(props, ref);
        useTextareaStyles_unstable(state);
        useCustomStyleHook("useTextareaStyles_unstable")(state);
        return renderTextarea_unstable(state);
      });
      Textarea.displayName = "Textarea";
    }
  });

  // node_modules/@fluentui/react-textarea/lib/components/Textarea/index.js
  var init_Textarea2 = __esm({
    "node_modules/@fluentui/react-textarea/lib/components/Textarea/index.js"() {
      init_Textarea();
    }
  });

  // node_modules/@fluentui/react-textarea/lib/Textarea.js
  var init_Textarea3 = __esm({
    "node_modules/@fluentui/react-textarea/lib/Textarea.js"() {
      init_Textarea2();
    }
  });

  // node_modules/@fluentui/react-textarea/lib/index.js
  var init_lib19 = __esm({
    "node_modules/@fluentui/react-textarea/lib/index.js"() {
      init_Textarea3();
    }
  });

  // node_modules/@fluentui/react-toolbar/lib/components/Toolbar/useToolbar.js
  var React67, useToolbar_unstable, useToolbarSelectableState;
  var init_useToolbar = __esm({
    "node_modules/@fluentui/react-toolbar/lib/components/Toolbar/useToolbar.js"() {
      React67 = __toESM(require_react());
      init_lib2();
      init_lib5();
      useToolbar_unstable = (props, ref) => {
        const { size = "medium", vertical = false } = props;
        const arrowNavigationProps = useArrowNavigationGroup({
          circular: true,
          axis: "both"
        });
        const initialState = {
          size,
          vertical,
          // TODO add appropriate props/defaults
          components: {
            // TODO add each slot's element type or component
            root: "div"
          },
          // TODO add appropriate slots, for example:
          // mySlot: resolveShorthand(props.mySlot),
          root: slot_exports.always(getIntrinsicElementProps("div", {
            role: "toolbar",
            // FIXME:
            // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`
            // but since it would be a breaking change to fix it, we are casting ref to it's proper type
            ref,
            ...vertical && {
              "aria-orientation": "vertical"
            },
            ...arrowNavigationProps,
            ...props
          }), {
            elementType: "div"
          })
        };
        const [checkedValues, onCheckedValueChange] = useToolbarSelectableState({
          checkedValues: props.checkedValues,
          defaultCheckedValues: props.defaultCheckedValues,
          onCheckedValueChange: props.onCheckedValueChange
        });
        const handleToggleButton = useEventCallback((e, name, value, checked) => {
          if (name && value) {
            const checkedItems = (checkedValues === null || checkedValues === void 0 ? void 0 : checkedValues[name]) || [];
            const newCheckedItems = [
              ...checkedItems
            ];
            if (checked) {
              newCheckedItems.splice(newCheckedItems.indexOf(value), 1);
            } else {
              newCheckedItems.push(value);
            }
            onCheckedValueChange === null || onCheckedValueChange === void 0 ? void 0 : onCheckedValueChange(e, {
              name,
              checkedItems: newCheckedItems
            });
          }
        });
        const handleRadio = useEventCallback((e, name, value, checked) => {
          if (name && value) {
            onCheckedValueChange === null || onCheckedValueChange === void 0 ? void 0 : onCheckedValueChange(e, {
              name,
              checkedItems: [
                value
              ]
            });
          }
        });
        return {
          ...initialState,
          handleToggleButton,
          handleRadio,
          checkedValues: checkedValues !== null && checkedValues !== void 0 ? checkedValues : {}
        };
      };
      useToolbarSelectableState = (state) => {
        const [checkedValues, setCheckedValues] = useControllableState({
          state: state.checkedValues,
          defaultState: state.defaultCheckedValues,
          initialState: {}
        });
        const { onCheckedValueChange: onCheckedValueChangeOriginal } = state;
        const onCheckedValueChange = useEventCallback((e, { name, checkedItems }) => {
          if (onCheckedValueChangeOriginal) {
            onCheckedValueChangeOriginal(e, {
              name,
              checkedItems
            });
          }
          setCheckedValues((s) => {
            return s ? {
              ...s,
              [name]: checkedItems
            } : {
              [name]: checkedItems
            };
          });
        });
        return [
          checkedValues,
          onCheckedValueChange
        ];
      };
    }
  });

  // node_modules/@fluentui/react-toolbar/lib/components/Toolbar/ToolbarContext.js
  var ToolbarContext;
  var init_ToolbarContext = __esm({
    "node_modules/@fluentui/react-toolbar/lib/components/Toolbar/ToolbarContext.js"() {
      init_lib7();
      ToolbarContext = createContext17(void 0);
    }
  });

  // node_modules/@fluentui/react-toolbar/lib/components/Toolbar/renderToolbar.js
  var renderToolbar_unstable;
  var init_renderToolbar = __esm({
    "node_modules/@fluentui/react-toolbar/lib/components/Toolbar/renderToolbar.js"() {
      init_jsx_runtime();
      init_lib2();
      init_ToolbarContext();
      renderToolbar_unstable = (state, contextValues) => {
        assertSlots(state);
        return /* @__PURE__ */ jsx(ToolbarContext.Provider, {
          value: contextValues.toolbar,
          children: /* @__PURE__ */ jsx(state.root, {
            children: state.root.children
          })
        });
      };
    }
  });

  // node_modules/@fluentui/react-toolbar/lib/components/Toolbar/useToolbarStyles.styles.js
  var toolbarClassNames, useStyles7, useToolbarStyles_unstable;
  var init_useToolbarStyles_styles = __esm({
    "node_modules/@fluentui/react-toolbar/lib/components/Toolbar/useToolbarStyles.styles.js"() {
      init_index_esm2();
      toolbarClassNames = {
        root: "fui-Toolbar"
      };
      useStyles7 = /* @__PURE__ */ __styles2({
        root: {
          mc9l5x: "f22iagw",
          Bt984gj: "f122n59",
          Byoj8tv: 0,
          uwmqm3: 0,
          z189sj: 0,
          z8tnut: 0,
          B0ocmuz: "f1yqiaad"
        },
        vertical: {
          Beiy3e4: "f1vx9l62",
          a9b677: "f1acs6jw"
        },
        small: {
          Byoj8tv: 0,
          uwmqm3: 0,
          z189sj: 0,
          z8tnut: 0,
          B0ocmuz: "fvz760z"
        },
        medium: {
          Byoj8tv: 0,
          uwmqm3: 0,
          z189sj: 0,
          z8tnut: 0,
          B0ocmuz: "f1yqiaad"
        },
        large: {
          Byoj8tv: 0,
          uwmqm3: 0,
          z189sj: 0,
          z8tnut: 0,
          B0ocmuz: "f1ms6bdn"
        }
      }, {
        d: [".f22iagw{display:flex;}", ".f122n59{align-items:center;}", [".f1yqiaad{padding:4px 8px;}", {
          p: -1
        }], ".f1vx9l62{flex-direction:column;}", ".f1acs6jw{width:fit-content;}", [".fvz760z{padding:0px 4px;}", {
          p: -1
        }], [".f1yqiaad{padding:4px 8px;}", {
          p: -1
        }], [".f1ms6bdn{padding:4px 20px;}", {
          p: -1
        }]]
      });
      useToolbarStyles_unstable = (state) => {
        "use no memo";
        const styles = useStyles7();
        const {
          vertical,
          size
        } = state;
        state.root.className = mergeClasses(toolbarClassNames.root, styles.root, vertical && styles.vertical, size === "small" && !vertical && styles.small, size === "medium" && !vertical && styles.medium, size === "large" && !vertical && styles.large, state.root.className);
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-toolbar/lib/components/Toolbar/useToolbarContextValues.js
  function useToolbarContextValues_unstable(state) {
    const { size, handleToggleButton, vertical, checkedValues, handleRadio } = state;
    const toolbar = {
      size,
      vertical,
      handleToggleButton,
      handleRadio,
      checkedValues
    };
    return {
      toolbar
    };
  }
  var init_useToolbarContextValues = __esm({
    "node_modules/@fluentui/react-toolbar/lib/components/Toolbar/useToolbarContextValues.js"() {
    }
  });

  // node_modules/@fluentui/react-toolbar/lib/components/Toolbar/Toolbar.js
  var React68, Toolbar;
  var init_Toolbar = __esm({
    "node_modules/@fluentui/react-toolbar/lib/components/Toolbar/Toolbar.js"() {
      React68 = __toESM(require_react());
      init_useToolbar();
      init_renderToolbar();
      init_useToolbarStyles_styles();
      init_useToolbarContextValues();
      init_lib();
      Toolbar = /* @__PURE__ */ React68.forwardRef((props, ref) => {
        const state = useToolbar_unstable(props, ref);
        const contextValues = useToolbarContextValues_unstable(state);
        useToolbarStyles_unstable(state);
        useCustomStyleHook("useToolbarStyles_unstable")(state);
        return renderToolbar_unstable(state, contextValues);
      });
      Toolbar.displayName = "Toolbar";
    }
  });

  // node_modules/@fluentui/react-toolbar/lib/components/Toolbar/index.js
  var init_Toolbar2 = __esm({
    "node_modules/@fluentui/react-toolbar/lib/components/Toolbar/index.js"() {
      init_Toolbar();
    }
  });

  // node_modules/@fluentui/react-toolbar/lib/Toolbar.js
  var init_Toolbar3 = __esm({
    "node_modules/@fluentui/react-toolbar/lib/Toolbar.js"() {
      init_Toolbar2();
    }
  });

  // node_modules/@fluentui/react-toolbar/lib/components/ToolbarButton/useToolbarButtonStyles.styles.js
  var useBaseStyles, useToolbarButtonStyles_unstable;
  var init_useToolbarButtonStyles_styles = __esm({
    "node_modules/@fluentui/react-toolbar/lib/components/ToolbarButton/useToolbarButtonStyles.styles.js"() {
      init_index_esm2();
      init_lib13();
      useBaseStyles = /* @__PURE__ */ __styles2({
        vertical: {
          Beiy3e4: "f1vx9l62"
        },
        verticalIcon: {
          Be2twd7: "f1rt2boy",
          jrapky: 0,
          Frg6f3: 0,
          t21cq0: 0,
          B6of3ja: 0,
          B74szlk: "f1s184ao"
        }
      }, {
        d: [".f1vx9l62{flex-direction:column;}", ".f1rt2boy{font-size:24px;}", [".f1s184ao{margin:0;}", {
          p: -1
        }]]
      });
      useToolbarButtonStyles_unstable = (state) => {
        "use no memo";
        useButtonStyles_unstable(state);
        const buttonStyles = useBaseStyles();
        state.root.className = mergeClasses(state.root.className, state.vertical && buttonStyles.vertical);
        if (state.icon) {
          state.icon.className = mergeClasses(state.icon.className, state.vertical && buttonStyles.verticalIcon);
        }
      };
    }
  });

  // node_modules/@fluentui/react-toolbar/lib/components/ToolbarButton/useToolbarButton.js
  var React69, useToolbarButton_unstable;
  var init_useToolbarButton = __esm({
    "node_modules/@fluentui/react-toolbar/lib/components/ToolbarButton/useToolbarButton.js"() {
      React69 = __toESM(require_react());
      init_lib13();
      useToolbarButton_unstable = (props, ref) => {
        const { vertical = false, ...buttonProps } = props;
        const state = useButton_unstable({
          appearance: "subtle",
          ...buttonProps,
          size: "medium"
        }, ref);
        return {
          vertical,
          ...state
        };
      };
    }
  });

  // node_modules/@fluentui/react-toolbar/lib/components/ToolbarButton/ToolbarButton.js
  var React70, ToolbarButton;
  var init_ToolbarButton = __esm({
    "node_modules/@fluentui/react-toolbar/lib/components/ToolbarButton/ToolbarButton.js"() {
      React70 = __toESM(require_react());
      init_lib13();
      init_useToolbarButtonStyles_styles();
      init_useToolbarButton();
      init_lib();
      ToolbarButton = /* @__PURE__ */ React70.forwardRef((props, ref) => {
        const state = useToolbarButton_unstable(props, ref);
        useToolbarButtonStyles_unstable(state);
        useCustomStyleHook("useToolbarButtonStyles_unstable")(state);
        return renderButton_unstable(state);
      });
      ToolbarButton.displayName = "ToolbarButton";
    }
  });

  // node_modules/@fluentui/react-toolbar/lib/components/ToolbarButton/index.js
  var init_ToolbarButton2 = __esm({
    "node_modules/@fluentui/react-toolbar/lib/components/ToolbarButton/index.js"() {
      init_ToolbarButton();
    }
  });

  // node_modules/@fluentui/react-toolbar/lib/ToolbarButton.js
  var init_ToolbarButton3 = __esm({
    "node_modules/@fluentui/react-toolbar/lib/ToolbarButton.js"() {
      init_ToolbarButton2();
    }
  });

  // node_modules/@fluentui/react-toolbar/lib/index.js
  var init_lib20 = __esm({
    "node_modules/@fluentui/react-toolbar/lib/index.js"() {
      init_Toolbar3();
      init_ToolbarButton3();
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBar/getIntentIcon.js
  function getIntentIcon(intent) {
    switch (intent) {
      case "info":
        return /* @__PURE__ */ React71.createElement(InfoFilled, null);
      case "warning":
        return /* @__PURE__ */ React71.createElement(WarningFilled, null);
      case "error":
        return /* @__PURE__ */ React71.createElement(DismissCircleFilled, null);
      case "success":
        return /* @__PURE__ */ React71.createElement(CheckmarkCircleFilled, null);
      default:
        return null;
    }
  }
  var React71;
  var init_getIntentIcon = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBar/getIntentIcon.js"() {
      React71 = __toESM(require_react());
      init_lib10();
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBar/useMessageBarReflow.js
  function useMessageBarReflow(enabled = false) {
    const { targetDocument } = useFluent();
    const forceUpdate = React72.useReducer(() => ({}), {})[1];
    const reflowingRef = React72.useRef(false);
    const resizeObserverRef = React72.useRef(null);
    const prevInlineSizeRef = React72.useRef(-1);
    const handleResize = React72.useCallback((entries) => {
      var _entry_borderBoxSize_, _entry_borderBoxSize;
      if (entries.length > 1) {
        console.error([
          "useMessageBarReflow: Resize observer should only have one entry. ",
          "If multiple entries are observed, the first entry will be used.",
          "This is a bug, please report it to the Fluent UI team."
        ].join(" "));
      }
      const entry = entries[0];
      var _entry_borderBoxSize__inlineSize;
      const inlineSize = (_entry_borderBoxSize__inlineSize = entry === null || entry === void 0 ? void 0 : (_entry_borderBoxSize = entry.borderBoxSize) === null || _entry_borderBoxSize === void 0 ? void 0 : (_entry_borderBoxSize_ = _entry_borderBoxSize[0]) === null || _entry_borderBoxSize_ === void 0 ? void 0 : _entry_borderBoxSize_.inlineSize) !== null && _entry_borderBoxSize__inlineSize !== void 0 ? _entry_borderBoxSize__inlineSize : entry === null || entry === void 0 ? void 0 : entry.target.getBoundingClientRect().width;
      if (inlineSize === void 0 || !entry) {
        return;
      }
      const { target } = entry;
      if (!isHTMLElement(target)) {
        return;
      }
      let nextReflowing;
      if (reflowingRef.current) {
        if (prevInlineSizeRef.current < inlineSize) {
          nextReflowing = false;
        }
      } else {
        const scrollWidth = target.scrollWidth;
        if (inlineSize < scrollWidth) {
          nextReflowing = true;
        }
      }
      prevInlineSizeRef.current = inlineSize;
      if (typeof nextReflowing !== "undefined" && reflowingRef.current !== nextReflowing) {
        reflowingRef.current = nextReflowing;
        forceUpdate();
      }
    }, [
      forceUpdate
    ]);
    const ref = React72.useCallback((el) => {
      var _resizeObserverRef_current;
      if (!enabled || !el || !(targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView)) {
        return;
      }
      (_resizeObserverRef_current = resizeObserverRef.current) === null || _resizeObserverRef_current === void 0 ? void 0 : _resizeObserverRef_current.disconnect();
      const win = targetDocument.defaultView;
      const resizeObserver = new win.ResizeObserver(handleResize);
      resizeObserverRef.current = resizeObserver;
      resizeObserver.observe(el, {
        box: "border-box"
      });
    }, [
      targetDocument,
      handleResize,
      enabled
    ]);
    React72.useEffect(() => {
      return () => {
        var _resizeObserverRef_current;
        (_resizeObserverRef_current = resizeObserverRef.current) === null || _resizeObserverRef_current === void 0 ? void 0 : _resizeObserverRef_current.disconnect();
      };
    }, []);
    return {
      ref,
      reflowing: reflowingRef.current
    };
  }
  var React72;
  var init_useMessageBarReflow = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBar/useMessageBarReflow.js"() {
      React72 = __toESM(require_react());
      init_lib();
      init_lib2();
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/contexts/messageBarTransitionContext.js
  var React73, messageBarTransitionContext, messageBarTransitionContextDefaultValue, MessageBarTransitionContextProvider, useMessageBarTransitionContext;
  var init_messageBarTransitionContext = __esm({
    "node_modules/@fluentui/react-message-bar/lib/contexts/messageBarTransitionContext.js"() {
      React73 = __toESM(require_react());
      messageBarTransitionContext = React73.createContext(void 0);
      messageBarTransitionContextDefaultValue = {
        className: "",
        nodeRef: React73.createRef()
      };
      MessageBarTransitionContextProvider = messageBarTransitionContext.Provider;
      useMessageBarTransitionContext = () => {
        var _React_useContext;
        return (_React_useContext = React73.useContext(messageBarTransitionContext)) !== null && _React_useContext !== void 0 ? _React_useContext : messageBarTransitionContextDefaultValue;
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBar/useMessageBar.js
  var React74, useMessageBar_unstable;
  var init_useMessageBar = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBar/useMessageBar.js"() {
      React74 = __toESM(require_react());
      init_lib2();
      init_lib();
      init_getIntentIcon();
      init_useMessageBarReflow();
      init_messageBarTransitionContext();
      useMessageBar_unstable = (props, ref) => {
        const { layout = "auto", intent = "info", politeness, shape = "rounded" } = props;
        const computedPoliteness = (politeness !== null && politeness !== void 0 ? politeness : intent === "info") ? "polite" : "assertive";
        const autoReflow = layout === "auto";
        const { ref: reflowRef, reflowing } = useMessageBarReflow(autoReflow);
        const computedLayout = autoReflow ? reflowing ? "multiline" : "singleline" : layout;
        const { className: transitionClassName, nodeRef } = useMessageBarTransitionContext();
        const actionsRef = React74.useRef(null);
        const bodyRef = React74.useRef(null);
        const { announce } = useAnnounce();
        const titleId = useId2();
        React74.useEffect(() => {
          var _bodyRef_current, _actionsRef_current;
          const bodyMessage = (_bodyRef_current = bodyRef.current) === null || _bodyRef_current === void 0 ? void 0 : _bodyRef_current.textContent;
          const actionsMessage = (_actionsRef_current = actionsRef.current) === null || _actionsRef_current === void 0 ? void 0 : _actionsRef_current.textContent;
          const message = [
            bodyMessage,
            actionsMessage
          ].filter(Boolean).join(",");
          announce(message, {
            polite: computedPoliteness === "polite",
            alert: computedPoliteness === "assertive"
          });
        }, [
          bodyRef,
          actionsRef,
          announce,
          computedPoliteness
        ]);
        return {
          components: {
            root: "div",
            icon: "div",
            bottomReflowSpacer: "div"
          },
          root: slot_exports.always(getIntrinsicElementProps("div", {
            ref: useMergedRefs(ref, reflowRef, nodeRef),
            role: "group",
            "aria-labelledby": titleId,
            ...props
          }), {
            elementType: "div"
          }),
          icon: slot_exports.optional(props.icon, {
            renderByDefault: true,
            elementType: "div",
            defaultProps: {
              children: getIntentIcon(intent)
            }
          }),
          bottomReflowSpacer: slot_exports.optional(props.bottomReflowSpacer, {
            renderByDefault: computedLayout === "multiline",
            elementType: "div"
          }),
          layout: computedLayout,
          intent,
          transitionClassName,
          actionsRef,
          bodyRef,
          titleId,
          shape
        };
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/contexts/messageBarContext.js
  var React75, messageBarContext, messageBarContextDefaultValue, MessageBarContextProvider, useMessageBarContext;
  var init_messageBarContext = __esm({
    "node_modules/@fluentui/react-message-bar/lib/contexts/messageBarContext.js"() {
      React75 = __toESM(require_react());
      messageBarContext = React75.createContext(void 0);
      messageBarContextDefaultValue = {
        titleId: "",
        layout: "singleline",
        actionsRef: React75.createRef(),
        bodyRef: React75.createRef()
      };
      MessageBarContextProvider = messageBarContext.Provider;
      useMessageBarContext = () => {
        var _React_useContext;
        return (_React_useContext = React75.useContext(messageBarContext)) !== null && _React_useContext !== void 0 ? _React_useContext : messageBarContextDefaultValue;
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBar/renderMessageBar.js
  var renderMessageBar_unstable;
  var init_renderMessageBar = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBar/renderMessageBar.js"() {
      init_jsx_runtime();
      init_lib2();
      init_messageBarContext();
      renderMessageBar_unstable = (state, contexts) => {
        assertSlots(state);
        return /* @__PURE__ */ jsx(MessageBarContextProvider, {
          value: contexts.messageBar,
          children: /* @__PURE__ */ jsxs(state.root, {
            children: [
              state.icon && /* @__PURE__ */ jsx(state.icon, {}),
              state.root.children,
              state.bottomReflowSpacer && /* @__PURE__ */ jsx(state.bottomReflowSpacer, {})
            ]
          })
        });
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBar/useMessageBarStyles.styles.js
  var messageBarClassNames, useRootBaseStyles, useIconBaseStyles, useReflowSpacerBaseStyles, useStyles8, useIconIntentStyles, useRootIntentStyles, useMessageBarStyles_unstable;
  var init_useMessageBarStyles_styles = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBar/useMessageBarStyles.styles.js"() {
      init_index_esm2();
      messageBarClassNames = {
        root: "fui-MessageBar",
        icon: "fui-MessageBar__icon",
        bottomReflowSpacer: "fui-MessageBar__bottomReflowSpacer"
      };
      useRootBaseStyles = /* @__PURE__ */ __resetStyles2("r2oyxsj", "r1wuyrhw", ['.r2oyxsj{white-space:nowrap;display:grid;grid-template-columns:auto 1fr auto auto;grid-template-rows:1fr;grid-template-areas:"icon body secondaryActions actions";padding-left:var(--spacingHorizontalM);border:var(--strokeWidthThin) solid var(--colorNeutralStroke1);border-radius:var(--borderRadiusMedium);align-items:center;min-height:36px;box-sizing:border-box;background-color:var(--colorNeutralBackground3);}', '.r1wuyrhw{white-space:nowrap;display:grid;grid-template-columns:auto 1fr auto auto;grid-template-rows:1fr;grid-template-areas:"icon body secondaryActions actions";padding-right:var(--spacingHorizontalM);border:var(--strokeWidthThin) solid var(--colorNeutralStroke1);border-radius:var(--borderRadiusMedium);align-items:center;min-height:36px;box-sizing:border-box;background-color:var(--colorNeutralBackground3);}']);
      useIconBaseStyles = /* @__PURE__ */ __resetStyles2("r1df1z33", "rivnfjc", [".r1df1z33{grid-area:icon;font-size:var(--fontSizeBase500);margin-right:var(--spacingHorizontalS);color:var(--colorNeutralForeground3);display:flex;align-items:center;}", ".rivnfjc{grid-area:icon;font-size:var(--fontSizeBase500);margin-left:var(--spacingHorizontalS);color:var(--colorNeutralForeground3);display:flex;align-items:center;}"]);
      useReflowSpacerBaseStyles = /* @__PURE__ */ __resetStyles2("r1vx593n", null, [".r1vx593n{margin-bottom:var(--spacingVerticalS);grid-area:secondaryActions;}"]);
      useStyles8 = /* @__PURE__ */ __styles2({
        rootMultiline: {
          Huce71: "f6juhto",
          Bt984gj: "f1s2louj",
          z8tnut: "f1ngh7ph",
          Budl1dq: "f17g0uqy",
          zoa1oz: "f1w7oly7"
        },
        secondaryActionsMultiline: {
          Brf1p80: "f1e8xxv9",
          B6of3ja: "f1gaxbfw",
          jrapky: "fqcjy3b",
          t21cq0: ["fibjyge", "f9yszdx"]
        },
        square: {
          Beyfa6y: 0,
          Bbmb7ep: 0,
          Btl43ni: 0,
          B7oj6ja: 0,
          Dimara: "fokr779"
        }
      }, {
        d: [".f6juhto{white-space:normal;}", ".f1s2louj{align-items:start;}", ".f1ngh7ph{padding-top:var(--spacingVerticalMNudge);}", ".f17g0uqy{grid-template-columns:auto 1fr auto;}", '.f1w7oly7{grid-template-areas:"icon body actions" "secondaryActions secondaryActions secondaryActions";}', ".f1e8xxv9{justify-content:end;}", ".f1gaxbfw{margin-top:var(--spacingVerticalMNudge);}", ".fqcjy3b{margin-bottom:var(--spacingVerticalS);}", ".fibjyge{margin-right:0px;}", ".f9yszdx{margin-left:0px;}", [".fokr779{border-radius:0;}", {
          p: -1
        }]]
      });
      useIconIntentStyles = /* @__PURE__ */ __styles2({
        info: {},
        error: {
          sj55zd: "f1ca9wz"
        },
        warning: {
          sj55zd: "f14a4cve"
        },
        success: {
          sj55zd: "f36rra6"
        }
      }, {
        d: [".f1ca9wz{color:var(--colorStatusDangerForeground1);}", ".f14a4cve{color:var(--colorStatusWarningForeground3);}", ".f36rra6{color:var(--colorStatusSuccessForeground1);}"]
      });
      useRootIntentStyles = /* @__PURE__ */ __styles2({
        info: {},
        error: {
          De3pzq: "f1eon7jj",
          g2u3we: "f1f8dvr7",
          h3c5rm: ["f1g1ijmo", "f1nxacbt"],
          B9xav0g: "fo25q1j",
          zhjwy3: ["f1nxacbt", "f1g1ijmo"]
        },
        warning: {
          De3pzq: "f13ftzij",
          g2u3we: "frd1ypx",
          h3c5rm: ["f1gyjrma", "f18qd5xz"],
          B9xav0g: "fqyqtrt",
          zhjwy3: ["f18qd5xz", "f1gyjrma"]
        },
        success: {
          De3pzq: "f64thcm",
          g2u3we: "f1b4u7v",
          h3c5rm: ["f1nyd2b1", "f70v3om"],
          B9xav0g: "fk173vo",
          zhjwy3: ["f70v3om", "f1nyd2b1"]
        }
      }, {
        d: [".f1eon7jj{background-color:var(--colorStatusDangerBackground1);}", ".f1f8dvr7{border-top-color:var(--colorStatusDangerBorder1);}", ".f1g1ijmo{border-right-color:var(--colorStatusDangerBorder1);}", ".f1nxacbt{border-left-color:var(--colorStatusDangerBorder1);}", ".fo25q1j{border-bottom-color:var(--colorStatusDangerBorder1);}", ".f13ftzij{background-color:var(--colorStatusWarningBackground1);}", ".frd1ypx{border-top-color:var(--colorStatusWarningBorder1);}", ".f1gyjrma{border-right-color:var(--colorStatusWarningBorder1);}", ".f18qd5xz{border-left-color:var(--colorStatusWarningBorder1);}", ".fqyqtrt{border-bottom-color:var(--colorStatusWarningBorder1);}", ".f64thcm{background-color:var(--colorStatusSuccessBackground1);}", ".f1b4u7v{border-top-color:var(--colorStatusSuccessBorder1);}", ".f1nyd2b1{border-right-color:var(--colorStatusSuccessBorder1);}", ".f70v3om{border-left-color:var(--colorStatusSuccessBorder1);}", ".fk173vo{border-bottom-color:var(--colorStatusSuccessBorder1);}"]
      });
      useMessageBarStyles_unstable = (state) => {
        "use no memo";
        const rootBaseStyles = useRootBaseStyles();
        const iconBaseStyles = useIconBaseStyles();
        const iconIntentStyles = useIconIntentStyles();
        const rootIntentStyles = useRootIntentStyles();
        const reflowSpacerStyles = useReflowSpacerBaseStyles();
        const styles = useStyles8();
        state.root.className = mergeClasses(messageBarClassNames.root, rootBaseStyles, state.layout === "multiline" && styles.rootMultiline, state.shape === "square" && styles.square, rootIntentStyles[state.intent], state.transitionClassName, state.root.className);
        if (state.icon) {
          state.icon.className = mergeClasses(messageBarClassNames.icon, iconBaseStyles, iconIntentStyles[state.intent], state.icon.className);
        }
        if (state.bottomReflowSpacer) {
          state.bottomReflowSpacer.className = mergeClasses(messageBarClassNames.bottomReflowSpacer, reflowSpacerStyles);
        }
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBar/useMessageBarContextValues.js
  function useMessageBarContextValue_unstable(state) {
    const { layout, actionsRef, bodyRef, titleId } = state;
    const messageBarContext2 = React76.useMemo(() => ({
      layout,
      actionsRef,
      bodyRef,
      titleId
    }), [
      layout,
      actionsRef,
      bodyRef,
      titleId
    ]);
    return {
      messageBar: messageBarContext2
    };
  }
  var React76;
  var init_useMessageBarContextValues = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBar/useMessageBarContextValues.js"() {
      React76 = __toESM(require_react());
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBar/MessageBar.js
  var React77, MessageBar;
  var init_MessageBar = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBar/MessageBar.js"() {
      React77 = __toESM(require_react());
      init_lib();
      init_useMessageBar();
      init_renderMessageBar();
      init_useMessageBarStyles_styles();
      init_useMessageBarContextValues();
      MessageBar = /* @__PURE__ */ React77.forwardRef((props, ref) => {
        const state = useMessageBar_unstable(props, ref);
        useMessageBarStyles_unstable(state);
        useCustomStyleHook("useMessageBarStyles_unstable")(state);
        return renderMessageBar_unstable(state, useMessageBarContextValue_unstable(state));
      });
      MessageBar.displayName = "MessageBar";
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBar/index.js
  var init_MessageBar2 = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBar/index.js"() {
      init_MessageBar();
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/MessageBar.js
  var init_MessageBar3 = __esm({
    "node_modules/@fluentui/react-message-bar/lib/MessageBar.js"() {
      init_MessageBar2();
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarTitle/useMessageBarTitle.js
  var React78, useMessageBarTitle_unstable;
  var init_useMessageBarTitle = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarTitle/useMessageBarTitle.js"() {
      React78 = __toESM(require_react());
      init_lib2();
      init_messageBarContext();
      useMessageBarTitle_unstable = (props, ref) => {
        const { titleId } = useMessageBarContext();
        return {
          components: {
            root: "span"
          },
          root: slot_exports.always(getIntrinsicElementProps("span", {
            ref,
            id: titleId,
            ...props
          }), {
            elementType: "span"
          })
        };
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarTitle/renderMessageBarTitle.js
  var renderMessageBarTitle_unstable;
  var init_renderMessageBarTitle = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarTitle/renderMessageBarTitle.js"() {
      init_jsx_runtime();
      init_lib2();
      renderMessageBarTitle_unstable = (state) => {
        assertSlots(state);
        return /* @__PURE__ */ jsx(state.root, {});
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarTitle/useMessageBarTitleStyles.styles.js
  var messageBarTitleClassNames, useRootBaseStyles2, useMessageBarTitleStyles_unstable;
  var init_useMessageBarTitleStyles_styles = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarTitle/useMessageBarTitleStyles.styles.js"() {
      init_index_esm2();
      messageBarTitleClassNames = {
        root: "fui-MessageBarTitle"
      };
      useRootBaseStyles2 = /* @__PURE__ */ __resetStyles2("r168xkm9", null, [".r168xkm9{font-family:var(--fontFamilyBase);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightSemibold);line-height:var(--lineHeightBase300);}", '.r168xkm9::after{content:" ";}']);
      useMessageBarTitleStyles_unstable = (state) => {
        "use no memo";
        const rootBaseStyles = useRootBaseStyles2();
        state.root.className = mergeClasses(messageBarTitleClassNames.root, rootBaseStyles, state.root.className);
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarTitle/MessageBarTitle.js
  var React79, MessageBarTitle;
  var init_MessageBarTitle = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarTitle/MessageBarTitle.js"() {
      React79 = __toESM(require_react());
      init_lib();
      init_useMessageBarTitle();
      init_renderMessageBarTitle();
      init_useMessageBarTitleStyles_styles();
      MessageBarTitle = /* @__PURE__ */ React79.forwardRef((props, ref) => {
        const state = useMessageBarTitle_unstable(props, ref);
        useMessageBarTitleStyles_unstable(state);
        useCustomStyleHook("useMessageBarTitleStyles_unstable")(state);
        return renderMessageBarTitle_unstable(state);
      });
      MessageBarTitle.displayName = "MessageBarTitle";
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarTitle/index.js
  var init_MessageBarTitle2 = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarTitle/index.js"() {
      init_MessageBarTitle();
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/MessageBarTitle.js
  var init_MessageBarTitle3 = __esm({
    "node_modules/@fluentui/react-message-bar/lib/MessageBarTitle.js"() {
      init_MessageBarTitle2();
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarActions/useMessageBarActions.js
  var React80, useMessageBarActions_unstable;
  var init_useMessageBarActions = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarActions/useMessageBarActions.js"() {
      React80 = __toESM(require_react());
      init_lib2();
      init_messageBarContext();
      useMessageBarActions_unstable = (props, ref) => {
        const { layout = "singleline", actionsRef } = useMessageBarContext();
        return {
          components: {
            root: "div",
            containerAction: "div"
          },
          containerAction: slot_exports.optional(props.containerAction, {
            renderByDefault: false,
            elementType: "div"
          }),
          root: slot_exports.always(getIntrinsicElementProps("div", {
            ref: useMergedRefs(ref, actionsRef),
            ...props
          }), {
            elementType: "div"
          }),
          layout,
          hasActions: !!props.children
        };
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarActions/renderMessageBarActions.js
  var renderMessageBarActions_unstable;
  var init_renderMessageBarActions = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarActions/renderMessageBarActions.js"() {
      init_jsx_runtime();
      init_lib2();
      init_lib13();
      renderMessageBarActions_unstable = (state, contexts) => {
        assertSlots(state);
        if (state.layout === "multiline") {
          return /* @__PURE__ */ jsxs(ButtonContextProvider, {
            value: contexts.button,
            children: [
              state.containerAction && /* @__PURE__ */ jsx(state.containerAction, {}),
              /* @__PURE__ */ jsx(state.root, {})
            ]
          });
        }
        return /* @__PURE__ */ jsxs(ButtonContextProvider, {
          value: contexts.button,
          children: [
            /* @__PURE__ */ jsx(state.root, {}),
            state.containerAction && /* @__PURE__ */ jsx(state.containerAction, {})
          ]
        });
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarActions/useMessageBarActionsStyles.styles.js
  var messageBarActionsClassNames, useRootBaseStyles3, useContainerActionBaseStyles, useMultilineStyles, useMessageBarActionsStyles_unstable;
  var init_useMessageBarActionsStyles_styles = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarActions/useMessageBarActionsStyles.styles.js"() {
      init_index_esm2();
      messageBarActionsClassNames = {
        root: "fui-MessageBarActions",
        containerAction: "fui-MessageBarActions__containerAction"
      };
      useRootBaseStyles3 = /* @__PURE__ */ __resetStyles2("r1t4x98y", "r15utzv5", [".r1t4x98y{grid-area:secondaryActions;display:flex;column-gap:var(--spacingHorizontalM);padding-right:var(--spacingHorizontalM);}", ".r15utzv5{grid-area:secondaryActions;display:flex;column-gap:var(--spacingHorizontalM);padding-left:var(--spacingHorizontalM);}"]);
      useContainerActionBaseStyles = /* @__PURE__ */ __resetStyles2("rgzw8nq", "r13ur29z", [".rgzw8nq{grid-area:actions;padding-right:var(--spacingHorizontalM);}", ".r13ur29z{grid-area:actions;padding-left:var(--spacingHorizontalM);}"]);
      useMultilineStyles = /* @__PURE__ */ __styles2({
        root: {
          Brf1p80: "f1e8xxv9",
          B6of3ja: "f1gaxbfw",
          jrapky: "fqcjy3b",
          t21cq0: ["fibjyge", "f9yszdx"],
          z189sj: ["f1p3vkop", "f8cewkv"]
        },
        noActions: {
          mc9l5x: "fjseox"
        }
      }, {
        d: [".f1e8xxv9{justify-content:end;}", ".f1gaxbfw{margin-top:var(--spacingVerticalMNudge);}", ".fqcjy3b{margin-bottom:var(--spacingVerticalS);}", ".fibjyge{margin-right:0px;}", ".f9yszdx{margin-left:0px;}", ".f1p3vkop{padding-right:var(--spacingVerticalM);}", ".f8cewkv{padding-left:var(--spacingVerticalM);}", ".fjseox{display:none;}"]
      });
      useMessageBarActionsStyles_unstable = (state) => {
        "use no memo";
        const rootBaseStyles = useRootBaseStyles3();
        const containerActionBaseStyles = useContainerActionBaseStyles();
        const multilineStyles = useMultilineStyles();
        state.root.className = mergeClasses(messageBarActionsClassNames.root, rootBaseStyles, state.layout === "multiline" && multilineStyles.root, !state.hasActions && multilineStyles.noActions, state.root.className);
        if (state.containerAction) {
          state.containerAction.className = mergeClasses(messageBarActionsClassNames.containerAction, containerActionBaseStyles, state.containerAction.className);
        }
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarActions/useMessageBarActionsContextValues.js
  function useMessageBarActionsContextValue_unstable() {
    const buttonContext2 = React81.useMemo(() => ({
      size: "small"
    }), []);
    return {
      button: buttonContext2
    };
  }
  var React81;
  var init_useMessageBarActionsContextValues = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarActions/useMessageBarActionsContextValues.js"() {
      React81 = __toESM(require_react());
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarActions/MessageBarActions.js
  var React82, MessageBarActions;
  var init_MessageBarActions = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarActions/MessageBarActions.js"() {
      React82 = __toESM(require_react());
      init_lib();
      init_useMessageBarActions();
      init_renderMessageBarActions();
      init_useMessageBarActionsStyles_styles();
      init_useMessageBarActionsContextValues();
      MessageBarActions = /* @__PURE__ */ React82.forwardRef((props, ref) => {
        const state = useMessageBarActions_unstable(props, ref);
        useMessageBarActionsStyles_unstable(state);
        useCustomStyleHook("useMessageBarActionsStyles_unstable")(state);
        return renderMessageBarActions_unstable(state, useMessageBarActionsContextValue_unstable());
      });
      MessageBarActions.displayName = "MessageBarActions";
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarActions/index.js
  var init_MessageBarActions2 = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarActions/index.js"() {
      init_MessageBarActions();
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/MessageBarActions.js
  var init_MessageBarActions3 = __esm({
    "node_modules/@fluentui/react-message-bar/lib/MessageBarActions.js"() {
      init_MessageBarActions2();
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarBody/useMessageBarBody.js
  var React83, useMessageBarBody_unstable;
  var init_useMessageBarBody = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarBody/useMessageBarBody.js"() {
      React83 = __toESM(require_react());
      init_lib2();
      init_messageBarContext();
      useMessageBarBody_unstable = (props, ref) => {
        const { bodyRef } = useMessageBarContext();
        return {
          components: {
            root: "div"
          },
          root: slot_exports.always(getIntrinsicElementProps("div", {
            ref: useMergedRefs(ref, bodyRef),
            ...props
          }), {
            elementType: "div"
          })
        };
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarBody/renderMessageBarBody.js
  var renderMessageBarBody_unstable;
  var init_renderMessageBarBody = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarBody/renderMessageBarBody.js"() {
      init_jsx_runtime();
      init_lib2();
      init_lib16();
      renderMessageBarBody_unstable = (state, contextValues) => {
        assertSlots(state);
        return /* @__PURE__ */ jsx(LinkContextProvider, {
          value: contextValues.link,
          children: /* @__PURE__ */ jsx(state.root, {})
        });
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarBody/useMessageBarBodyStyles.styles.js
  var messageBarBodyClassNames, useRootBaseStyles4, useMessageBarBodyStyles_unstable;
  var init_useMessageBarBodyStyles_styles = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarBody/useMessageBarBodyStyles.styles.js"() {
      init_index_esm2();
      messageBarBodyClassNames = {
        root: "fui-MessageBarBody"
      };
      useRootBaseStyles4 = /* @__PURE__ */ __resetStyles2("rtatq2b", "re2rary", [".rtatq2b{font-family:var(--fontFamilyBase);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightRegular);line-height:var(--lineHeightBase300);grid-area:body;padding-right:var(--spacingHorizontalM);}", ".re2rary{font-family:var(--fontFamilyBase);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightRegular);line-height:var(--lineHeightBase300);grid-area:body;padding-left:var(--spacingHorizontalM);}"]);
      useMessageBarBodyStyles_unstable = (state) => {
        "use no memo";
        const rootBaseStyles = useRootBaseStyles4();
        state.root.className = mergeClasses(messageBarBodyClassNames.root, rootBaseStyles, state.root.className);
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarBody/useMessageBarBodyContextValues.js
  function useMessageBarBodyContextValues_unstable(state) {
    const link = React84.useMemo(() => ({
      inline: true
    }), []);
    return {
      link
    };
  }
  var React84;
  var init_useMessageBarBodyContextValues = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarBody/useMessageBarBodyContextValues.js"() {
      React84 = __toESM(require_react());
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarBody/MessageBarBody.js
  var React85, MessageBarBody;
  var init_MessageBarBody = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarBody/MessageBarBody.js"() {
      React85 = __toESM(require_react());
      init_lib();
      init_useMessageBarBody();
      init_renderMessageBarBody();
      init_useMessageBarBodyStyles_styles();
      init_useMessageBarBodyContextValues();
      MessageBarBody = /* @__PURE__ */ React85.forwardRef((props, ref) => {
        const state = useMessageBarBody_unstable(props, ref);
        const ctx = useMessageBarBodyContextValues_unstable(state);
        useMessageBarBodyStyles_unstable(state);
        useCustomStyleHook("useMessageBarBodyStyles_unstable")(state);
        return renderMessageBarBody_unstable(state, ctx);
      });
      MessageBarBody.displayName = "MessageBarBody";
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarBody/index.js
  var init_MessageBarBody2 = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarBody/index.js"() {
      init_MessageBarBody();
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/MessageBarBody.js
  var init_MessageBarBody3 = __esm({
    "node_modules/@fluentui/react-message-bar/lib/MessageBarBody.js"() {
      init_MessageBarBody2();
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarGroup/useMessageBarGroup.js
  var React86, useMessageBarGroup_unstable;
  var init_useMessageBarGroup = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarGroup/useMessageBarGroup.js"() {
      React86 = __toESM(require_react());
      init_lib2();
      useMessageBarGroup_unstable = (props, ref) => {
        if (true) {
          React86.Children.forEach(props.children, (c) => {
            if (!React86.isValidElement(c) || c.type === React86.Fragment) {
              throw new Error("MessageBarGroup: children must be valid MessageBar components. Please ensure you're not using fragments. ");
            }
          });
        }
        var _props_children;
        const children = React86.Children.map((_props_children = props.children) !== null && _props_children !== void 0 ? _props_children : [], (c) => React86.isValidElement(c) && c.type !== React86.Fragment ? c : null).filter(Boolean);
        var _props_animate;
        return {
          components: {
            root: "div"
          },
          root: slot_exports.always(getIntrinsicElementProps("div", {
            ref,
            ...props
          }), {
            elementType: "div"
          }),
          children,
          animate: (_props_animate = props.animate) !== null && _props_animate !== void 0 ? _props_animate : "exit-only",
          enterStyles: "",
          exitStyles: ""
        };
      };
    }
  });

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends4() {
    return _extends4 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
      }
      return n;
    }, _extends4.apply(null, arguments);
  }
  var init_extends = __esm({
    "node_modules/@babel/runtime/helpers/esm/extends.js"() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose2(r, e) {
    if (null == r) return {};
    var t = {};
    for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r[n];
    }
    return t;
  }
  var init_objectWithoutPropertiesLoose = __esm({
    "node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
      return t2.__proto__ = e2, t2;
    }, _setPrototypeOf(t, e);
  }
  var init_setPrototypeOf = __esm({
    "node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js"() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(t, o) {
    t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
  }
  var init_inheritsLoose = __esm({
    "node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"() {
      init_setPrototypeOf();
    }
  });

  // node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType2(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment7 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment7;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from2 = Object(arguments[s]);
          for (var key in from2) {
            if (hasOwnProperty2.call(from2, key)) {
              to[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from2, symbols[i])) {
                to[symbols[i]] = from2[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values2, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is2();
      var assign2 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement5, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement5(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName2(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement5(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName2(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is2();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/react-transition-group/esm/config.js
  var config_default;
  var init_config = __esm({
    "node_modules/react-transition-group/esm/config.js"() {
      config_default = {
        disabled: false
      };
    }
  });

  // node_modules/react-transition-group/esm/utils/PropTypes.js
  var import_prop_types, timeoutsShape, classNamesShape;
  var init_PropTypes = __esm({
    "node_modules/react-transition-group/esm/utils/PropTypes.js"() {
      import_prop_types = __toESM(require_prop_types());
      timeoutsShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
        enter: import_prop_types.default.number,
        exit: import_prop_types.default.number,
        appear: import_prop_types.default.number
      }).isRequired]) : null;
      classNamesShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.shape({
        enter: import_prop_types.default.string,
        exit: import_prop_types.default.string,
        active: import_prop_types.default.string
      }), import_prop_types.default.shape({
        enter: import_prop_types.default.string,
        enterDone: import_prop_types.default.string,
        enterActive: import_prop_types.default.string,
        exit: import_prop_types.default.string,
        exitDone: import_prop_types.default.string,
        exitActive: import_prop_types.default.string
      })]) : null;
    }
  });

  // node_modules/react-transition-group/esm/TransitionGroupContext.js
  var import_react20, TransitionGroupContext_default;
  var init_TransitionGroupContext = __esm({
    "node_modules/react-transition-group/esm/TransitionGroupContext.js"() {
      import_react20 = __toESM(require_react());
      TransitionGroupContext_default = import_react20.default.createContext(null);
    }
  });

  // node_modules/react-transition-group/esm/utils/reflow.js
  var forceReflow;
  var init_reflow = __esm({
    "node_modules/react-transition-group/esm/utils/reflow.js"() {
      forceReflow = function forceReflow2(node2) {
        return node2.scrollTop;
      };
    }
  });

  // node_modules/react-transition-group/esm/Transition.js
  function noop3() {
  }
  var import_prop_types2, import_react21, import_react_dom, UNMOUNTED, EXITED, ENTERING, ENTERED, EXITING, Transition, Transition_default;
  var init_Transition = __esm({
    "node_modules/react-transition-group/esm/Transition.js"() {
      init_objectWithoutPropertiesLoose();
      init_inheritsLoose();
      import_prop_types2 = __toESM(require_prop_types());
      import_react21 = __toESM(require_react());
      import_react_dom = __toESM(require_react_dom());
      init_config();
      init_PropTypes();
      init_TransitionGroupContext();
      init_reflow();
      UNMOUNTED = "unmounted";
      EXITED = "exited";
      ENTERING = "entering";
      ENTERED = "entered";
      EXITING = "exiting";
      Transition = /* @__PURE__ */ function(_React$Component) {
        _inheritsLoose(Transition2, _React$Component);
        function Transition2(props, context) {
          var _this;
          _this = _React$Component.call(this, props, context) || this;
          var parentGroup = context;
          var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
          var initialStatus;
          _this.appearStatus = null;
          if (props.in) {
            if (appear) {
              initialStatus = EXITED;
              _this.appearStatus = ENTERING;
            } else {
              initialStatus = ENTERED;
            }
          } else {
            if (props.unmountOnExit || props.mountOnEnter) {
              initialStatus = UNMOUNTED;
            } else {
              initialStatus = EXITED;
            }
          }
          _this.state = {
            status: initialStatus
          };
          _this.nextCallback = null;
          return _this;
        }
        Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
          var nextIn = _ref.in;
          if (nextIn && prevState.status === UNMOUNTED) {
            return {
              status: EXITED
            };
          }
          return null;
        };
        var _proto = Transition2.prototype;
        _proto.componentDidMount = function componentDidMount() {
          this.updateStatus(true, this.appearStatus);
        };
        _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
          var nextStatus = null;
          if (prevProps !== this.props) {
            var status = this.state.status;
            if (this.props.in) {
              if (status !== ENTERING && status !== ENTERED) {
                nextStatus = ENTERING;
              }
            } else {
              if (status === ENTERING || status === ENTERED) {
                nextStatus = EXITING;
              }
            }
          }
          this.updateStatus(false, nextStatus);
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
          this.cancelNextCallback();
        };
        _proto.getTimeouts = function getTimeouts() {
          var timeout2 = this.props.timeout;
          var exit, enter, appear;
          exit = enter = appear = timeout2;
          if (timeout2 != null && typeof timeout2 !== "number") {
            exit = timeout2.exit;
            enter = timeout2.enter;
            appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
          }
          return {
            exit,
            enter,
            appear
          };
        };
        _proto.updateStatus = function updateStatus(mounting, nextStatus) {
          if (mounting === void 0) {
            mounting = false;
          }
          if (nextStatus !== null) {
            this.cancelNextCallback();
            if (nextStatus === ENTERING) {
              if (this.props.unmountOnExit || this.props.mountOnEnter) {
                var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
                if (node2) forceReflow(node2);
              }
              this.performEnter(mounting);
            } else {
              this.performExit();
            }
          } else if (this.props.unmountOnExit && this.state.status === EXITED) {
            this.setState({
              status: UNMOUNTED
            });
          }
        };
        _proto.performEnter = function performEnter(mounting) {
          var _this2 = this;
          var enter = this.props.enter;
          var appearing = this.context ? this.context.isMounting : mounting;
          var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
          var timeouts = this.getTimeouts();
          var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
          if (!mounting && !enter || config_default.disabled) {
            this.safeSetState({
              status: ENTERED
            }, function() {
              _this2.props.onEntered(maybeNode);
            });
            return;
          }
          this.props.onEnter(maybeNode, maybeAppearing);
          this.safeSetState({
            status: ENTERING
          }, function() {
            _this2.props.onEntering(maybeNode, maybeAppearing);
            _this2.onTransitionEnd(enterTimeout, function() {
              _this2.safeSetState({
                status: ENTERED
              }, function() {
                _this2.props.onEntered(maybeNode, maybeAppearing);
              });
            });
          });
        };
        _proto.performExit = function performExit() {
          var _this3 = this;
          var exit = this.props.exit;
          var timeouts = this.getTimeouts();
          var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
          if (!exit || config_default.disabled) {
            this.safeSetState({
              status: EXITED
            }, function() {
              _this3.props.onExited(maybeNode);
            });
            return;
          }
          this.props.onExit(maybeNode);
          this.safeSetState({
            status: EXITING
          }, function() {
            _this3.props.onExiting(maybeNode);
            _this3.onTransitionEnd(timeouts.exit, function() {
              _this3.safeSetState({
                status: EXITED
              }, function() {
                _this3.props.onExited(maybeNode);
              });
            });
          });
        };
        _proto.cancelNextCallback = function cancelNextCallback() {
          if (this.nextCallback !== null) {
            this.nextCallback.cancel();
            this.nextCallback = null;
          }
        };
        _proto.safeSetState = function safeSetState(nextState, callback) {
          callback = this.setNextCallback(callback);
          this.setState(nextState, callback);
        };
        _proto.setNextCallback = function setNextCallback(callback) {
          var _this4 = this;
          var active = true;
          this.nextCallback = function(event) {
            if (active) {
              active = false;
              _this4.nextCallback = null;
              callback(event);
            }
          };
          this.nextCallback.cancel = function() {
            active = false;
          };
          return this.nextCallback;
        };
        _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
          this.setNextCallback(handler);
          var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
          var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
          if (!node2 || doesNotHaveTimeoutOrListener) {
            setTimeout(this.nextCallback, 0);
            return;
          }
          if (this.props.addEndListener) {
            var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
            this.props.addEndListener(maybeNode, maybeNextCallback);
          }
          if (timeout2 != null) {
            setTimeout(this.nextCallback, timeout2);
          }
        };
        _proto.render = function render() {
          var status = this.state.status;
          if (status === UNMOUNTED) {
            return null;
          }
          var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose2(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
          return (
            // allows for nested Transitions
            /* @__PURE__ */ import_react21.default.createElement(TransitionGroupContext_default.Provider, {
              value: null
            }, typeof children === "function" ? children(status, childProps) : import_react21.default.cloneElement(import_react21.default.Children.only(children), childProps))
          );
        };
        return Transition2;
      }(import_react21.default.Component);
      Transition.contextType = TransitionGroupContext_default;
      Transition.propTypes = true ? {
        /**
         * A React reference to DOM element that need to transition:
         * https://stackoverflow.com/a/51127130/4671932
         *
         *   - When `nodeRef` prop is used, `node` is not passed to callback functions
         *      (e.g. `onEnter`) because user already has direct access to the node.
         *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
         *     `nodeRef` need to be provided to `Transition` with changed `key` prop
         *     (see
         *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
         */
        nodeRef: import_prop_types2.default.shape({
          current: typeof Element === "undefined" ? import_prop_types2.default.any : function(propValue, key, componentName, location, propFullName, secret) {
            var value = propValue[key];
            return import_prop_types2.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
          }
        }),
        /**
         * A `function` child can be used instead of a React element. This function is
         * called with the current transition status (`'entering'`, `'entered'`,
         * `'exiting'`, `'exited'`), which can be used to apply context
         * specific props to a component.
         *
         * ```jsx
         * <Transition in={this.state.in} timeout={150}>
         *   {state => (
         *     <MyComponent className={`fade fade-${state}`} />
         *   )}
         * </Transition>
         * ```
         */
        children: import_prop_types2.default.oneOfType([import_prop_types2.default.func.isRequired, import_prop_types2.default.element.isRequired]).isRequired,
        /**
         * Show the component; triggers the enter or exit states
         */
        in: import_prop_types2.default.bool,
        /**
         * By default the child component is mounted immediately along with
         * the parent `Transition` component. If you want to "lazy mount" the component on the
         * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
         * mounted, even on "exited", unless you also specify `unmountOnExit`.
         */
        mountOnEnter: import_prop_types2.default.bool,
        /**
         * By default the child component stays mounted after it reaches the `'exited'` state.
         * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
         */
        unmountOnExit: import_prop_types2.default.bool,
        /**
         * By default the child component does not perform the enter transition when
         * it first mounts, regardless of the value of `in`. If you want this
         * behavior, set both `appear` and `in` to `true`.
         *
         * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
         * > only adds an additional enter transition. However, in the
         * > `<CSSTransition>` component that first enter transition does result in
         * > additional `.appear-*` classes, that way you can choose to style it
         * > differently.
         */
        appear: import_prop_types2.default.bool,
        /**
         * Enable or disable enter transitions.
         */
        enter: import_prop_types2.default.bool,
        /**
         * Enable or disable exit transitions.
         */
        exit: import_prop_types2.default.bool,
        /**
         * The duration of the transition, in milliseconds.
         * Required unless `addEndListener` is provided.
         *
         * You may specify a single timeout for all transitions:
         *
         * ```jsx
         * timeout={500}
         * ```
         *
         * or individually:
         *
         * ```jsx
         * timeout={{
         *  appear: 500,
         *  enter: 300,
         *  exit: 500,
         * }}
         * ```
         *
         * - `appear` defaults to the value of `enter`
         * - `enter` defaults to `0`
         * - `exit` defaults to `0`
         *
         * @type {number | { enter?: number, exit?: number, appear?: number }}
         */
        timeout: function timeout(props) {
          var pt = timeoutsShape;
          if (!props.addEndListener) pt = pt.isRequired;
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          return pt.apply(void 0, [props].concat(args));
        },
        /**
         * Add a custom transition end trigger. Called with the transitioning
         * DOM node and a `done` callback. Allows for more fine grained transition end
         * logic. Timeouts are still used as a fallback if provided.
         *
         * **Note**: when `nodeRef` prop is passed, `node` is not passed.
         *
         * ```jsx
         * addEndListener={(node, done) => {
         *   // use the css transitionend event to mark the finish of a transition
         *   node.addEventListener('transitionend', done, false);
         * }}
         * ```
         */
        addEndListener: import_prop_types2.default.func,
        /**
         * Callback fired before the "entering" status is applied. An extra parameter
         * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
         *
         * **Note**: when `nodeRef` prop is passed, `node` is not passed.
         *
         * @type Function(node: HtmlElement, isAppearing: bool) -> void
         */
        onEnter: import_prop_types2.default.func,
        /**
         * Callback fired after the "entering" status is applied. An extra parameter
         * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
         *
         * **Note**: when `nodeRef` prop is passed, `node` is not passed.
         *
         * @type Function(node: HtmlElement, isAppearing: bool)
         */
        onEntering: import_prop_types2.default.func,
        /**
         * Callback fired after the "entered" status is applied. An extra parameter
         * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
         *
         * **Note**: when `nodeRef` prop is passed, `node` is not passed.
         *
         * @type Function(node: HtmlElement, isAppearing: bool) -> void
         */
        onEntered: import_prop_types2.default.func,
        /**
         * Callback fired before the "exiting" status is applied.
         *
         * **Note**: when `nodeRef` prop is passed, `node` is not passed.
         *
         * @type Function(node: HtmlElement) -> void
         */
        onExit: import_prop_types2.default.func,
        /**
         * Callback fired after the "exiting" status is applied.
         *
         * **Note**: when `nodeRef` prop is passed, `node` is not passed.
         *
         * @type Function(node: HtmlElement) -> void
         */
        onExiting: import_prop_types2.default.func,
        /**
         * Callback fired after the "exited" status is applied.
         *
         * **Note**: when `nodeRef` prop is passed, `node` is not passed
         *
         * @type Function(node: HtmlElement) -> void
         */
        onExited: import_prop_types2.default.func
      } : {};
      Transition.defaultProps = {
        in: false,
        mountOnEnter: false,
        unmountOnExit: false,
        appear: false,
        enter: true,
        exit: true,
        onEnter: noop3,
        onEntering: noop3,
        onEntered: noop3,
        onExit: noop3,
        onExiting: noop3,
        onExited: noop3
      };
      Transition.UNMOUNTED = UNMOUNTED;
      Transition.EXITED = EXITED;
      Transition.ENTERING = ENTERING;
      Transition.ENTERED = ENTERED;
      Transition.EXITING = EXITING;
      Transition_default = Transition;
    }
  });

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }
  var init_assertThisInitialized = __esm({
    "node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"() {
    }
  });

  // node_modules/react-transition-group/esm/utils/ChildMapping.js
  function getChildMapping(children, mapFn) {
    var mapper = function mapper2(child) {
      return mapFn && (0, import_react22.isValidElement)(child) ? mapFn(child) : child;
    };
    var result = /* @__PURE__ */ Object.create(null);
    if (children) import_react22.Children.map(children, function(c) {
      return c;
    }).forEach(function(child) {
      result[child.key] = mapper(child);
    });
    return result;
  }
  function mergeChildMappings(prev2, next2) {
    prev2 = prev2 || {};
    next2 = next2 || {};
    function getValueForKey(key) {
      return key in next2 ? next2[key] : prev2[key];
    }
    var nextKeysPending = /* @__PURE__ */ Object.create(null);
    var pendingKeys = [];
    for (var prevKey in prev2) {
      if (prevKey in next2) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }
    var i;
    var childMapping = {};
    for (var nextKey in next2) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }
    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }
    return childMapping;
  }
  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }
  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
      return (0, import_react22.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, "appear", props),
        enter: getProp(child, "enter", props),
        exit: getProp(child, "exit", props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
      var child = children[key];
      if (!(0, import_react22.isValidElement)(child)) return;
      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;
      var prevChild = prevChildMapping[key];
      var isLeaving = (0, import_react22.isValidElement)(prevChild) && !prevChild.props.in;
      if (hasNext && (!hasPrev || isLeaving)) {
        children[key] = (0, import_react22.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        children[key] = (0, import_react22.cloneElement)(child, {
          in: false
        });
      } else if (hasNext && hasPrev && (0, import_react22.isValidElement)(prevChild)) {
        children[key] = (0, import_react22.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      }
    });
    return children;
  }
  var import_react22;
  var init_ChildMapping = __esm({
    "node_modules/react-transition-group/esm/utils/ChildMapping.js"() {
      import_react22 = __toESM(require_react());
    }
  });

  // node_modules/react-transition-group/esm/TransitionGroup.js
  var import_prop_types3, import_react23, values, defaultProps, TransitionGroup, TransitionGroup_default;
  var init_TransitionGroup = __esm({
    "node_modules/react-transition-group/esm/TransitionGroup.js"() {
      init_objectWithoutPropertiesLoose();
      init_extends();
      init_assertThisInitialized();
      init_inheritsLoose();
      import_prop_types3 = __toESM(require_prop_types());
      import_react23 = __toESM(require_react());
      init_TransitionGroupContext();
      init_ChildMapping();
      values = Object.values || function(obj) {
        return Object.keys(obj).map(function(k) {
          return obj[k];
        });
      };
      defaultProps = {
        component: "div",
        childFactory: function childFactory(child) {
          return child;
        }
      };
      TransitionGroup = /* @__PURE__ */ function(_React$Component) {
        _inheritsLoose(TransitionGroup2, _React$Component);
        function TransitionGroup2(props, context) {
          var _this;
          _this = _React$Component.call(this, props, context) || this;
          var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
          _this.state = {
            contextValue: {
              isMounting: true
            },
            handleExited,
            firstRender: true
          };
          return _this;
        }
        var _proto = TransitionGroup2.prototype;
        _proto.componentDidMount = function componentDidMount() {
          this.mounted = true;
          this.setState({
            contextValue: {
              isMounting: false
            }
          });
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
          this.mounted = false;
        };
        TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
          var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
          return {
            children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
            firstRender: false
          };
        };
        _proto.handleExited = function handleExited(child, node2) {
          var currentChildMapping = getChildMapping(this.props.children);
          if (child.key in currentChildMapping) return;
          if (child.props.onExited) {
            child.props.onExited(node2);
          }
          if (this.mounted) {
            this.setState(function(state) {
              var children = _extends4({}, state.children);
              delete children[child.key];
              return {
                children
              };
            });
          }
        };
        _proto.render = function render() {
          var _this$props = this.props, Component2 = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose2(_this$props, ["component", "childFactory"]);
          var contextValue = this.state.contextValue;
          var children = values(this.state.children).map(childFactory2);
          delete props.appear;
          delete props.enter;
          delete props.exit;
          if (Component2 === null) {
            return /* @__PURE__ */ import_react23.default.createElement(TransitionGroupContext_default.Provider, {
              value: contextValue
            }, children);
          }
          return /* @__PURE__ */ import_react23.default.createElement(TransitionGroupContext_default.Provider, {
            value: contextValue
          }, /* @__PURE__ */ import_react23.default.createElement(Component2, props, children));
        };
        return TransitionGroup2;
      }(import_react23.default.Component);
      TransitionGroup.propTypes = true ? {
        /**
         * `<TransitionGroup>` renders a `<div>` by default. You can change this
         * behavior by providing a `component` prop.
         * If you use React v16+ and would like to avoid a wrapping `<div>` element
         * you can pass in `component={null}`. This is useful if the wrapping div
         * borks your css styles.
         */
        component: import_prop_types3.default.any,
        /**
         * A set of `<Transition>` components, that are toggled `in` and out as they
         * leave. the `<TransitionGroup>` will inject specific transition props, so
         * remember to spread them through if you are wrapping the `<Transition>` as
         * with our `<Fade>` example.
         *
         * While this component is meant for multiple `Transition` or `CSSTransition`
         * children, sometimes you may want to have a single transition child with
         * content that you want to be transitioned out and in when you change it
         * (e.g. routes, images etc.) In that case you can change the `key` prop of
         * the transition child as you change its content, this will cause
         * `TransitionGroup` to transition the child out and back in.
         */
        children: import_prop_types3.default.node,
        /**
         * A convenience prop that enables or disables appear animations
         * for all children. Note that specifying this will override any defaults set
         * on individual children Transitions.
         */
        appear: import_prop_types3.default.bool,
        /**
         * A convenience prop that enables or disables enter animations
         * for all children. Note that specifying this will override any defaults set
         * on individual children Transitions.
         */
        enter: import_prop_types3.default.bool,
        /**
         * A convenience prop that enables or disables exit animations
         * for all children. Note that specifying this will override any defaults set
         * on individual children Transitions.
         */
        exit: import_prop_types3.default.bool,
        /**
         * You may need to apply reactive updates to a child as it is exiting.
         * This is generally done by using `cloneElement` however in the case of an exiting
         * child the element has already been removed and not accessible to the consumer.
         *
         * If you do need to update a child as it leaves you can provide a `childFactory`
         * to wrap every child, even the ones that are leaving.
         *
         * @type Function(child: ReactElement) -> ReactElement
         */
        childFactory: import_prop_types3.default.func
      } : {};
      TransitionGroup.defaultProps = defaultProps;
      TransitionGroup_default = TransitionGroup;
    }
  });

  // node_modules/react-transition-group/esm/index.js
  var init_esm2 = __esm({
    "node_modules/react-transition-group/esm/index.js"() {
      init_TransitionGroup();
      init_Transition();
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarGroup/MessageBarTransition.js
  var React90, getClassName, MessageBarTransition, MessageBarTransitionInner;
  var init_MessageBarTransition = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarGroup/MessageBarTransition.js"() {
      React90 = __toESM(require_react());
      init_esm2();
      init_messageBarTransitionContext();
      getClassName = (status, enterClassName, exitClassName, animate) => {
        switch (status) {
          case "entering":
          case "entered":
            return animate === "both" ? enterClassName : "";
          case "exiting":
          case "exited":
            return exitClassName;
          default:
            return "";
        }
      };
      MessageBarTransition = ({ children, enterClassName, exitClassName, animate, ...rest }) => {
        const nodeRef = React90.useRef(null);
        return /* @__PURE__ */ React90.createElement(Transition_default, {
          timeout: 250,
          nodeRef,
          ...rest
        }, (state) => /* @__PURE__ */ React90.createElement(MessageBarTransitionInner, {
          animate,
          enterClassName,
          exitClassName,
          nodeRef,
          state
        }, children));
      };
      MessageBarTransitionInner = ({ children, state, enterClassName, exitClassName, animate, nodeRef }) => {
        const className = getClassName(state, enterClassName, exitClassName, animate);
        const context = React90.useMemo(() => ({
          className,
          nodeRef
        }), [
          className,
          nodeRef
        ]);
        return /* @__PURE__ */ React90.createElement(MessageBarTransitionContextProvider, {
          value: context
        }, children);
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarGroup/renderMessageBarGroup.js
  var renderMessageBarGroup_unstable;
  var init_renderMessageBarGroup = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarGroup/renderMessageBarGroup.js"() {
      init_jsx_runtime();
      init_lib2();
      init_esm2();
      init_MessageBarTransition();
      renderMessageBarGroup_unstable = (state) => {
        assertSlots(state);
        return /* @__PURE__ */ jsx(state.root, {
          children: /* @__PURE__ */ jsx(TransitionGroup_default, {
            component: null,
            children: state.children.map((child) => /* @__PURE__ */ jsx(MessageBarTransition, {
              animate: state.animate,
              enterClassName: state.enterStyles,
              exitClassName: state.exitStyles,
              children: child
            }, child.key))
          })
        });
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarGroup/useMessageBarGroupStyles.styles.js
  var messageBarGroupClassNames, useStyles9, useMessageBarGroupStyles_unstable;
  var init_useMessageBarGroupStyles_styles = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarGroup/useMessageBarGroupStyles.styles.js"() {
      init_index_esm2();
      messageBarGroupClassNames = {
        root: "fui-MessageBarGroup"
      };
      useStyles9 = /* @__PURE__ */ __styles2({
        base: {
          Bf5fcs: "f4cll0y",
          vin17d: "fy8si0b"
        },
        enter: {
          Bv12yb3: "f1dg9w1v"
        },
        exit: {
          Bv12yb3: "fu80iee"
        }
      }, {
        d: [".f4cll0y{animation-fill-mode:forwards;}", ".fy8si0b{animation-duration:var(--durationNormal);}", ".f1dg9w1v{animation-name:fngeioi;}", ".fu80iee{animation-name:fk0lfw7;}"],
        k: ["@keyframes fngeioi{from{opacity:0;transform:translateY(-100%);}to{opacity:1;transform:translateY(0);}}", "@keyframes fk0lfw7{from{opacity:1;}to{opacity:0;}}"]
      });
      useMessageBarGroupStyles_unstable = (state) => {
        "use no memo";
        const styles = useStyles9();
        state.root.className = mergeClasses(messageBarGroupClassNames.root, state.root.className);
        state.enterStyles = mergeClasses(styles.base, styles.enter);
        state.exitStyles = mergeClasses(styles.base, styles.exit);
        return state;
      };
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarGroup/MessageBarGroup.js
  var React91, MessageBarGroup;
  var init_MessageBarGroup = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarGroup/MessageBarGroup.js"() {
      React91 = __toESM(require_react());
      init_lib();
      init_useMessageBarGroup();
      init_renderMessageBarGroup();
      init_useMessageBarGroupStyles_styles();
      MessageBarGroup = /* @__PURE__ */ React91.forwardRef((props, ref) => {
        const state = useMessageBarGroup_unstable(props, ref);
        useMessageBarGroupStyles_unstable(state);
        useCustomStyleHook("useMessageBarGroupStyles_unstable")(state);
        return renderMessageBarGroup_unstable(state);
      });
      MessageBarGroup.displayName = "MessageBarGroup";
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/components/MessageBarGroup/index.js
  var init_MessageBarGroup2 = __esm({
    "node_modules/@fluentui/react-message-bar/lib/components/MessageBarGroup/index.js"() {
      init_MessageBarGroup();
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/MessageBarGroup.js
  var init_MessageBarGroup3 = __esm({
    "node_modules/@fluentui/react-message-bar/lib/MessageBarGroup.js"() {
      init_MessageBarGroup2();
    }
  });

  // node_modules/@fluentui/react-message-bar/lib/index.js
  var init_lib21 = __esm({
    "node_modules/@fluentui/react-message-bar/lib/index.js"() {
      init_MessageBar3();
      init_MessageBarTitle3();
      init_MessageBarActions3();
      init_MessageBarBody3();
      init_MessageBarGroup3();
    }
  });

  // node_modules/@fluentui/react-components/lib/index.js
  var init_lib22 = __esm({
    "node_modules/@fluentui/react-components/lib/index.js"() {
      init_index_esm2();
      init_lib6();
      init_lib4();
      init_lib12();
      init_lib13();
      init_lib16();
      init_lib17();
      init_lib18();
      init_lib19();
      init_lib20();
      init_lib21();
    }
  });

  // ../PromptRepository/dist/src/PromptRepository.js
  var require_PromptRepository = __commonJS({
    "../PromptRepository/dist/src/PromptRepository.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PromptInMemoryRepository = exports.PromptFileRepository = void 0;
      exports.replacePromptPlaceholders = replacePromptPlaceholders;
      var entry_1 = require_entry();
      var fsImpl;
      try {
        if (typeof process !== "undefined" && process.versions?.node) {
          fsImpl = __require("node:fs");
        }
      } catch (error) {
      }
      function validateParameterType(paramName, paramValue, paramSpec) {
        const foundParam = paramSpec.find((p) => p.name === paramName);
        if (foundParam) {
          if (foundParam.type === "kString") {
            if (typeof paramValue !== "string") {
              throw new TypeError(`Parameter ${paramName} must be a string`);
            }
          } else if (foundParam.type === "kNumber") {
            if (isNaN(Number(paramValue))) {
              throw new TypeError(`Parameter ${paramName} must be a number`);
            }
          } else if (foundParam.type === "kEnum") {
            if (foundParam.allowedValues && paramValue) {
              if (!foundParam.allowedValues.includes(paramValue)) {
                throw new TypeError(`Parameter ${paramName} must be one of: ${foundParam.allowedValues.join(", ")}`);
              }
            }
          }
        }
      }
      function replacePromptPlaceholders(template, paramSpec, params) {
        if (paramSpec === void 0) {
          return template;
        }
        for (const param of paramSpec) {
          if (param.required) {
            if (!params.hasOwnProperty(param.name) || params[param.name] === void 0) {
              throw new TypeError(`Missing required parameter: ${param.name}`);
            } else {
              validateParameterType(param.name, params[param.name], paramSpec);
            }
          } else {
            if (!params.hasOwnProperty(param.name) || params[param.name] === void 0) {
              const foundParam = paramSpec.find((p) => p.name === param.name);
              if (foundParam) {
                params[param.name] = foundParam.defaultValue ?? "";
              }
            } else {
              validateParameterType(param.name, params[param.name], paramSpec);
            }
          }
        }
        return template.replace(/\{(.*?)}/g, (_, key) => params[key]?.toString() ?? "");
      }
      var PromptFileRepository = class {
        promptFilePath;
        prompts = [];
        constructor(promptFilePath) {
          this.promptFilePath = promptFilePath;
          if (fsImpl === void 0) {
            throw new entry_1.InvalidOperationError("PromptFileRepository is not supported in the browser");
          }
          this.prompts = JSON.parse(fsImpl.readFileSync(promptFilePath, "utf8"));
        }
        getPrompt(id) {
          return this.prompts.find((p) => p.id === id);
        }
        expandSystemPrompt(prompt, systemParams) {
          (0, entry_1.throwIfUndefined)(prompt.systemPrompt);
          return replacePromptPlaceholders(prompt.systemPrompt, prompt.systemPromptParameters, systemParams);
        }
        expandUserPrompt(prompt, userParams) {
          return replacePromptPlaceholders(prompt.userPrompt, prompt.userPromptParameters, userParams);
        }
      };
      exports.PromptFileRepository = PromptFileRepository;
      var PromptInMemoryRepository = class {
        prompts = [];
        constructor(prompts) {
          this.prompts = prompts;
        }
        getPrompt(id) {
          return this.prompts.find((p) => p.id === id);
        }
        expandSystemPrompt(prompt, params) {
          (0, entry_1.throwIfUndefined)(prompt.systemPrompt);
          return replacePromptPlaceholders(prompt.systemPrompt, prompt.systemPromptParameters, params);
        }
        expandUserPrompt(prompt, params) {
          return replacePromptPlaceholders(prompt.userPrompt, prompt.userPromptParameters, params);
        }
      };
      exports.PromptInMemoryRepository = PromptInMemoryRepository;
    }
  });

  // ../PromptRepository/node_modules/openai/internal/qs/formats.js
  var require_formats = __commonJS({
    "../PromptRepository/node_modules/openai/internal/qs/formats.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RFC3986 = exports.RFC1738 = exports.formatters = exports.default_format = void 0;
      exports.default_format = "RFC3986";
      exports.formatters = {
        RFC1738: (v) => String(v).replace(/%20/g, "+"),
        RFC3986: (v) => String(v)
      };
      exports.RFC1738 = "RFC1738";
      exports.RFC3986 = "RFC3986";
    }
  });

  // ../PromptRepository/node_modules/openai/internal/qs/utils.js
  var require_utils = __commonJS({
    "../PromptRepository/node_modules/openai/internal/qs/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.maybe_map = exports.combine = exports.is_buffer = exports.is_regexp = exports.compact = exports.encode = exports.decode = exports.assign_single_source = exports.merge = void 0;
      var formats_1 = require_formats();
      var has = Object.prototype.hasOwnProperty;
      var is_array = Array.isArray;
      var hex_table = (() => {
        const array = [];
        for (let i = 0; i < 256; ++i) {
          array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
        }
        return array;
      })();
      function compact_queue(queue) {
        while (queue.length > 1) {
          const item = queue.pop();
          if (!item)
            continue;
          const obj = item.obj[item.prop];
          if (is_array(obj)) {
            const compacted = [];
            for (let j = 0; j < obj.length; ++j) {
              if (typeof obj[j] !== "undefined") {
                compacted.push(obj[j]);
              }
            }
            item.obj[item.prop] = compacted;
          }
        }
      }
      function array_to_object(source, options) {
        const obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
        for (let i = 0; i < source.length; ++i) {
          if (typeof source[i] !== "undefined") {
            obj[i] = source[i];
          }
        }
        return obj;
      }
      function merge2(target, source, options = {}) {
        if (!source) {
          return target;
        }
        if (typeof source !== "object") {
          if (is_array(target)) {
            target.push(source);
          } else if (target && typeof target === "object") {
            if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
              target[source] = true;
            }
          } else {
            return [target, source];
          }
          return target;
        }
        if (!target || typeof target !== "object") {
          return [target].concat(source);
        }
        let mergeTarget = target;
        if (is_array(target) && !is_array(source)) {
          mergeTarget = array_to_object(target, options);
        }
        if (is_array(target) && is_array(source)) {
          source.forEach(function(item, i) {
            if (has.call(target, i)) {
              const targetItem = target[i];
              if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
                target[i] = merge2(targetItem, item, options);
              } else {
                target.push(item);
              }
            } else {
              target[i] = item;
            }
          });
          return target;
        }
        return Object.keys(source).reduce(function(acc, key) {
          const value = source[key];
          if (has.call(acc, key)) {
            acc[key] = merge2(acc[key], value, options);
          } else {
            acc[key] = value;
          }
          return acc;
        }, mergeTarget);
      }
      exports.merge = merge2;
      function assign_single_source(target, source) {
        return Object.keys(source).reduce(function(acc, key) {
          acc[key] = source[key];
          return acc;
        }, target);
      }
      exports.assign_single_source = assign_single_source;
      function decode(str, _, charset) {
        const strWithoutPlus = str.replace(/\+/g, " ");
        if (charset === "iso-8859-1") {
          return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
        }
        try {
          return decodeURIComponent(strWithoutPlus);
        } catch (e) {
          return strWithoutPlus;
        }
      }
      exports.decode = decode;
      var limit = 1024;
      var encode3 = (str, _defaultEncoder, charset, _kind, format) => {
        if (str.length === 0) {
          return str;
        }
        let string = str;
        if (typeof str === "symbol") {
          string = Symbol.prototype.toString.call(str);
        } else if (typeof str !== "string") {
          string = String(str);
        }
        if (charset === "iso-8859-1") {
          return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
            return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
          });
        }
        let out = "";
        for (let j = 0; j < string.length; j += limit) {
          const segment = string.length >= limit ? string.slice(j, j + limit) : string;
          const arr = [];
          for (let i = 0; i < segment.length; ++i) {
            let c = segment.charCodeAt(i);
            if (c === 45 || // -
            c === 46 || // .
            c === 95 || // _
            c === 126 || // ~
            c >= 48 && c <= 57 || // 0-9
            c >= 65 && c <= 90 || // a-z
            c >= 97 && c <= 122 || // A-Z
            format === formats_1.RFC1738 && (c === 40 || c === 41)) {
              arr[arr.length] = segment.charAt(i);
              continue;
            }
            if (c < 128) {
              arr[arr.length] = hex_table[c];
              continue;
            }
            if (c < 2048) {
              arr[arr.length] = hex_table[192 | c >> 6] + hex_table[128 | c & 63];
              continue;
            }
            if (c < 55296 || c >= 57344) {
              arr[arr.length] = hex_table[224 | c >> 12] + hex_table[128 | c >> 6 & 63] + hex_table[128 | c & 63];
              continue;
            }
            i += 1;
            c = 65536 + ((c & 1023) << 10 | segment.charCodeAt(i) & 1023);
            arr[arr.length] = hex_table[240 | c >> 18] + hex_table[128 | c >> 12 & 63] + hex_table[128 | c >> 6 & 63] + hex_table[128 | c & 63];
          }
          out += arr.join("");
        }
        return out;
      };
      exports.encode = encode3;
      function compact(value) {
        const queue = [{ obj: { o: value }, prop: "o" }];
        const refs = [];
        for (let i = 0; i < queue.length; ++i) {
          const item = queue[i];
          const obj = item.obj[item.prop];
          const keys = Object.keys(obj);
          for (let j = 0; j < keys.length; ++j) {
            const key = keys[j];
            const val = obj[key];
            if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
              queue.push({ obj, prop: key });
              refs.push(val);
            }
          }
        }
        compact_queue(queue);
        return value;
      }
      exports.compact = compact;
      function is_regexp(obj) {
        return Object.prototype.toString.call(obj) === "[object RegExp]";
      }
      exports.is_regexp = is_regexp;
      function is_buffer(obj) {
        if (!obj || typeof obj !== "object") {
          return false;
        }
        return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
      }
      exports.is_buffer = is_buffer;
      function combine2(a, b) {
        return [].concat(a, b);
      }
      exports.combine = combine2;
      function maybe_map(val, fn) {
        if (is_array(val)) {
          const mapped = [];
          for (let i = 0; i < val.length; i += 1) {
            mapped.push(fn(val[i]));
          }
          return mapped;
        }
        return fn(val);
      }
      exports.maybe_map = maybe_map;
    }
  });

  // ../PromptRepository/node_modules/openai/internal/qs/stringify.js
  var require_stringify = __commonJS({
    "../PromptRepository/node_modules/openai/internal/qs/stringify.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.stringify = void 0;
      var utils_1 = require_utils();
      var formats_1 = require_formats();
      var has = Object.prototype.hasOwnProperty;
      var array_prefix_generators = {
        brackets(prefix2) {
          return String(prefix2) + "[]";
        },
        comma: "comma",
        indices(prefix2, key) {
          return String(prefix2) + "[" + key + "]";
        },
        repeat(prefix2) {
          return String(prefix2);
        }
      };
      var is_array = Array.isArray;
      var push = Array.prototype.push;
      var push_to_array = function(arr, value_or_array) {
        push.apply(arr, is_array(value_or_array) ? value_or_array : [value_or_array]);
      };
      var to_ISO = Date.prototype.toISOString;
      var defaults2 = {
        addQueryPrefix: false,
        allowDots: false,
        allowEmptyArrays: false,
        arrayFormat: "indices",
        charset: "utf-8",
        charsetSentinel: false,
        delimiter: "&",
        encode: true,
        encodeDotInKeys: false,
        encoder: utils_1.encode,
        encodeValuesOnly: false,
        format: formats_1.default_format,
        formatter: formats_1.formatters[formats_1.default_format],
        /** @deprecated */
        indices: false,
        serializeDate(date) {
          return to_ISO.call(date);
        },
        skipNulls: false,
        strictNullHandling: false
      };
      function is_non_nullish_primitive(v) {
        return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
      }
      var sentinel = {};
      function inner_stringify(object, prefix2, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter3, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
        let obj = object;
        let tmp_sc = sideChannel;
        let step = 0;
        let find_flag = false;
        while ((tmp_sc = tmp_sc.get(sentinel)) !== void 0 && !find_flag) {
          const pos = tmp_sc.get(object);
          step += 1;
          if (typeof pos !== "undefined") {
            if (pos === step) {
              throw new RangeError("Cyclic object value");
            } else {
              find_flag = true;
            }
          }
          if (typeof tmp_sc.get(sentinel) === "undefined") {
            step = 0;
          }
        }
        if (typeof filter3 === "function") {
          obj = filter3(prefix2, obj);
        } else if (obj instanceof Date) {
          obj = serializeDate?.(obj);
        } else if (generateArrayPrefix === "comma" && is_array(obj)) {
          obj = (0, utils_1.maybe_map)(obj, function(value) {
            if (value instanceof Date) {
              return serializeDate?.(value);
            }
            return value;
          });
        }
        if (obj === null) {
          if (strictNullHandling) {
            return encoder && !encodeValuesOnly ? (
              // @ts-expect-error
              encoder(prefix2, defaults2.encoder, charset, "key", format)
            ) : prefix2;
          }
          obj = "";
        }
        if (is_non_nullish_primitive(obj) || (0, utils_1.is_buffer)(obj)) {
          if (encoder) {
            const key_value = encodeValuesOnly ? prefix2 : encoder(prefix2, defaults2.encoder, charset, "key", format);
            return [
              formatter?.(key_value) + "=" + // @ts-expect-error
              formatter?.(encoder(obj, defaults2.encoder, charset, "value", format))
            ];
          }
          return [formatter?.(prefix2) + "=" + formatter?.(String(obj))];
        }
        const values2 = [];
        if (typeof obj === "undefined") {
          return values2;
        }
        let obj_keys;
        if (generateArrayPrefix === "comma" && is_array(obj)) {
          if (encodeValuesOnly && encoder) {
            obj = (0, utils_1.maybe_map)(obj, encoder);
          }
          obj_keys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
        } else if (is_array(filter3)) {
          obj_keys = filter3;
        } else {
          const keys = Object.keys(obj);
          obj_keys = sort ? keys.sort(sort) : keys;
        }
        const encoded_prefix = encodeDotInKeys ? String(prefix2).replace(/\./g, "%2E") : String(prefix2);
        const adjusted_prefix = commaRoundTrip && is_array(obj) && obj.length === 1 ? encoded_prefix + "[]" : encoded_prefix;
        if (allowEmptyArrays && is_array(obj) && obj.length === 0) {
          return adjusted_prefix + "[]";
        }
        for (let j = 0; j < obj_keys.length; ++j) {
          const key = obj_keys[j];
          const value = (
            // @ts-ignore
            typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key]
          );
          if (skipNulls && value === null) {
            continue;
          }
          const encoded_key = allowDots && encodeDotInKeys ? key.replace(/\./g, "%2E") : key;
          const key_prefix = is_array(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjusted_prefix, encoded_key) : adjusted_prefix : adjusted_prefix + (allowDots ? "." + encoded_key : "[" + encoded_key + "]");
          sideChannel.set(object, step);
          const valueSideChannel = /* @__PURE__ */ new WeakMap();
          valueSideChannel.set(sentinel, sideChannel);
          push_to_array(values2, inner_stringify(
            value,
            key_prefix,
            generateArrayPrefix,
            commaRoundTrip,
            allowEmptyArrays,
            strictNullHandling,
            skipNulls,
            encodeDotInKeys,
            // @ts-ignore
            generateArrayPrefix === "comma" && encodeValuesOnly && is_array(obj) ? null : encoder,
            filter3,
            sort,
            allowDots,
            serializeDate,
            format,
            formatter,
            encodeValuesOnly,
            charset,
            valueSideChannel
          ));
        }
        return values2;
      }
      function normalize_stringify_options(opts = defaults2) {
        if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
          throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
        }
        if (typeof opts.encodeDotInKeys !== "undefined" && typeof opts.encodeDotInKeys !== "boolean") {
          throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");
        }
        if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
          throw new TypeError("Encoder has to be a function.");
        }
        const charset = opts.charset || defaults2.charset;
        if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
          throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
        }
        let format = formats_1.default_format;
        if (typeof opts.format !== "undefined") {
          if (!has.call(formats_1.formatters, opts.format)) {
            throw new TypeError("Unknown format option provided.");
          }
          format = opts.format;
        }
        const formatter = formats_1.formatters[format];
        let filter3 = defaults2.filter;
        if (typeof opts.filter === "function" || is_array(opts.filter)) {
          filter3 = opts.filter;
        }
        let arrayFormat;
        if (opts.arrayFormat && opts.arrayFormat in array_prefix_generators) {
          arrayFormat = opts.arrayFormat;
        } else if ("indices" in opts) {
          arrayFormat = opts.indices ? "indices" : "repeat";
        } else {
          arrayFormat = defaults2.arrayFormat;
        }
        if ("commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
          throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
        }
        const allowDots = typeof opts.allowDots === "undefined" ? !!opts.encodeDotInKeys === true ? true : defaults2.allowDots : !!opts.allowDots;
        return {
          addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults2.addQueryPrefix,
          // @ts-ignore
          allowDots,
          allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults2.allowEmptyArrays,
          arrayFormat,
          charset,
          charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults2.charsetSentinel,
          commaRoundTrip: !!opts.commaRoundTrip,
          delimiter: typeof opts.delimiter === "undefined" ? defaults2.delimiter : opts.delimiter,
          encode: typeof opts.encode === "boolean" ? opts.encode : defaults2.encode,
          encodeDotInKeys: typeof opts.encodeDotInKeys === "boolean" ? opts.encodeDotInKeys : defaults2.encodeDotInKeys,
          encoder: typeof opts.encoder === "function" ? opts.encoder : defaults2.encoder,
          encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults2.encodeValuesOnly,
          filter: filter3,
          format,
          formatter,
          serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults2.serializeDate,
          skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults2.skipNulls,
          // @ts-ignore
          sort: typeof opts.sort === "function" ? opts.sort : null,
          strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults2.strictNullHandling
        };
      }
      function stringify2(object, opts = {}) {
        let obj = object;
        const options = normalize_stringify_options(opts);
        let obj_keys;
        let filter3;
        if (typeof options.filter === "function") {
          filter3 = options.filter;
          obj = filter3("", obj);
        } else if (is_array(options.filter)) {
          filter3 = options.filter;
          obj_keys = filter3;
        }
        const keys = [];
        if (typeof obj !== "object" || obj === null) {
          return "";
        }
        const generateArrayPrefix = array_prefix_generators[options.arrayFormat];
        const commaRoundTrip = generateArrayPrefix === "comma" && options.commaRoundTrip;
        if (!obj_keys) {
          obj_keys = Object.keys(obj);
        }
        if (options.sort) {
          obj_keys.sort(options.sort);
        }
        const sideChannel = /* @__PURE__ */ new WeakMap();
        for (let i = 0; i < obj_keys.length; ++i) {
          const key = obj_keys[i];
          if (options.skipNulls && obj[key] === null) {
            continue;
          }
          push_to_array(keys, inner_stringify(
            obj[key],
            key,
            // @ts-expect-error
            generateArrayPrefix,
            commaRoundTrip,
            options.allowEmptyArrays,
            options.strictNullHandling,
            options.skipNulls,
            options.encodeDotInKeys,
            options.encode ? options.encoder : null,
            options.filter,
            options.sort,
            options.allowDots,
            options.serializeDate,
            options.format,
            options.formatter,
            options.encodeValuesOnly,
            options.charset,
            sideChannel
          ));
        }
        const joined = keys.join(options.delimiter);
        let prefix2 = options.addQueryPrefix === true ? "?" : "";
        if (options.charsetSentinel) {
          if (options.charset === "iso-8859-1") {
            prefix2 += "utf8=%26%2310003%3B&";
          } else {
            prefix2 += "utf8=%E2%9C%93&";
          }
        }
        return joined.length > 0 ? prefix2 + joined : "";
      }
      exports.stringify = stringify2;
    }
  });

  // ../PromptRepository/node_modules/openai/internal/qs/index.js
  var require_qs = __commonJS({
    "../PromptRepository/node_modules/openai/internal/qs/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.formats = exports.stringify = void 0;
      var formats_1 = require_formats();
      var formats = {
        formatters: formats_1.formatters,
        RFC1738: formats_1.RFC1738,
        RFC3986: formats_1.RFC3986,
        default: formats_1.default_format
      };
      exports.formats = formats;
      var stringify_1 = require_stringify();
      Object.defineProperty(exports, "stringify", { enumerable: true, get: function() {
        return stringify_1.stringify;
      } });
    }
  });

  // ../PromptRepository/node_modules/openai/version.js
  var require_version = __commonJS({
    "../PromptRepository/node_modules/openai/version.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.VERSION = void 0;
      exports.VERSION = "4.89.1";
    }
  });

  // ../PromptRepository/node_modules/openai/_shims/registry.js
  var require_registry = __commonJS({
    "../PromptRepository/node_modules/openai/_shims/registry.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.setShims = exports.isFsReadStream = exports.fileFromPath = exports.getDefaultAgent = exports.getMultipartRequestOptions = exports.ReadableStream = exports.File = exports.Blob = exports.FormData = exports.Headers = exports.Response = exports.Request = exports.fetch = exports.kind = exports.auto = void 0;
      exports.auto = false;
      exports.kind = void 0;
      exports.fetch = void 0;
      exports.Request = void 0;
      exports.Response = void 0;
      exports.Headers = void 0;
      exports.FormData = void 0;
      exports.Blob = void 0;
      exports.File = void 0;
      exports.ReadableStream = void 0;
      exports.getMultipartRequestOptions = void 0;
      exports.getDefaultAgent = void 0;
      exports.fileFromPath = void 0;
      exports.isFsReadStream = void 0;
      function setShims(shims, options = { auto: false }) {
        if (exports.auto) {
          throw new Error(`you must \`import 'openai/shims/${shims.kind}'\` before importing anything else from openai`);
        }
        if (exports.kind) {
          throw new Error(`can't \`import 'openai/shims/${shims.kind}'\` after \`import 'openai/shims/${exports.kind}'\``);
        }
        exports.auto = options.auto;
        exports.kind = shims.kind;
        exports.fetch = shims.fetch;
        exports.Request = shims.Request;
        exports.Response = shims.Response;
        exports.Headers = shims.Headers;
        exports.FormData = shims.FormData;
        exports.Blob = shims.Blob;
        exports.File = shims.File;
        exports.ReadableStream = shims.ReadableStream;
        exports.getMultipartRequestOptions = shims.getMultipartRequestOptions;
        exports.getDefaultAgent = shims.getDefaultAgent;
        exports.fileFromPath = shims.fileFromPath;
        exports.isFsReadStream = shims.isFsReadStream;
      }
      exports.setShims = setShims;
    }
  });

  // ../PromptRepository/node_modules/openai/_shims/MultipartBody.js
  var require_MultipartBody = __commonJS({
    "../PromptRepository/node_modules/openai/_shims/MultipartBody.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.MultipartBody = void 0;
      var MultipartBody = class {
        constructor(body) {
          this.body = body;
        }
        get [Symbol.toStringTag]() {
          return "MultipartBody";
        }
      };
      exports.MultipartBody = MultipartBody;
    }
  });

  // ../PromptRepository/node_modules/openai/_shims/web-runtime.js
  var require_web_runtime = __commonJS({
    "../PromptRepository/node_modules/openai/_shims/web-runtime.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getRuntime = void 0;
      var MultipartBody_1 = require_MultipartBody();
      function getRuntime({ manuallyImported } = {}) {
        const recommendation = manuallyImported ? `You may need to use polyfills` : `Add one of these imports before your first \`import \u2026 from 'openai'\`:
- \`import 'openai/shims/node'\` (if you're running on Node)
- \`import 'openai/shims/web'\` (otherwise)
`;
        let _fetch, _Request, _Response, _Headers;
        try {
          _fetch = fetch;
          _Request = Request;
          _Response = Response;
          _Headers = Headers;
        } catch (error) {
          throw new Error(`this environment is missing the following Web Fetch API type: ${error.message}. ${recommendation}`);
        }
        return {
          kind: "web",
          fetch: _fetch,
          Request: _Request,
          Response: _Response,
          Headers: _Headers,
          FormData: (
            // @ts-ignore
            typeof FormData !== "undefined" ? FormData : class FormData {
              // @ts-ignore
              constructor() {
                throw new Error(`file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`);
              }
            }
          ),
          Blob: typeof Blob !== "undefined" ? Blob : class Blob {
            constructor() {
              throw new Error(`file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`);
            }
          },
          File: (
            // @ts-ignore
            typeof File !== "undefined" ? File : class File {
              // @ts-ignore
              constructor() {
                throw new Error(`file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`);
              }
            }
          ),
          ReadableStream: (
            // @ts-ignore
            typeof ReadableStream !== "undefined" ? ReadableStream : class ReadableStream {
              // @ts-ignore
              constructor() {
                throw new Error(`streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`);
              }
            }
          ),
          getMultipartRequestOptions: async (form, opts) => ({
            ...opts,
            body: new MultipartBody_1.MultipartBody(form)
          }),
          getDefaultAgent: (url) => void 0,
          fileFromPath: () => {
            throw new Error("The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads");
          },
          isFsReadStream: (value) => false
        };
      }
      exports.getRuntime = getRuntime;
    }
  });

  // ../PromptRepository/node_modules/openai/_shims/auto/runtime.js
  var require_runtime = __commonJS({
    "../PromptRepository/node_modules/openai/_shims/auto/runtime.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_web_runtime(), exports);
    }
  });

  // ../PromptRepository/node_modules/openai/_shims/index.js
  var require_shims = __commonJS({
    "../PromptRepository/node_modules/openai/_shims/index.js"(exports) {
      var shims = require_registry();
      var auto = require_runtime();
      if (!shims.kind) shims.setShims(auto.getRuntime(), { auto: true });
      for (const property of Object.keys(shims)) {
        Object.defineProperty(exports, property, {
          get() {
            return shims[property];
          }
        });
      }
    }
  });

  // ../PromptRepository/node_modules/openai/error.js
  var require_error = __commonJS({
    "../PromptRepository/node_modules/openai/error.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ContentFilterFinishReasonError = exports.LengthFinishReasonError = exports.InternalServerError = exports.RateLimitError = exports.UnprocessableEntityError = exports.ConflictError = exports.NotFoundError = exports.PermissionDeniedError = exports.AuthenticationError = exports.BadRequestError = exports.APIConnectionTimeoutError = exports.APIConnectionError = exports.APIUserAbortError = exports.APIError = exports.OpenAIError = void 0;
      var core_1 = require_core();
      var OpenAIError = class extends Error {
      };
      exports.OpenAIError = OpenAIError;
      var APIError = class _APIError extends OpenAIError {
        constructor(status, error, message, headers) {
          super(`${_APIError.makeMessage(status, error, message)}`);
          this.status = status;
          this.headers = headers;
          this.request_id = headers?.["x-request-id"];
          this.error = error;
          const data = error;
          this.code = data?.["code"];
          this.param = data?.["param"];
          this.type = data?.["type"];
        }
        static makeMessage(status, error, message) {
          const msg = error?.message ? typeof error.message === "string" ? error.message : JSON.stringify(error.message) : error ? JSON.stringify(error) : message;
          if (status && msg) {
            return `${status} ${msg}`;
          }
          if (status) {
            return `${status} status code (no body)`;
          }
          if (msg) {
            return msg;
          }
          return "(no status code or body)";
        }
        static generate(status, errorResponse, message, headers) {
          if (!status || !headers) {
            return new APIConnectionError({ message, cause: (0, core_1.castToError)(errorResponse) });
          }
          const error = errorResponse?.["error"];
          if (status === 400) {
            return new BadRequestError(status, error, message, headers);
          }
          if (status === 401) {
            return new AuthenticationError(status, error, message, headers);
          }
          if (status === 403) {
            return new PermissionDeniedError(status, error, message, headers);
          }
          if (status === 404) {
            return new NotFoundError(status, error, message, headers);
          }
          if (status === 409) {
            return new ConflictError(status, error, message, headers);
          }
          if (status === 422) {
            return new UnprocessableEntityError(status, error, message, headers);
          }
          if (status === 429) {
            return new RateLimitError(status, error, message, headers);
          }
          if (status >= 500) {
            return new InternalServerError(status, error, message, headers);
          }
          return new _APIError(status, error, message, headers);
        }
      };
      exports.APIError = APIError;
      var APIUserAbortError = class extends APIError {
        constructor({ message } = {}) {
          super(void 0, void 0, message || "Request was aborted.", void 0);
        }
      };
      exports.APIUserAbortError = APIUserAbortError;
      var APIConnectionError = class extends APIError {
        constructor({ message, cause }) {
          super(void 0, void 0, message || "Connection error.", void 0);
          if (cause)
            this.cause = cause;
        }
      };
      exports.APIConnectionError = APIConnectionError;
      var APIConnectionTimeoutError = class extends APIConnectionError {
        constructor({ message } = {}) {
          super({ message: message ?? "Request timed out." });
        }
      };
      exports.APIConnectionTimeoutError = APIConnectionTimeoutError;
      var BadRequestError = class extends APIError {
      };
      exports.BadRequestError = BadRequestError;
      var AuthenticationError = class extends APIError {
      };
      exports.AuthenticationError = AuthenticationError;
      var PermissionDeniedError = class extends APIError {
      };
      exports.PermissionDeniedError = PermissionDeniedError;
      var NotFoundError = class extends APIError {
      };
      exports.NotFoundError = NotFoundError;
      var ConflictError = class extends APIError {
      };
      exports.ConflictError = ConflictError;
      var UnprocessableEntityError = class extends APIError {
      };
      exports.UnprocessableEntityError = UnprocessableEntityError;
      var RateLimitError = class extends APIError {
      };
      exports.RateLimitError = RateLimitError;
      var InternalServerError = class extends APIError {
      };
      exports.InternalServerError = InternalServerError;
      var LengthFinishReasonError = class extends OpenAIError {
        constructor() {
          super(`Could not parse response content as the length limit was reached`);
        }
      };
      exports.LengthFinishReasonError = LengthFinishReasonError;
      var ContentFilterFinishReasonError = class extends OpenAIError {
        constructor() {
          super(`Could not parse response content as the request was rejected by the content filter`);
        }
      };
      exports.ContentFilterFinishReasonError = ContentFilterFinishReasonError;
    }
  });

  // ../PromptRepository/node_modules/openai/internal/decoders/line.js
  var require_line = __commonJS({
    "../PromptRepository/node_modules/openai/internal/decoders/line.js"(exports) {
      "use strict";
      var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      var _LineDecoder_carriageReturnIndex;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.findDoubleNewlineIndex = exports.LineDecoder = void 0;
      var error_1 = require_error();
      var LineDecoder = class {
        constructor() {
          _LineDecoder_carriageReturnIndex.set(this, void 0);
          this.buffer = new Uint8Array();
          __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, "f");
        }
        decode(chunk) {
          if (chunk == null) {
            return [];
          }
          const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === "string" ? new TextEncoder().encode(chunk) : chunk;
          let newData = new Uint8Array(this.buffer.length + binaryChunk.length);
          newData.set(this.buffer);
          newData.set(binaryChunk, this.buffer.length);
          this.buffer = newData;
          const lines = [];
          let patternIndex;
          while ((patternIndex = findNewlineIndex(this.buffer, __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f"))) != null) {
            if (patternIndex.carriage && __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f") == null) {
              __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, patternIndex.index, "f");
              continue;
            }
            if (__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f") != null && (patternIndex.index !== __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f") + 1 || patternIndex.carriage)) {
              lines.push(this.decodeText(this.buffer.slice(0, __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f") - 1)));
              this.buffer = this.buffer.slice(__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f"));
              __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, "f");
              continue;
            }
            const endIndex = __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f") !== null ? patternIndex.preceding - 1 : patternIndex.preceding;
            const line2 = this.decodeText(this.buffer.slice(0, endIndex));
            lines.push(line2);
            this.buffer = this.buffer.slice(patternIndex.index);
            __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, "f");
          }
          return lines;
        }
        decodeText(bytes) {
          if (bytes == null)
            return "";
          if (typeof bytes === "string")
            return bytes;
          if (typeof Buffer !== "undefined") {
            if (bytes instanceof Buffer) {
              return bytes.toString();
            }
            if (bytes instanceof Uint8Array) {
              return Buffer.from(bytes).toString();
            }
            throw new error_1.OpenAIError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`);
          }
          if (typeof TextDecoder !== "undefined") {
            if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {
              this.textDecoder ?? (this.textDecoder = new TextDecoder("utf8"));
              return this.textDecoder.decode(bytes);
            }
            throw new error_1.OpenAIError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);
          }
          throw new error_1.OpenAIError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);
        }
        flush() {
          if (!this.buffer.length) {
            return [];
          }
          return this.decode("\n");
        }
      };
      exports.LineDecoder = LineDecoder;
      _LineDecoder_carriageReturnIndex = /* @__PURE__ */ new WeakMap();
      LineDecoder.NEWLINE_CHARS = /* @__PURE__ */ new Set(["\n", "\r"]);
      LineDecoder.NEWLINE_REGEXP = /\r\n|[\n\r]/g;
      function findNewlineIndex(buffer, startIndex) {
        const newline = 10;
        const carriage = 13;
        for (let i = startIndex ?? 0; i < buffer.length; i++) {
          if (buffer[i] === newline) {
            return { preceding: i, index: i + 1, carriage: false };
          }
          if (buffer[i] === carriage) {
            return { preceding: i, index: i + 1, carriage: true };
          }
        }
        return null;
      }
      function findDoubleNewlineIndex(buffer) {
        const newline = 10;
        const carriage = 13;
        for (let i = 0; i < buffer.length - 1; i++) {
          if (buffer[i] === newline && buffer[i + 1] === newline) {
            return i + 2;
          }
          if (buffer[i] === carriage && buffer[i + 1] === carriage) {
            return i + 2;
          }
          if (buffer[i] === carriage && buffer[i + 1] === newline && i + 3 < buffer.length && buffer[i + 2] === carriage && buffer[i + 3] === newline) {
            return i + 4;
          }
        }
        return -1;
      }
      exports.findDoubleNewlineIndex = findDoubleNewlineIndex;
    }
  });

  // ../PromptRepository/node_modules/openai/internal/stream-utils.js
  var require_stream_utils = __commonJS({
    "../PromptRepository/node_modules/openai/internal/stream-utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReadableStreamToAsyncIterable = void 0;
      function ReadableStreamToAsyncIterable(stream) {
        if (stream[Symbol.asyncIterator])
          return stream;
        const reader = stream.getReader();
        return {
          async next() {
            try {
              const result = await reader.read();
              if (result?.done)
                reader.releaseLock();
              return result;
            } catch (e) {
              reader.releaseLock();
              throw e;
            }
          },
          async return() {
            const cancelPromise = reader.cancel();
            reader.releaseLock();
            await cancelPromise;
            return { done: true, value: void 0 };
          },
          [Symbol.asyncIterator]() {
            return this;
          }
        };
      }
      exports.ReadableStreamToAsyncIterable = ReadableStreamToAsyncIterable;
    }
  });

  // ../PromptRepository/node_modules/openai/streaming.js
  var require_streaming = __commonJS({
    "../PromptRepository/node_modules/openai/streaming.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports._iterSSEMessages = exports.Stream = void 0;
      var index_1 = require_shims();
      var error_1 = require_error();
      var line_1 = require_line();
      var stream_utils_1 = require_stream_utils();
      var error_2 = require_error();
      var Stream = class _Stream {
        constructor(iterator, controller) {
          this.iterator = iterator;
          this.controller = controller;
        }
        static fromSSEResponse(response, controller) {
          let consumed = false;
          async function* iterator() {
            if (consumed) {
              throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");
            }
            consumed = true;
            let done = false;
            try {
              for await (const sse of _iterSSEMessages(response, controller)) {
                if (done)
                  continue;
                if (sse.data.startsWith("[DONE]")) {
                  done = true;
                  continue;
                }
                if (sse.event === null || sse.event.startsWith("response.")) {
                  let data;
                  try {
                    data = JSON.parse(sse.data);
                  } catch (e) {
                    console.error(`Could not parse message into JSON:`, sse.data);
                    console.error(`From chunk:`, sse.raw);
                    throw e;
                  }
                  if (data && data.error) {
                    throw new error_2.APIError(void 0, data.error, void 0, void 0);
                  }
                  yield data;
                } else {
                  let data;
                  try {
                    data = JSON.parse(sse.data);
                  } catch (e) {
                    console.error(`Could not parse message into JSON:`, sse.data);
                    console.error(`From chunk:`, sse.raw);
                    throw e;
                  }
                  if (sse.event == "error") {
                    throw new error_2.APIError(void 0, data.error, data.message, void 0);
                  }
                  yield { event: sse.event, data };
                }
              }
              done = true;
            } catch (e) {
              if (e instanceof Error && e.name === "AbortError")
                return;
              throw e;
            } finally {
              if (!done)
                controller.abort();
            }
          }
          return new _Stream(iterator, controller);
        }
        /**
         * Generates a Stream from a newline-separated ReadableStream
         * where each item is a JSON value.
         */
        static fromReadableStream(readableStream, controller) {
          let consumed = false;
          async function* iterLines() {
            const lineDecoder = new line_1.LineDecoder();
            const iter = (0, stream_utils_1.ReadableStreamToAsyncIterable)(readableStream);
            for await (const chunk of iter) {
              for (const line2 of lineDecoder.decode(chunk)) {
                yield line2;
              }
            }
            for (const line2 of lineDecoder.flush()) {
              yield line2;
            }
          }
          async function* iterator() {
            if (consumed) {
              throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");
            }
            consumed = true;
            let done = false;
            try {
              for await (const line2 of iterLines()) {
                if (done)
                  continue;
                if (line2)
                  yield JSON.parse(line2);
              }
              done = true;
            } catch (e) {
              if (e instanceof Error && e.name === "AbortError")
                return;
              throw e;
            } finally {
              if (!done)
                controller.abort();
            }
          }
          return new _Stream(iterator, controller);
        }
        [Symbol.asyncIterator]() {
          return this.iterator();
        }
        /**
         * Splits the stream into two streams which can be
         * independently read from at different speeds.
         */
        tee() {
          const left = [];
          const right = [];
          const iterator = this.iterator();
          const teeIterator = (queue) => {
            return {
              next: () => {
                if (queue.length === 0) {
                  const result = iterator.next();
                  left.push(result);
                  right.push(result);
                }
                return queue.shift();
              }
            };
          };
          return [
            new _Stream(() => teeIterator(left), this.controller),
            new _Stream(() => teeIterator(right), this.controller)
          ];
        }
        /**
         * Converts this stream to a newline-separated ReadableStream of
         * JSON stringified values in the stream
         * which can be turned back into a Stream with `Stream.fromReadableStream()`.
         */
        toReadableStream() {
          const self2 = this;
          let iter;
          const encoder = new TextEncoder();
          return new index_1.ReadableStream({
            async start() {
              iter = self2[Symbol.asyncIterator]();
            },
            async pull(ctrl) {
              try {
                const { value, done } = await iter.next();
                if (done)
                  return ctrl.close();
                const bytes = encoder.encode(JSON.stringify(value) + "\n");
                ctrl.enqueue(bytes);
              } catch (err) {
                ctrl.error(err);
              }
            },
            async cancel() {
              await iter.return?.();
            }
          });
        }
      };
      exports.Stream = Stream;
      async function* _iterSSEMessages(response, controller) {
        if (!response.body) {
          controller.abort();
          throw new error_1.OpenAIError(`Attempted to iterate over a response with no body`);
        }
        const sseDecoder = new SSEDecoder();
        const lineDecoder = new line_1.LineDecoder();
        const iter = (0, stream_utils_1.ReadableStreamToAsyncIterable)(response.body);
        for await (const sseChunk of iterSSEChunks(iter)) {
          for (const line2 of lineDecoder.decode(sseChunk)) {
            const sse = sseDecoder.decode(line2);
            if (sse)
              yield sse;
          }
        }
        for (const line2 of lineDecoder.flush()) {
          const sse = sseDecoder.decode(line2);
          if (sse)
            yield sse;
        }
      }
      exports._iterSSEMessages = _iterSSEMessages;
      async function* iterSSEChunks(iterator) {
        let data = new Uint8Array();
        for await (const chunk of iterator) {
          if (chunk == null) {
            continue;
          }
          const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === "string" ? new TextEncoder().encode(chunk) : chunk;
          let newData = new Uint8Array(data.length + binaryChunk.length);
          newData.set(data);
          newData.set(binaryChunk, data.length);
          data = newData;
          let patternIndex;
          while ((patternIndex = (0, line_1.findDoubleNewlineIndex)(data)) !== -1) {
            yield data.slice(0, patternIndex);
            data = data.slice(patternIndex);
          }
        }
        if (data.length > 0) {
          yield data;
        }
      }
      var SSEDecoder = class {
        constructor() {
          this.event = null;
          this.data = [];
          this.chunks = [];
        }
        decode(line2) {
          if (line2.endsWith("\r")) {
            line2 = line2.substring(0, line2.length - 1);
          }
          if (!line2) {
            if (!this.event && !this.data.length)
              return null;
            const sse = {
              event: this.event,
              data: this.data.join("\n"),
              raw: this.chunks
            };
            this.event = null;
            this.data = [];
            this.chunks = [];
            return sse;
          }
          this.chunks.push(line2);
          if (line2.startsWith(":")) {
            return null;
          }
          let [fieldname, _, value] = partition(line2, ":");
          if (value.startsWith(" ")) {
            value = value.substring(1);
          }
          if (fieldname === "event") {
            this.event = value;
          } else if (fieldname === "data") {
            this.data.push(value);
          }
          return null;
        }
      };
      function partition(str, delimiter2) {
        const index = str.indexOf(delimiter2);
        if (index !== -1) {
          return [str.substring(0, index), delimiter2, str.substring(index + delimiter2.length)];
        }
        return [str, "", ""];
      }
    }
  });

  // ../PromptRepository/node_modules/openai/uploads.js
  var require_uploads = __commonJS({
    "../PromptRepository/node_modules/openai/uploads.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createForm = exports.multipartFormRequestOptions = exports.maybeMultipartFormRequestOptions = exports.isMultipartBody = exports.toFile = exports.isUploadable = exports.isBlobLike = exports.isFileLike = exports.isResponseLike = exports.fileFromPath = void 0;
      var index_1 = require_shims();
      var index_2 = require_shims();
      Object.defineProperty(exports, "fileFromPath", { enumerable: true, get: function() {
        return index_2.fileFromPath;
      } });
      var isResponseLike = (value) => value != null && typeof value === "object" && typeof value.url === "string" && typeof value.blob === "function";
      exports.isResponseLike = isResponseLike;
      var isFileLike = (value) => value != null && typeof value === "object" && typeof value.name === "string" && typeof value.lastModified === "number" && (0, exports.isBlobLike)(value);
      exports.isFileLike = isFileLike;
      var isBlobLike = (value) => value != null && typeof value === "object" && typeof value.size === "number" && typeof value.type === "string" && typeof value.text === "function" && typeof value.slice === "function" && typeof value.arrayBuffer === "function";
      exports.isBlobLike = isBlobLike;
      var isUploadable = (value) => {
        return (0, exports.isFileLike)(value) || (0, exports.isResponseLike)(value) || (0, index_1.isFsReadStream)(value);
      };
      exports.isUploadable = isUploadable;
      async function toFile(value, name, options) {
        value = await value;
        if ((0, exports.isFileLike)(value)) {
          return value;
        }
        if ((0, exports.isResponseLike)(value)) {
          const blob = await value.blob();
          name || (name = new URL(value.url).pathname.split(/[\\/]/).pop() ?? "unknown_file");
          const data = (0, exports.isBlobLike)(blob) ? [await blob.arrayBuffer()] : [blob];
          return new index_1.File(data, name, options);
        }
        const bits = await getBytes(value);
        name || (name = getName(value) ?? "unknown_file");
        if (!options?.type) {
          const type = bits[0]?.type;
          if (typeof type === "string") {
            options = { ...options, type };
          }
        }
        return new index_1.File(bits, name, options);
      }
      exports.toFile = toFile;
      async function getBytes(value) {
        let parts = [];
        if (typeof value === "string" || ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.
        value instanceof ArrayBuffer) {
          parts.push(value);
        } else if ((0, exports.isBlobLike)(value)) {
          parts.push(await value.arrayBuffer());
        } else if (isAsyncIterableIterator(value)) {
          for await (const chunk of value) {
            parts.push(chunk);
          }
        } else {
          throw new Error(`Unexpected data type: ${typeof value}; constructor: ${value?.constructor?.name}; props: ${propsForError(value)}`);
        }
        return parts;
      }
      function propsForError(value) {
        const props = Object.getOwnPropertyNames(value);
        return `[${props.map((p) => `"${p}"`).join(", ")}]`;
      }
      function getName(value) {
        return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) || // For fs.ReadStream
        getStringFromMaybeBuffer(value.path)?.split(/[\\/]/).pop();
      }
      var getStringFromMaybeBuffer = (x) => {
        if (typeof x === "string")
          return x;
        if (typeof Buffer !== "undefined" && x instanceof Buffer)
          return String(x);
        return void 0;
      };
      var isAsyncIterableIterator = (value) => value != null && typeof value === "object" && typeof value[Symbol.asyncIterator] === "function";
      var isMultipartBody = (body) => body && typeof body === "object" && body.body && body[Symbol.toStringTag] === "MultipartBody";
      exports.isMultipartBody = isMultipartBody;
      var maybeMultipartFormRequestOptions = async (opts) => {
        if (!hasUploadableValue(opts.body))
          return opts;
        const form = await (0, exports.createForm)(opts.body);
        return (0, index_1.getMultipartRequestOptions)(form, opts);
      };
      exports.maybeMultipartFormRequestOptions = maybeMultipartFormRequestOptions;
      var multipartFormRequestOptions = async (opts) => {
        const form = await (0, exports.createForm)(opts.body);
        return (0, index_1.getMultipartRequestOptions)(form, opts);
      };
      exports.multipartFormRequestOptions = multipartFormRequestOptions;
      var createForm = async (body) => {
        const form = new index_1.FormData();
        await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));
        return form;
      };
      exports.createForm = createForm;
      var hasUploadableValue = (value) => {
        if ((0, exports.isUploadable)(value))
          return true;
        if (Array.isArray(value))
          return value.some(hasUploadableValue);
        if (value && typeof value === "object") {
          for (const k in value) {
            if (hasUploadableValue(value[k]))
              return true;
          }
        }
        return false;
      };
      var addFormValue = async (form, key, value) => {
        if (value === void 0)
          return;
        if (value == null) {
          throw new TypeError(`Received null for "${key}"; to pass null in FormData, you must use the string 'null'`);
        }
        if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
          form.append(key, String(value));
        } else if ((0, exports.isUploadable)(value)) {
          const file = await toFile(value);
          form.append(key, file);
        } else if (Array.isArray(value)) {
          await Promise.all(value.map((entry) => addFormValue(form, key + "[]", entry)));
        } else if (typeof value === "object") {
          await Promise.all(Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)));
        } else {
          throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);
        }
      };
    }
  });

  // ../PromptRepository/node_modules/openai/core.js
  var require_core = __commonJS({
    "../PromptRepository/node_modules/openai/core.js"(exports) {
      "use strict";
      var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      var _AbstractPage_client;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isObj = exports.toBase64 = exports.getHeader = exports.getRequiredHeader = exports.isHeadersProtocol = exports.isRunningInBrowser = exports.debug = exports.hasOwn = exports.isEmptyObj = exports.maybeCoerceBoolean = exports.maybeCoerceFloat = exports.maybeCoerceInteger = exports.coerceBoolean = exports.coerceFloat = exports.coerceInteger = exports.readEnv = exports.ensurePresent = exports.castToError = exports.sleep = exports.safeJSON = exports.isRequestOptions = exports.createResponseHeaders = exports.PagePromise = exports.AbstractPage = exports.APIClient = exports.APIPromise = exports.createForm = exports.multipartFormRequestOptions = exports.maybeMultipartFormRequestOptions = void 0;
      var version_1 = require_version();
      var streaming_1 = require_streaming();
      var error_1 = require_error();
      var index_1 = require_shims();
      var uploads_1 = require_uploads();
      var uploads_2 = require_uploads();
      Object.defineProperty(exports, "maybeMultipartFormRequestOptions", { enumerable: true, get: function() {
        return uploads_2.maybeMultipartFormRequestOptions;
      } });
      Object.defineProperty(exports, "multipartFormRequestOptions", { enumerable: true, get: function() {
        return uploads_2.multipartFormRequestOptions;
      } });
      Object.defineProperty(exports, "createForm", { enumerable: true, get: function() {
        return uploads_2.createForm;
      } });
      async function defaultParseResponse(props) {
        const { response } = props;
        if (props.options.stream) {
          debug("response", response.status, response.url, response.headers, response.body);
          if (props.options.__streamClass) {
            return props.options.__streamClass.fromSSEResponse(response, props.controller);
          }
          return streaming_1.Stream.fromSSEResponse(response, props.controller);
        }
        if (response.status === 204) {
          return null;
        }
        if (props.options.__binaryResponse) {
          return response;
        }
        const contentType = response.headers.get("content-type");
        const mediaType = contentType?.split(";")[0]?.trim();
        const isJSON = mediaType?.includes("application/json") || mediaType?.endsWith("+json");
        if (isJSON) {
          const json2 = await response.json();
          debug("response", response.status, response.url, response.headers, json2);
          return _addRequestID(json2, response);
        }
        const text = await response.text();
        debug("response", response.status, response.url, response.headers, text);
        return text;
      }
      function _addRequestID(value, response) {
        if (!value || typeof value !== "object" || Array.isArray(value)) {
          return value;
        }
        return Object.defineProperty(value, "_request_id", {
          value: response.headers.get("x-request-id"),
          enumerable: false
        });
      }
      var APIPromise = class _APIPromise extends Promise {
        constructor(responsePromise, parseResponse = defaultParseResponse) {
          super((resolve) => {
            resolve(null);
          });
          this.responsePromise = responsePromise;
          this.parseResponse = parseResponse;
        }
        _thenUnwrap(transform2) {
          return new _APIPromise(this.responsePromise, async (props) => _addRequestID(transform2(await this.parseResponse(props), props), props.response));
        }
        /**
         * Gets the raw `Response` instance instead of parsing the response
         * data.
         *
         * If you want to parse the response body but still get the `Response`
         * instance, you can use {@link withResponse()}.
         *
         * 👋 Getting the wrong TypeScript type for `Response`?
         * Try setting `"moduleResolution": "NodeNext"` if you can,
         * or add one of these imports before your first `import … from 'openai'`:
         * - `import 'openai/shims/node'` (if you're running on Node)
         * - `import 'openai/shims/web'` (otherwise)
         */
        asResponse() {
          return this.responsePromise.then((p) => p.response);
        }
        /**
         * Gets the parsed response data, the raw `Response` instance and the ID of the request,
         * returned via the X-Request-ID header which is useful for debugging requests and reporting
         * issues to OpenAI.
         *
         * If you just want to get the raw `Response` instance without parsing it,
         * you can use {@link asResponse()}.
         *
         *
         * 👋 Getting the wrong TypeScript type for `Response`?
         * Try setting `"moduleResolution": "NodeNext"` if you can,
         * or add one of these imports before your first `import … from 'openai'`:
         * - `import 'openai/shims/node'` (if you're running on Node)
         * - `import 'openai/shims/web'` (otherwise)
         */
        async withResponse() {
          const [data, response] = await Promise.all([this.parse(), this.asResponse()]);
          return { data, response, request_id: response.headers.get("x-request-id") };
        }
        parse() {
          if (!this.parsedPromise) {
            this.parsedPromise = this.responsePromise.then(this.parseResponse);
          }
          return this.parsedPromise;
        }
        then(onfulfilled, onrejected) {
          return this.parse().then(onfulfilled, onrejected);
        }
        catch(onrejected) {
          return this.parse().catch(onrejected);
        }
        finally(onfinally) {
          return this.parse().finally(onfinally);
        }
      };
      exports.APIPromise = APIPromise;
      var APIClient = class {
        constructor({
          baseURL,
          maxRetries = 2,
          timeout: timeout2 = 6e5,
          // 10 minutes
          httpAgent,
          fetch: overriddenFetch
        }) {
          this.baseURL = baseURL;
          this.maxRetries = validatePositiveInteger("maxRetries", maxRetries);
          this.timeout = validatePositiveInteger("timeout", timeout2);
          this.httpAgent = httpAgent;
          this.fetch = overriddenFetch ?? index_1.fetch;
        }
        authHeaders(opts) {
          return {};
        }
        /**
         * Override this to add your own default headers, for example:
         *
         *  {
         *    ...super.defaultHeaders(),
         *    Authorization: 'Bearer 123',
         *  }
         */
        defaultHeaders(opts) {
          return {
            Accept: "application/json",
            "Content-Type": "application/json",
            "User-Agent": this.getUserAgent(),
            ...getPlatformHeaders(),
            ...this.authHeaders(opts)
          };
        }
        /**
         * Override this to add your own headers validation:
         */
        validateHeaders(headers, customHeaders) {
        }
        defaultIdempotencyKey() {
          return `stainless-node-retry-${uuid4()}`;
        }
        get(path, opts) {
          return this.methodRequest("get", path, opts);
        }
        post(path, opts) {
          return this.methodRequest("post", path, opts);
        }
        patch(path, opts) {
          return this.methodRequest("patch", path, opts);
        }
        put(path, opts) {
          return this.methodRequest("put", path, opts);
        }
        delete(path, opts) {
          return this.methodRequest("delete", path, opts);
        }
        methodRequest(method, path, opts) {
          return this.request(Promise.resolve(opts).then(async (opts2) => {
            const body = opts2 && (0, uploads_1.isBlobLike)(opts2?.body) ? new DataView(await opts2.body.arrayBuffer()) : opts2?.body instanceof DataView ? opts2.body : opts2?.body instanceof ArrayBuffer ? new DataView(opts2.body) : opts2 && ArrayBuffer.isView(opts2?.body) ? new DataView(opts2.body.buffer) : opts2?.body;
            return { method, path, ...opts2, body };
          }));
        }
        getAPIList(path, Page, opts) {
          return this.requestAPIList(Page, { method: "get", path, ...opts });
        }
        calculateContentLength(body) {
          if (typeof body === "string") {
            if (typeof Buffer !== "undefined") {
              return Buffer.byteLength(body, "utf8").toString();
            }
            if (typeof TextEncoder !== "undefined") {
              const encoder = new TextEncoder();
              const encoded = encoder.encode(body);
              return encoded.length.toString();
            }
          } else if (ArrayBuffer.isView(body)) {
            return body.byteLength.toString();
          }
          return null;
        }
        buildRequest(options, { retryCount = 0 } = {}) {
          options = { ...options };
          const { method, path, query, headers = {} } = options;
          const body = ArrayBuffer.isView(options.body) || options.__binaryRequest && typeof options.body === "string" ? options.body : (0, uploads_1.isMultipartBody)(options.body) ? options.body.body : options.body ? JSON.stringify(options.body, null, 2) : null;
          const contentLength = this.calculateContentLength(body);
          const url = this.buildURL(path, query);
          if ("timeout" in options)
            validatePositiveInteger("timeout", options.timeout);
          options.timeout = options.timeout ?? this.timeout;
          const httpAgent = options.httpAgent ?? this.httpAgent ?? (0, index_1.getDefaultAgent)(url);
          const minAgentTimeout = options.timeout + 1e3;
          if (typeof httpAgent?.options?.timeout === "number" && minAgentTimeout > (httpAgent.options.timeout ?? 0)) {
            httpAgent.options.timeout = minAgentTimeout;
          }
          if (this.idempotencyHeader && method !== "get") {
            if (!options.idempotencyKey)
              options.idempotencyKey = this.defaultIdempotencyKey();
            headers[this.idempotencyHeader] = options.idempotencyKey;
          }
          const reqHeaders = this.buildHeaders({ options, headers, contentLength, retryCount });
          const req = {
            method,
            ...body && { body },
            headers: reqHeaders,
            ...httpAgent && { agent: httpAgent },
            // @ts-ignore node-fetch uses a custom AbortSignal type that is
            // not compatible with standard web types
            signal: options.signal ?? null
          };
          return { req, url, timeout: options.timeout };
        }
        buildHeaders({ options, headers, contentLength, retryCount }) {
          const reqHeaders = {};
          if (contentLength) {
            reqHeaders["content-length"] = contentLength;
          }
          const defaultHeaders = this.defaultHeaders(options);
          applyHeadersMut(reqHeaders, defaultHeaders);
          applyHeadersMut(reqHeaders, headers);
          if ((0, uploads_1.isMultipartBody)(options.body) && index_1.kind !== "node") {
            delete reqHeaders["content-type"];
          }
          if ((0, exports.getHeader)(defaultHeaders, "x-stainless-retry-count") === void 0 && (0, exports.getHeader)(headers, "x-stainless-retry-count") === void 0) {
            reqHeaders["x-stainless-retry-count"] = String(retryCount);
          }
          if ((0, exports.getHeader)(defaultHeaders, "x-stainless-timeout") === void 0 && (0, exports.getHeader)(headers, "x-stainless-timeout") === void 0 && options.timeout) {
            reqHeaders["x-stainless-timeout"] = String(options.timeout);
          }
          this.validateHeaders(reqHeaders, headers);
          return reqHeaders;
        }
        /**
         * Used as a callback for mutating the given `FinalRequestOptions` object.
         */
        async prepareOptions(options) {
        }
        /**
         * Used as a callback for mutating the given `RequestInit` object.
         *
         * This is useful for cases where you want to add certain headers based off of
         * the request properties, e.g. `method` or `url`.
         */
        async prepareRequest(request, { url, options }) {
        }
        parseHeaders(headers) {
          return !headers ? {} : Symbol.iterator in headers ? Object.fromEntries(Array.from(headers).map((header) => [...header])) : { ...headers };
        }
        makeStatusError(status, error, message, headers) {
          return error_1.APIError.generate(status, error, message, headers);
        }
        request(options, remainingRetries = null) {
          return new APIPromise(this.makeRequest(options, remainingRetries));
        }
        async makeRequest(optionsInput, retriesRemaining) {
          const options = await optionsInput;
          const maxRetries = options.maxRetries ?? this.maxRetries;
          if (retriesRemaining == null) {
            retriesRemaining = maxRetries;
          }
          await this.prepareOptions(options);
          const { req, url, timeout: timeout2 } = this.buildRequest(options, { retryCount: maxRetries - retriesRemaining });
          await this.prepareRequest(req, { url, options });
          debug("request", url, options, req.headers);
          if (options.signal?.aborted) {
            throw new error_1.APIUserAbortError();
          }
          const controller = new AbortController();
          const response = await this.fetchWithTimeout(url, req, timeout2, controller).catch(exports.castToError);
          if (response instanceof Error) {
            if (options.signal?.aborted) {
              throw new error_1.APIUserAbortError();
            }
            if (retriesRemaining) {
              return this.retryRequest(options, retriesRemaining);
            }
            if (response.name === "AbortError") {
              throw new error_1.APIConnectionTimeoutError();
            }
            throw new error_1.APIConnectionError({ cause: response });
          }
          const responseHeaders = (0, exports.createResponseHeaders)(response.headers);
          if (!response.ok) {
            if (retriesRemaining && this.shouldRetry(response)) {
              const retryMessage2 = `retrying, ${retriesRemaining} attempts remaining`;
              debug(`response (error; ${retryMessage2})`, response.status, url, responseHeaders);
              return this.retryRequest(options, retriesRemaining, responseHeaders);
            }
            const errText = await response.text().catch((e) => (0, exports.castToError)(e).message);
            const errJSON = (0, exports.safeJSON)(errText);
            const errMessage = errJSON ? void 0 : errText;
            const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;
            debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);
            const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);
            throw err;
          }
          return { response, options, controller };
        }
        requestAPIList(Page, options) {
          const request = this.makeRequest(options, null);
          return new PagePromise(this, request, Page);
        }
        buildURL(path, query) {
          const url = isAbsoluteURL2(path) ? new URL(path) : new URL(this.baseURL + (this.baseURL.endsWith("/") && path.startsWith("/") ? path.slice(1) : path));
          const defaultQuery = this.defaultQuery();
          if (!isEmptyObj(defaultQuery)) {
            query = { ...defaultQuery, ...query };
          }
          if (typeof query === "object" && query && !Array.isArray(query)) {
            url.search = this.stringifyQuery(query);
          }
          return url.toString();
        }
        stringifyQuery(query) {
          return Object.entries(query).filter(([_, value]) => typeof value !== "undefined").map(([key, value]) => {
            if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
              return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
            }
            if (value === null) {
              return `${encodeURIComponent(key)}=`;
            }
            throw new error_1.OpenAIError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);
          }).join("&");
        }
        async fetchWithTimeout(url, init, ms, controller) {
          const { signal, ...options } = init || {};
          if (signal)
            signal.addEventListener("abort", () => controller.abort());
          const timeout2 = setTimeout(() => controller.abort(), ms);
          const fetchOptions = {
            signal: controller.signal,
            ...options
          };
          if (fetchOptions.method) {
            fetchOptions.method = fetchOptions.method.toUpperCase();
          }
          return (
            // use undefined this binding; fetch errors if bound to something else in browser/cloudflare
            this.fetch.call(void 0, url, fetchOptions).finally(() => {
              clearTimeout(timeout2);
            })
          );
        }
        shouldRetry(response) {
          const shouldRetryHeader = response.headers.get("x-should-retry");
          if (shouldRetryHeader === "true")
            return true;
          if (shouldRetryHeader === "false")
            return false;
          if (response.status === 408)
            return true;
          if (response.status === 409)
            return true;
          if (response.status === 429)
            return true;
          if (response.status >= 500)
            return true;
          return false;
        }
        async retryRequest(options, retriesRemaining, responseHeaders) {
          let timeoutMillis;
          const retryAfterMillisHeader = responseHeaders?.["retry-after-ms"];
          if (retryAfterMillisHeader) {
            const timeoutMs = parseFloat(retryAfterMillisHeader);
            if (!Number.isNaN(timeoutMs)) {
              timeoutMillis = timeoutMs;
            }
          }
          const retryAfterHeader = responseHeaders?.["retry-after"];
          if (retryAfterHeader && !timeoutMillis) {
            const timeoutSeconds = parseFloat(retryAfterHeader);
            if (!Number.isNaN(timeoutSeconds)) {
              timeoutMillis = timeoutSeconds * 1e3;
            } else {
              timeoutMillis = Date.parse(retryAfterHeader) - Date.now();
            }
          }
          if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1e3)) {
            const maxRetries = options.maxRetries ?? this.maxRetries;
            timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);
          }
          await (0, exports.sleep)(timeoutMillis);
          return this.makeRequest(options, retriesRemaining - 1);
        }
        calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {
          const initialRetryDelay = 0.5;
          const maxRetryDelay = 8;
          const numRetries = maxRetries - retriesRemaining;
          const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);
          const jitter = 1 - Math.random() * 0.25;
          return sleepSeconds * jitter * 1e3;
        }
        getUserAgent() {
          return `${this.constructor.name}/JS ${version_1.VERSION}`;
        }
      };
      exports.APIClient = APIClient;
      var AbstractPage = class {
        constructor(client, response, body, options) {
          _AbstractPage_client.set(this, void 0);
          __classPrivateFieldSet(this, _AbstractPage_client, client, "f");
          this.options = options;
          this.response = response;
          this.body = body;
        }
        hasNextPage() {
          const items = this.getPaginatedItems();
          if (!items.length)
            return false;
          return this.nextPageInfo() != null;
        }
        async getNextPage() {
          const nextInfo = this.nextPageInfo();
          if (!nextInfo) {
            throw new error_1.OpenAIError("No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.");
          }
          const nextOptions = { ...this.options };
          if ("params" in nextInfo && typeof nextOptions.query === "object") {
            nextOptions.query = { ...nextOptions.query, ...nextInfo.params };
          } else if ("url" in nextInfo) {
            const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];
            for (const [key, value] of params) {
              nextInfo.url.searchParams.set(key, value);
            }
            nextOptions.query = void 0;
            nextOptions.path = nextInfo.url.toString();
          }
          return await __classPrivateFieldGet(this, _AbstractPage_client, "f").requestAPIList(this.constructor, nextOptions);
        }
        async *iterPages() {
          let page = this;
          yield page;
          while (page.hasNextPage()) {
            page = await page.getNextPage();
            yield page;
          }
        }
        async *[(_AbstractPage_client = /* @__PURE__ */ new WeakMap(), Symbol.asyncIterator)]() {
          for await (const page of this.iterPages()) {
            for (const item of page.getPaginatedItems()) {
              yield item;
            }
          }
        }
      };
      exports.AbstractPage = AbstractPage;
      var PagePromise = class extends APIPromise {
        constructor(client, request, Page) {
          super(request, async (props) => new Page(client, props.response, await defaultParseResponse(props), props.options));
        }
        /**
         * Allow auto-paginating iteration on an unawaited list call, eg:
         *
         *    for await (const item of client.items.list()) {
         *      console.log(item)
         *    }
         */
        async *[Symbol.asyncIterator]() {
          const page = await this;
          for await (const item of page) {
            yield item;
          }
        }
      };
      exports.PagePromise = PagePromise;
      var createResponseHeaders = (headers) => {
        return new Proxy(Object.fromEntries(
          // @ts-ignore
          headers.entries()
        ), {
          get(target, name) {
            const key = name.toString();
            return target[key.toLowerCase()] || target[key];
          }
        });
      };
      exports.createResponseHeaders = createResponseHeaders;
      var requestOptionsKeys = {
        method: true,
        path: true,
        query: true,
        body: true,
        headers: true,
        maxRetries: true,
        stream: true,
        timeout: true,
        httpAgent: true,
        signal: true,
        idempotencyKey: true,
        __metadata: true,
        __binaryRequest: true,
        __binaryResponse: true,
        __streamClass: true
      };
      var isRequestOptions = (obj) => {
        return typeof obj === "object" && obj !== null && !isEmptyObj(obj) && Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k));
      };
      exports.isRequestOptions = isRequestOptions;
      var getPlatformProperties = () => {
        if (typeof Deno !== "undefined" && Deno.build != null) {
          return {
            "X-Stainless-Lang": "js",
            "X-Stainless-Package-Version": version_1.VERSION,
            "X-Stainless-OS": normalizePlatform(Deno.build.os),
            "X-Stainless-Arch": normalizeArch(Deno.build.arch),
            "X-Stainless-Runtime": "deno",
            "X-Stainless-Runtime-Version": typeof Deno.version === "string" ? Deno.version : Deno.version?.deno ?? "unknown"
          };
        }
        if (typeof EdgeRuntime !== "undefined") {
          return {
            "X-Stainless-Lang": "js",
            "X-Stainless-Package-Version": version_1.VERSION,
            "X-Stainless-OS": "Unknown",
            "X-Stainless-Arch": `other:${EdgeRuntime}`,
            "X-Stainless-Runtime": "edge",
            "X-Stainless-Runtime-Version": process.version
          };
        }
        if (Object.prototype.toString.call(typeof process !== "undefined" ? process : 0) === "[object process]") {
          return {
            "X-Stainless-Lang": "js",
            "X-Stainless-Package-Version": version_1.VERSION,
            "X-Stainless-OS": normalizePlatform(process.platform),
            "X-Stainless-Arch": normalizeArch(process.arch),
            "X-Stainless-Runtime": "node",
            "X-Stainless-Runtime-Version": process.version
          };
        }
        const browserInfo = getBrowserInfo();
        if (browserInfo) {
          return {
            "X-Stainless-Lang": "js",
            "X-Stainless-Package-Version": version_1.VERSION,
            "X-Stainless-OS": "Unknown",
            "X-Stainless-Arch": "unknown",
            "X-Stainless-Runtime": `browser:${browserInfo.browser}`,
            "X-Stainless-Runtime-Version": browserInfo.version
          };
        }
        return {
          "X-Stainless-Lang": "js",
          "X-Stainless-Package-Version": version_1.VERSION,
          "X-Stainless-OS": "Unknown",
          "X-Stainless-Arch": "unknown",
          "X-Stainless-Runtime": "unknown",
          "X-Stainless-Runtime-Version": "unknown"
        };
      };
      function getBrowserInfo() {
        if (typeof navigator === "undefined" || !navigator) {
          return null;
        }
        const browserPatterns = [
          { key: "edge", pattern: /Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
          { key: "ie", pattern: /MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
          { key: "ie", pattern: /Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/ },
          { key: "chrome", pattern: /Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
          { key: "firefox", pattern: /Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
          { key: "safari", pattern: /(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/ }
        ];
        for (const { key, pattern } of browserPatterns) {
          const match2 = pattern.exec(navigator.userAgent);
          if (match2) {
            const major = match2[1] || 0;
            const minor = match2[2] || 0;
            const patch = match2[3] || 0;
            return { browser: key, version: `${major}.${minor}.${patch}` };
          }
        }
        return null;
      }
      var normalizeArch = (arch) => {
        if (arch === "x32")
          return "x32";
        if (arch === "x86_64" || arch === "x64")
          return "x64";
        if (arch === "arm")
          return "arm";
        if (arch === "aarch64" || arch === "arm64")
          return "arm64";
        if (arch)
          return `other:${arch}`;
        return "unknown";
      };
      var normalizePlatform = (platform) => {
        platform = platform.toLowerCase();
        if (platform.includes("ios"))
          return "iOS";
        if (platform === "android")
          return "Android";
        if (platform === "darwin")
          return "MacOS";
        if (platform === "win32")
          return "Windows";
        if (platform === "freebsd")
          return "FreeBSD";
        if (platform === "openbsd")
          return "OpenBSD";
        if (platform === "linux")
          return "Linux";
        if (platform)
          return `Other:${platform}`;
        return "Unknown";
      };
      var _platformHeaders;
      var getPlatformHeaders = () => {
        return _platformHeaders ?? (_platformHeaders = getPlatformProperties());
      };
      var safeJSON = (text) => {
        try {
          return JSON.parse(text);
        } catch (err) {
          return void 0;
        }
      };
      exports.safeJSON = safeJSON;
      var startsWithSchemeRegexp = /^[a-z][a-z0-9+.-]*:/i;
      var isAbsoluteURL2 = (url) => {
        return startsWithSchemeRegexp.test(url);
      };
      var sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
      exports.sleep = sleep;
      var validatePositiveInteger = (name, n) => {
        if (typeof n !== "number" || !Number.isInteger(n)) {
          throw new error_1.OpenAIError(`${name} must be an integer`);
        }
        if (n < 0) {
          throw new error_1.OpenAIError(`${name} must be a positive integer`);
        }
        return n;
      };
      var castToError = (err) => {
        if (err instanceof Error)
          return err;
        if (typeof err === "object" && err !== null) {
          try {
            return new Error(JSON.stringify(err));
          } catch {
          }
        }
        return new Error(err);
      };
      exports.castToError = castToError;
      var ensurePresent = (value) => {
        if (value == null)
          throw new error_1.OpenAIError(`Expected a value to be given but received ${value} instead.`);
        return value;
      };
      exports.ensurePresent = ensurePresent;
      var readEnv = (env) => {
        if (typeof process !== "undefined") {
          return process.env?.[env]?.trim() ?? void 0;
        }
        if (typeof Deno !== "undefined") {
          return Deno.env?.get?.(env)?.trim();
        }
        return void 0;
      };
      exports.readEnv = readEnv;
      var coerceInteger = (value) => {
        if (typeof value === "number")
          return Math.round(value);
        if (typeof value === "string")
          return parseInt(value, 10);
        throw new error_1.OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);
      };
      exports.coerceInteger = coerceInteger;
      var coerceFloat = (value) => {
        if (typeof value === "number")
          return value;
        if (typeof value === "string")
          return parseFloat(value);
        throw new error_1.OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);
      };
      exports.coerceFloat = coerceFloat;
      var coerceBoolean = (value) => {
        if (typeof value === "boolean")
          return value;
        if (typeof value === "string")
          return value === "true";
        return Boolean(value);
      };
      exports.coerceBoolean = coerceBoolean;
      var maybeCoerceInteger = (value) => {
        if (value === void 0) {
          return void 0;
        }
        return (0, exports.coerceInteger)(value);
      };
      exports.maybeCoerceInteger = maybeCoerceInteger;
      var maybeCoerceFloat = (value) => {
        if (value === void 0) {
          return void 0;
        }
        return (0, exports.coerceFloat)(value);
      };
      exports.maybeCoerceFloat = maybeCoerceFloat;
      var maybeCoerceBoolean = (value) => {
        if (value === void 0) {
          return void 0;
        }
        return (0, exports.coerceBoolean)(value);
      };
      exports.maybeCoerceBoolean = maybeCoerceBoolean;
      function isEmptyObj(obj) {
        if (!obj)
          return true;
        for (const _k in obj)
          return false;
        return true;
      }
      exports.isEmptyObj = isEmptyObj;
      function hasOwn(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
      }
      exports.hasOwn = hasOwn;
      function applyHeadersMut(targetHeaders, newHeaders) {
        for (const k in newHeaders) {
          if (!hasOwn(newHeaders, k))
            continue;
          const lowerKey = k.toLowerCase();
          if (!lowerKey)
            continue;
          const val = newHeaders[k];
          if (val === null) {
            delete targetHeaders[lowerKey];
          } else if (val !== void 0) {
            targetHeaders[lowerKey] = val;
          }
        }
      }
      var SENSITIVE_HEADERS = /* @__PURE__ */ new Set(["authorization", "api-key"]);
      function debug(action, ...args) {
        if (typeof process !== "undefined" && process?.env?.["DEBUG"] === "true") {
          const modifiedArgs = args.map((arg) => {
            if (!arg) {
              return arg;
            }
            if (arg["headers"]) {
              const modifiedArg2 = { ...arg, headers: { ...arg["headers"] } };
              for (const header in arg["headers"]) {
                if (SENSITIVE_HEADERS.has(header.toLowerCase())) {
                  modifiedArg2["headers"][header] = "REDACTED";
                }
              }
              return modifiedArg2;
            }
            let modifiedArg = null;
            for (const header in arg) {
              if (SENSITIVE_HEADERS.has(header.toLowerCase())) {
                modifiedArg ?? (modifiedArg = { ...arg });
                modifiedArg[header] = "REDACTED";
              }
            }
            return modifiedArg ?? arg;
          });
          console.log(`OpenAI:DEBUG:${action}`, ...modifiedArgs);
        }
      }
      exports.debug = debug;
      var uuid4 = () => {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
          const r = Math.random() * 16 | 0;
          const v = c === "x" ? r : r & 3 | 8;
          return v.toString(16);
        });
      };
      var isRunningInBrowser = () => {
        return (
          // @ts-ignore
          typeof window !== "undefined" && // @ts-ignore
          typeof window.document !== "undefined" && // @ts-ignore
          typeof navigator !== "undefined"
        );
      };
      exports.isRunningInBrowser = isRunningInBrowser;
      var isHeadersProtocol = (headers) => {
        return typeof headers?.get === "function";
      };
      exports.isHeadersProtocol = isHeadersProtocol;
      var getRequiredHeader = (headers, header) => {
        const foundHeader = (0, exports.getHeader)(headers, header);
        if (foundHeader === void 0) {
          throw new Error(`Could not find ${header} header`);
        }
        return foundHeader;
      };
      exports.getRequiredHeader = getRequiredHeader;
      var getHeader = (headers, header) => {
        const lowerCasedHeader = header.toLowerCase();
        if ((0, exports.isHeadersProtocol)(headers)) {
          const intercapsHeader = header[0]?.toUpperCase() + header.substring(1).replace(/([^\w])(\w)/g, (_m, g1, g2) => g1 + g2.toUpperCase());
          for (const key of [header, lowerCasedHeader, header.toUpperCase(), intercapsHeader]) {
            const value = headers.get(key);
            if (value) {
              return value;
            }
          }
        }
        for (const [key, value] of Object.entries(headers)) {
          if (key.toLowerCase() === lowerCasedHeader) {
            if (Array.isArray(value)) {
              if (value.length <= 1)
                return value[0];
              console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);
              return value[0];
            }
            return value;
          }
        }
        return void 0;
      };
      exports.getHeader = getHeader;
      var toBase64 = (str) => {
        if (!str)
          return "";
        if (typeof Buffer !== "undefined") {
          return Buffer.from(str).toString("base64");
        }
        if (typeof btoa !== "undefined") {
          return btoa(str);
        }
        throw new error_1.OpenAIError("Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined");
      };
      exports.toBase64 = toBase64;
      function isObj(obj) {
        return obj != null && typeof obj === "object" && !Array.isArray(obj);
      }
      exports.isObj = isObj;
    }
  });

  // ../PromptRepository/node_modules/openai/pagination.js
  var require_pagination = __commonJS({
    "../PromptRepository/node_modules/openai/pagination.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CursorPage = exports.Page = void 0;
      var core_1 = require_core();
      var Page = class extends core_1.AbstractPage {
        constructor(client, response, body, options) {
          super(client, response, body, options);
          this.data = body.data || [];
          this.object = body.object;
        }
        getPaginatedItems() {
          return this.data ?? [];
        }
        // @deprecated Please use `nextPageInfo()` instead
        /**
         * This page represents a response that isn't actually paginated at the API level
         * so there will never be any next page params.
         */
        nextPageParams() {
          return null;
        }
        nextPageInfo() {
          return null;
        }
      };
      exports.Page = Page;
      var CursorPage = class extends core_1.AbstractPage {
        constructor(client, response, body, options) {
          super(client, response, body, options);
          this.data = body.data || [];
          this.has_more = body.has_more || false;
        }
        getPaginatedItems() {
          return this.data ?? [];
        }
        hasNextPage() {
          if (this.has_more === false) {
            return false;
          }
          return super.hasNextPage();
        }
        // @deprecated Please use `nextPageInfo()` instead
        nextPageParams() {
          const info = this.nextPageInfo();
          if (!info)
            return null;
          if ("params" in info)
            return info.params;
          const params = Object.fromEntries(info.url.searchParams);
          if (!Object.keys(params).length)
            return null;
          return params;
        }
        nextPageInfo() {
          const data = this.getPaginatedItems();
          if (!data.length) {
            return null;
          }
          const id = data[data.length - 1]?.id;
          if (!id) {
            return null;
          }
          return { params: { after: id } };
        }
      };
      exports.CursorPage = CursorPage;
    }
  });

  // ../PromptRepository/node_modules/openai/resource.js
  var require_resource = __commonJS({
    "../PromptRepository/node_modules/openai/resource.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.APIResource = void 0;
      var APIResource = class {
        constructor(client) {
          this._client = client;
        }
      };
      exports.APIResource = APIResource;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/chat/completions/messages.js
  var require_messages = __commonJS({
    "../PromptRepository/node_modules/openai/resources/chat/completions/messages.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ChatCompletionStoreMessagesPage = exports.Messages = void 0;
      var resource_1 = require_resource();
      var core_1 = require_core();
      var completions_1 = require_completions();
      Object.defineProperty(exports, "ChatCompletionStoreMessagesPage", { enumerable: true, get: function() {
        return completions_1.ChatCompletionStoreMessagesPage;
      } });
      var Messages = class extends resource_1.APIResource {
        list(completionId, query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.list(completionId, {}, query);
          }
          return this._client.getAPIList(`/chat/completions/${completionId}/messages`, completions_1.ChatCompletionStoreMessagesPage, { query, ...options });
        }
      };
      exports.Messages = Messages;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/chat/completions/completions.js
  var require_completions = __commonJS({
    "../PromptRepository/node_modules/openai/resources/chat/completions/completions.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ChatCompletionStoreMessagesPage = exports.ChatCompletionsPage = exports.Completions = void 0;
      var resource_1 = require_resource();
      var core_1 = require_core();
      var MessagesAPI = __importStar(require_messages());
      var messages_1 = require_messages();
      var pagination_1 = require_pagination();
      var Completions = class extends resource_1.APIResource {
        constructor() {
          super(...arguments);
          this.messages = new MessagesAPI.Messages(this._client);
        }
        create(body, options) {
          return this._client.post("/chat/completions", { body, ...options, stream: body.stream ?? false });
        }
        /**
         * Get a stored chat completion. Only Chat Completions that have been created with
         * the `store` parameter set to `true` will be returned.
         */
        retrieve(completionId, options) {
          return this._client.get(`/chat/completions/${completionId}`, options);
        }
        /**
         * Modify a stored chat completion. Only Chat Completions that have been created
         * with the `store` parameter set to `true` can be modified. Currently, the only
         * supported modification is to update the `metadata` field.
         */
        update(completionId, body, options) {
          return this._client.post(`/chat/completions/${completionId}`, { body, ...options });
        }
        list(query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.list({}, query);
          }
          return this._client.getAPIList("/chat/completions", ChatCompletionsPage, { query, ...options });
        }
        /**
         * Delete a stored chat completion. Only Chat Completions that have been created
         * with the `store` parameter set to `true` can be deleted.
         */
        del(completionId, options) {
          return this._client.delete(`/chat/completions/${completionId}`, options);
        }
      };
      exports.Completions = Completions;
      var ChatCompletionsPage = class extends pagination_1.CursorPage {
      };
      exports.ChatCompletionsPage = ChatCompletionsPage;
      var ChatCompletionStoreMessagesPage = class extends pagination_1.CursorPage {
      };
      exports.ChatCompletionStoreMessagesPage = ChatCompletionStoreMessagesPage;
      Completions.ChatCompletionsPage = ChatCompletionsPage;
      Completions.Messages = messages_1.Messages;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/chat/chat.js
  var require_chat = __commonJS({
    "../PromptRepository/node_modules/openai/resources/chat/chat.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Chat = void 0;
      var resource_1 = require_resource();
      var CompletionsAPI = __importStar(require_completions());
      var completions_1 = require_completions();
      var Chat = class extends resource_1.APIResource {
        constructor() {
          super(...arguments);
          this.completions = new CompletionsAPI.Completions(this._client);
        }
      };
      exports.Chat = Chat;
      Chat.Completions = completions_1.Completions;
      Chat.ChatCompletionsPage = completions_1.ChatCompletionsPage;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/chat/completions/index.js
  var require_completions2 = __commonJS({
    "../PromptRepository/node_modules/openai/resources/chat/completions/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Messages = exports.Completions = exports.ChatCompletionsPage = exports.ChatCompletionStoreMessagesPage = void 0;
      var completions_1 = require_completions();
      Object.defineProperty(exports, "ChatCompletionStoreMessagesPage", { enumerable: true, get: function() {
        return completions_1.ChatCompletionStoreMessagesPage;
      } });
      Object.defineProperty(exports, "ChatCompletionsPage", { enumerable: true, get: function() {
        return completions_1.ChatCompletionsPage;
      } });
      Object.defineProperty(exports, "Completions", { enumerable: true, get: function() {
        return completions_1.Completions;
      } });
      var messages_1 = require_messages();
      Object.defineProperty(exports, "Messages", { enumerable: true, get: function() {
        return messages_1.Messages;
      } });
    }
  });

  // ../PromptRepository/node_modules/openai/resources/chat/index.js
  var require_chat2 = __commonJS({
    "../PromptRepository/node_modules/openai/resources/chat/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Completions = exports.ChatCompletionsPage = exports.ChatCompletionStoreMessagesPage = exports.Chat = void 0;
      var chat_1 = require_chat();
      Object.defineProperty(exports, "Chat", { enumerable: true, get: function() {
        return chat_1.Chat;
      } });
      var index_1 = require_completions2();
      Object.defineProperty(exports, "ChatCompletionStoreMessagesPage", { enumerable: true, get: function() {
        return index_1.ChatCompletionStoreMessagesPage;
      } });
      Object.defineProperty(exports, "ChatCompletionsPage", { enumerable: true, get: function() {
        return index_1.ChatCompletionsPage;
      } });
      Object.defineProperty(exports, "Completions", { enumerable: true, get: function() {
        return index_1.Completions;
      } });
    }
  });

  // ../PromptRepository/node_modules/openai/resources/shared.js
  var require_shared = __commonJS({
    "../PromptRepository/node_modules/openai/resources/shared.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../PromptRepository/node_modules/openai/resources/audio/speech.js
  var require_speech = __commonJS({
    "../PromptRepository/node_modules/openai/resources/audio/speech.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Speech = void 0;
      var resource_1 = require_resource();
      var Speech = class extends resource_1.APIResource {
        /**
         * Generates audio from the input text.
         */
        create(body, options) {
          return this._client.post("/audio/speech", {
            body,
            ...options,
            headers: { Accept: "application/octet-stream", ...options?.headers },
            __binaryResponse: true
          });
        }
      };
      exports.Speech = Speech;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/audio/transcriptions.js
  var require_transcriptions = __commonJS({
    "../PromptRepository/node_modules/openai/resources/audio/transcriptions.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Transcriptions = void 0;
      var resource_1 = require_resource();
      var Core = __importStar(require_core());
      var Transcriptions = class extends resource_1.APIResource {
        create(body, options) {
          return this._client.post("/audio/transcriptions", Core.multipartFormRequestOptions({ body, ...options, __metadata: { model: body.model } }));
        }
      };
      exports.Transcriptions = Transcriptions;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/audio/translations.js
  var require_translations = __commonJS({
    "../PromptRepository/node_modules/openai/resources/audio/translations.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Translations = void 0;
      var resource_1 = require_resource();
      var Core = __importStar(require_core());
      var Translations = class extends resource_1.APIResource {
        create(body, options) {
          return this._client.post("/audio/translations", Core.multipartFormRequestOptions({ body, ...options, __metadata: { model: body.model } }));
        }
      };
      exports.Translations = Translations;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/audio/audio.js
  var require_audio = __commonJS({
    "../PromptRepository/node_modules/openai/resources/audio/audio.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Audio = void 0;
      var resource_1 = require_resource();
      var SpeechAPI = __importStar(require_speech());
      var speech_1 = require_speech();
      var TranscriptionsAPI = __importStar(require_transcriptions());
      var transcriptions_1 = require_transcriptions();
      var TranslationsAPI = __importStar(require_translations());
      var translations_1 = require_translations();
      var Audio = class extends resource_1.APIResource {
        constructor() {
          super(...arguments);
          this.transcriptions = new TranscriptionsAPI.Transcriptions(this._client);
          this.translations = new TranslationsAPI.Translations(this._client);
          this.speech = new SpeechAPI.Speech(this._client);
        }
      };
      exports.Audio = Audio;
      Audio.Transcriptions = transcriptions_1.Transcriptions;
      Audio.Translations = translations_1.Translations;
      Audio.Speech = speech_1.Speech;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/batches.js
  var require_batches = __commonJS({
    "../PromptRepository/node_modules/openai/resources/batches.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BatchesPage = exports.Batches = void 0;
      var resource_1 = require_resource();
      var core_1 = require_core();
      var pagination_1 = require_pagination();
      var Batches = class extends resource_1.APIResource {
        /**
         * Creates and executes a batch from an uploaded file of requests
         */
        create(body, options) {
          return this._client.post("/batches", { body, ...options });
        }
        /**
         * Retrieves a batch.
         */
        retrieve(batchId, options) {
          return this._client.get(`/batches/${batchId}`, options);
        }
        list(query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.list({}, query);
          }
          return this._client.getAPIList("/batches", BatchesPage, { query, ...options });
        }
        /**
         * Cancels an in-progress batch. The batch will be in status `cancelling` for up to
         * 10 minutes, before changing to `cancelled`, where it will have partial results
         * (if any) available in the output file.
         */
        cancel(batchId, options) {
          return this._client.post(`/batches/${batchId}/cancel`, options);
        }
      };
      exports.Batches = Batches;
      var BatchesPage = class extends pagination_1.CursorPage {
      };
      exports.BatchesPage = BatchesPage;
      Batches.BatchesPage = BatchesPage;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/beta/assistants.js
  var require_assistants = __commonJS({
    "../PromptRepository/node_modules/openai/resources/beta/assistants.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AssistantsPage = exports.Assistants = void 0;
      var resource_1 = require_resource();
      var core_1 = require_core();
      var pagination_1 = require_pagination();
      var Assistants = class extends resource_1.APIResource {
        /**
         * Create an assistant with a model and instructions.
         */
        create(body, options) {
          return this._client.post("/assistants", {
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Retrieves an assistant.
         */
        retrieve(assistantId, options) {
          return this._client.get(`/assistants/${assistantId}`, {
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Modifies an assistant.
         */
        update(assistantId, body, options) {
          return this._client.post(`/assistants/${assistantId}`, {
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        list(query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.list({}, query);
          }
          return this._client.getAPIList("/assistants", AssistantsPage, {
            query,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Delete an assistant.
         */
        del(assistantId, options) {
          return this._client.delete(`/assistants/${assistantId}`, {
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
      };
      exports.Assistants = Assistants;
      var AssistantsPage = class extends pagination_1.CursorPage {
      };
      exports.AssistantsPage = AssistantsPage;
      Assistants.AssistantsPage = AssistantsPage;
    }
  });

  // ../PromptRepository/node_modules/openai/lib/RunnableFunction.js
  var require_RunnableFunction = __commonJS({
    "../PromptRepository/node_modules/openai/lib/RunnableFunction.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ParsingToolFunction = exports.ParsingFunction = exports.isRunnableFunctionWithParse = void 0;
      function isRunnableFunctionWithParse(fn) {
        return typeof fn.parse === "function";
      }
      exports.isRunnableFunctionWithParse = isRunnableFunctionWithParse;
      var ParsingFunction = class {
        constructor(input) {
          this.function = input.function;
          this.parse = input.parse;
          this.parameters = input.parameters;
          this.description = input.description;
          this.name = input.name;
        }
      };
      exports.ParsingFunction = ParsingFunction;
      var ParsingToolFunction = class {
        constructor(input) {
          this.type = "function";
          this.function = input;
        }
      };
      exports.ParsingToolFunction = ParsingToolFunction;
    }
  });

  // ../PromptRepository/node_modules/openai/lib/chatCompletionUtils.js
  var require_chatCompletionUtils = __commonJS({
    "../PromptRepository/node_modules/openai/lib/chatCompletionUtils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isPresent = exports.isToolMessage = exports.isFunctionMessage = exports.isAssistantMessage = void 0;
      var isAssistantMessage = (message) => {
        return message?.role === "assistant";
      };
      exports.isAssistantMessage = isAssistantMessage;
      var isFunctionMessage = (message) => {
        return message?.role === "function";
      };
      exports.isFunctionMessage = isFunctionMessage;
      var isToolMessage = (message) => {
        return message?.role === "tool";
      };
      exports.isToolMessage = isToolMessage;
      function isPresent(obj) {
        return obj != null;
      }
      exports.isPresent = isPresent;
    }
  });

  // ../PromptRepository/node_modules/openai/lib/EventStream.js
  var require_EventStream = __commonJS({
    "../PromptRepository/node_modules/openai/lib/EventStream.js"(exports) {
      "use strict";
      var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      var _EventStream_instances;
      var _EventStream_connectedPromise;
      var _EventStream_resolveConnectedPromise;
      var _EventStream_rejectConnectedPromise;
      var _EventStream_endPromise;
      var _EventStream_resolveEndPromise;
      var _EventStream_rejectEndPromise;
      var _EventStream_listeners;
      var _EventStream_ended;
      var _EventStream_errored;
      var _EventStream_aborted;
      var _EventStream_catchingPromiseCreated;
      var _EventStream_handleError;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.EventStream = void 0;
      var error_1 = require_error();
      var EventStream = class {
        constructor() {
          _EventStream_instances.add(this);
          this.controller = new AbortController();
          _EventStream_connectedPromise.set(this, void 0);
          _EventStream_resolveConnectedPromise.set(this, () => {
          });
          _EventStream_rejectConnectedPromise.set(this, () => {
          });
          _EventStream_endPromise.set(this, void 0);
          _EventStream_resolveEndPromise.set(this, () => {
          });
          _EventStream_rejectEndPromise.set(this, () => {
          });
          _EventStream_listeners.set(this, {});
          _EventStream_ended.set(this, false);
          _EventStream_errored.set(this, false);
          _EventStream_aborted.set(this, false);
          _EventStream_catchingPromiseCreated.set(this, false);
          __classPrivateFieldSet(this, _EventStream_connectedPromise, new Promise((resolve, reject) => {
            __classPrivateFieldSet(this, _EventStream_resolveConnectedPromise, resolve, "f");
            __classPrivateFieldSet(this, _EventStream_rejectConnectedPromise, reject, "f");
          }), "f");
          __classPrivateFieldSet(this, _EventStream_endPromise, new Promise((resolve, reject) => {
            __classPrivateFieldSet(this, _EventStream_resolveEndPromise, resolve, "f");
            __classPrivateFieldSet(this, _EventStream_rejectEndPromise, reject, "f");
          }), "f");
          __classPrivateFieldGet(this, _EventStream_connectedPromise, "f").catch(() => {
          });
          __classPrivateFieldGet(this, _EventStream_endPromise, "f").catch(() => {
          });
        }
        _run(executor) {
          setTimeout(() => {
            executor().then(() => {
              this._emitFinal();
              this._emit("end");
            }, __classPrivateFieldGet(this, _EventStream_instances, "m", _EventStream_handleError).bind(this));
          }, 0);
        }
        _connected() {
          if (this.ended)
            return;
          __classPrivateFieldGet(this, _EventStream_resolveConnectedPromise, "f").call(this);
          this._emit("connect");
        }
        get ended() {
          return __classPrivateFieldGet(this, _EventStream_ended, "f");
        }
        get errored() {
          return __classPrivateFieldGet(this, _EventStream_errored, "f");
        }
        get aborted() {
          return __classPrivateFieldGet(this, _EventStream_aborted, "f");
        }
        abort() {
          this.controller.abort();
        }
        /**
         * Adds the listener function to the end of the listeners array for the event.
         * No checks are made to see if the listener has already been added. Multiple calls passing
         * the same combination of event and listener will result in the listener being added, and
         * called, multiple times.
         * @returns this ChatCompletionStream, so that calls can be chained
         */
        on(event, listener) {
          const listeners = __classPrivateFieldGet(this, _EventStream_listeners, "f")[event] || (__classPrivateFieldGet(this, _EventStream_listeners, "f")[event] = []);
          listeners.push({ listener });
          return this;
        }
        /**
         * Removes the specified listener from the listener array for the event.
         * off() will remove, at most, one instance of a listener from the listener array. If any single
         * listener has been added multiple times to the listener array for the specified event, then
         * off() must be called multiple times to remove each instance.
         * @returns this ChatCompletionStream, so that calls can be chained
         */
        off(event, listener) {
          const listeners = __classPrivateFieldGet(this, _EventStream_listeners, "f")[event];
          if (!listeners)
            return this;
          const index = listeners.findIndex((l) => l.listener === listener);
          if (index >= 0)
            listeners.splice(index, 1);
          return this;
        }
        /**
         * Adds a one-time listener function for the event. The next time the event is triggered,
         * this listener is removed and then invoked.
         * @returns this ChatCompletionStream, so that calls can be chained
         */
        once(event, listener) {
          const listeners = __classPrivateFieldGet(this, _EventStream_listeners, "f")[event] || (__classPrivateFieldGet(this, _EventStream_listeners, "f")[event] = []);
          listeners.push({ listener, once: true });
          return this;
        }
        /**
         * This is similar to `.once()`, but returns a Promise that resolves the next time
         * the event is triggered, instead of calling a listener callback.
         * @returns a Promise that resolves the next time given event is triggered,
         * or rejects if an error is emitted.  (If you request the 'error' event,
         * returns a promise that resolves with the error).
         *
         * Example:
         *
         *   const message = await stream.emitted('message') // rejects if the stream errors
         */
        emitted(event) {
          return new Promise((resolve, reject) => {
            __classPrivateFieldSet(this, _EventStream_catchingPromiseCreated, true, "f");
            if (event !== "error")
              this.once("error", reject);
            this.once(event, resolve);
          });
        }
        async done() {
          __classPrivateFieldSet(this, _EventStream_catchingPromiseCreated, true, "f");
          await __classPrivateFieldGet(this, _EventStream_endPromise, "f");
        }
        _emit(event, ...args) {
          if (__classPrivateFieldGet(this, _EventStream_ended, "f")) {
            return;
          }
          if (event === "end") {
            __classPrivateFieldSet(this, _EventStream_ended, true, "f");
            __classPrivateFieldGet(this, _EventStream_resolveEndPromise, "f").call(this);
          }
          const listeners = __classPrivateFieldGet(this, _EventStream_listeners, "f")[event];
          if (listeners) {
            __classPrivateFieldGet(this, _EventStream_listeners, "f")[event] = listeners.filter((l) => !l.once);
            listeners.forEach(({ listener }) => listener(...args));
          }
          if (event === "abort") {
            const error = args[0];
            if (!__classPrivateFieldGet(this, _EventStream_catchingPromiseCreated, "f") && !listeners?.length) {
              Promise.reject(error);
            }
            __classPrivateFieldGet(this, _EventStream_rejectConnectedPromise, "f").call(this, error);
            __classPrivateFieldGet(this, _EventStream_rejectEndPromise, "f").call(this, error);
            this._emit("end");
            return;
          }
          if (event === "error") {
            const error = args[0];
            if (!__classPrivateFieldGet(this, _EventStream_catchingPromiseCreated, "f") && !listeners?.length) {
              Promise.reject(error);
            }
            __classPrivateFieldGet(this, _EventStream_rejectConnectedPromise, "f").call(this, error);
            __classPrivateFieldGet(this, _EventStream_rejectEndPromise, "f").call(this, error);
            this._emit("end");
          }
        }
        _emitFinal() {
        }
      };
      exports.EventStream = EventStream;
      _EventStream_connectedPromise = /* @__PURE__ */ new WeakMap(), _EventStream_resolveConnectedPromise = /* @__PURE__ */ new WeakMap(), _EventStream_rejectConnectedPromise = /* @__PURE__ */ new WeakMap(), _EventStream_endPromise = /* @__PURE__ */ new WeakMap(), _EventStream_resolveEndPromise = /* @__PURE__ */ new WeakMap(), _EventStream_rejectEndPromise = /* @__PURE__ */ new WeakMap(), _EventStream_listeners = /* @__PURE__ */ new WeakMap(), _EventStream_ended = /* @__PURE__ */ new WeakMap(), _EventStream_errored = /* @__PURE__ */ new WeakMap(), _EventStream_aborted = /* @__PURE__ */ new WeakMap(), _EventStream_catchingPromiseCreated = /* @__PURE__ */ new WeakMap(), _EventStream_instances = /* @__PURE__ */ new WeakSet(), _EventStream_handleError = function _EventStream_handleError2(error) {
        __classPrivateFieldSet(this, _EventStream_errored, true, "f");
        if (error instanceof Error && error.name === "AbortError") {
          error = new error_1.APIUserAbortError();
        }
        if (error instanceof error_1.APIUserAbortError) {
          __classPrivateFieldSet(this, _EventStream_aborted, true, "f");
          return this._emit("abort", error);
        }
        if (error instanceof error_1.OpenAIError) {
          return this._emit("error", error);
        }
        if (error instanceof Error) {
          const openAIError = new error_1.OpenAIError(error.message);
          openAIError.cause = error;
          return this._emit("error", openAIError);
        }
        return this._emit("error", new error_1.OpenAIError(String(error)));
      };
    }
  });

  // ../PromptRepository/node_modules/openai/lib/parser.js
  var require_parser = __commonJS({
    "../PromptRepository/node_modules/openai/lib/parser.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateInputTools = exports.hasAutoParseableInput = exports.shouldParseToolCall = exports.parseChatCompletion = exports.maybeParseChatCompletion = exports.isAutoParsableTool = exports.makeParseableTool = exports.isAutoParsableResponseFormat = exports.makeParseableTextFormat = exports.makeParseableResponseFormat = void 0;
      var error_1 = require_error();
      function makeParseableResponseFormat(response_format, parser) {
        const obj = { ...response_format };
        Object.defineProperties(obj, {
          $brand: {
            value: "auto-parseable-response-format",
            enumerable: false
          },
          $parseRaw: {
            value: parser,
            enumerable: false
          }
        });
        return obj;
      }
      exports.makeParseableResponseFormat = makeParseableResponseFormat;
      function makeParseableTextFormat(response_format, parser) {
        const obj = { ...response_format };
        Object.defineProperties(obj, {
          $brand: {
            value: "auto-parseable-response-format",
            enumerable: false
          },
          $parseRaw: {
            value: parser,
            enumerable: false
          }
        });
        return obj;
      }
      exports.makeParseableTextFormat = makeParseableTextFormat;
      function isAutoParsableResponseFormat(response_format) {
        return response_format?.["$brand"] === "auto-parseable-response-format";
      }
      exports.isAutoParsableResponseFormat = isAutoParsableResponseFormat;
      function makeParseableTool(tool, { parser, callback }) {
        const obj = { ...tool };
        Object.defineProperties(obj, {
          $brand: {
            value: "auto-parseable-tool",
            enumerable: false
          },
          $parseRaw: {
            value: parser,
            enumerable: false
          },
          $callback: {
            value: callback,
            enumerable: false
          }
        });
        return obj;
      }
      exports.makeParseableTool = makeParseableTool;
      function isAutoParsableTool(tool) {
        return tool?.["$brand"] === "auto-parseable-tool";
      }
      exports.isAutoParsableTool = isAutoParsableTool;
      function maybeParseChatCompletion(completion, params) {
        if (!params || !hasAutoParseableInput(params)) {
          return {
            ...completion,
            choices: completion.choices.map((choice) => ({
              ...choice,
              message: {
                ...choice.message,
                parsed: null,
                ...choice.message.tool_calls ? {
                  tool_calls: choice.message.tool_calls
                } : void 0
              }
            }))
          };
        }
        return parseChatCompletion(completion, params);
      }
      exports.maybeParseChatCompletion = maybeParseChatCompletion;
      function parseChatCompletion(completion, params) {
        const choices = completion.choices.map((choice) => {
          if (choice.finish_reason === "length") {
            throw new error_1.LengthFinishReasonError();
          }
          if (choice.finish_reason === "content_filter") {
            throw new error_1.ContentFilterFinishReasonError();
          }
          return {
            ...choice,
            message: {
              ...choice.message,
              ...choice.message.tool_calls ? {
                tool_calls: choice.message.tool_calls?.map((toolCall) => parseToolCall(params, toolCall)) ?? void 0
              } : void 0,
              parsed: choice.message.content && !choice.message.refusal ? parseResponseFormat(params, choice.message.content) : null
            }
          };
        });
        return { ...completion, choices };
      }
      exports.parseChatCompletion = parseChatCompletion;
      function parseResponseFormat(params, content) {
        if (params.response_format?.type !== "json_schema") {
          return null;
        }
        if (params.response_format?.type === "json_schema") {
          if ("$parseRaw" in params.response_format) {
            const response_format = params.response_format;
            return response_format.$parseRaw(content);
          }
          return JSON.parse(content);
        }
        return null;
      }
      function parseToolCall(params, toolCall) {
        const inputTool = params.tools?.find((inputTool2) => inputTool2.function?.name === toolCall.function.name);
        return {
          ...toolCall,
          function: {
            ...toolCall.function,
            parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.function.arguments) : inputTool?.function.strict ? JSON.parse(toolCall.function.arguments) : null
          }
        };
      }
      function shouldParseToolCall(params, toolCall) {
        if (!params) {
          return false;
        }
        const inputTool = params.tools?.find((inputTool2) => inputTool2.function?.name === toolCall.function.name);
        return isAutoParsableTool(inputTool) || inputTool?.function.strict || false;
      }
      exports.shouldParseToolCall = shouldParseToolCall;
      function hasAutoParseableInput(params) {
        if (isAutoParsableResponseFormat(params.response_format)) {
          return true;
        }
        return params.tools?.some((t) => isAutoParsableTool(t) || t.type === "function" && t.function.strict === true) ?? false;
      }
      exports.hasAutoParseableInput = hasAutoParseableInput;
      function validateInputTools(tools) {
        for (const tool of tools ?? []) {
          if (tool.type !== "function") {
            throw new error_1.OpenAIError(`Currently only \`function\` tool types support auto-parsing; Received \`${tool.type}\``);
          }
          if (tool.function.strict !== true) {
            throw new error_1.OpenAIError(`The \`${tool.function.name}\` tool is not marked with \`strict: true\`. Only strict function tools can be auto-parsed`);
          }
        }
      }
      exports.validateInputTools = validateInputTools;
    }
  });

  // ../PromptRepository/node_modules/openai/lib/AbstractChatCompletionRunner.js
  var require_AbstractChatCompletionRunner = __commonJS({
    "../PromptRepository/node_modules/openai/lib/AbstractChatCompletionRunner.js"(exports) {
      "use strict";
      var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      var _AbstractChatCompletionRunner_instances;
      var _AbstractChatCompletionRunner_getFinalContent;
      var _AbstractChatCompletionRunner_getFinalMessage;
      var _AbstractChatCompletionRunner_getFinalFunctionCall;
      var _AbstractChatCompletionRunner_getFinalFunctionCallResult;
      var _AbstractChatCompletionRunner_calculateTotalUsage;
      var _AbstractChatCompletionRunner_validateParams;
      var _AbstractChatCompletionRunner_stringifyFunctionCallResult;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AbstractChatCompletionRunner = void 0;
      var error_1 = require_error();
      var RunnableFunction_1 = require_RunnableFunction();
      var chatCompletionUtils_1 = require_chatCompletionUtils();
      var EventStream_1 = require_EventStream();
      var parser_1 = require_parser();
      var DEFAULT_MAX_CHAT_COMPLETIONS = 10;
      var AbstractChatCompletionRunner = class extends EventStream_1.EventStream {
        constructor() {
          super(...arguments);
          _AbstractChatCompletionRunner_instances.add(this);
          this._chatCompletions = [];
          this.messages = [];
        }
        _addChatCompletion(chatCompletion) {
          this._chatCompletions.push(chatCompletion);
          this._emit("chatCompletion", chatCompletion);
          const message = chatCompletion.choices[0]?.message;
          if (message)
            this._addMessage(message);
          return chatCompletion;
        }
        _addMessage(message, emit = true) {
          if (!("content" in message))
            message.content = null;
          this.messages.push(message);
          if (emit) {
            this._emit("message", message);
            if (((0, chatCompletionUtils_1.isFunctionMessage)(message) || (0, chatCompletionUtils_1.isToolMessage)(message)) && message.content) {
              this._emit("functionCallResult", message.content);
            } else if ((0, chatCompletionUtils_1.isAssistantMessage)(message) && message.function_call) {
              this._emit("functionCall", message.function_call);
            } else if ((0, chatCompletionUtils_1.isAssistantMessage)(message) && message.tool_calls) {
              for (const tool_call of message.tool_calls) {
                if (tool_call.type === "function") {
                  this._emit("functionCall", tool_call.function);
                }
              }
            }
          }
        }
        /**
         * @returns a promise that resolves with the final ChatCompletion, or rejects
         * if an error occurred or the stream ended prematurely without producing a ChatCompletion.
         */
        async finalChatCompletion() {
          await this.done();
          const completion = this._chatCompletions[this._chatCompletions.length - 1];
          if (!completion)
            throw new error_1.OpenAIError("stream ended without producing a ChatCompletion");
          return completion;
        }
        /**
         * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects
         * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.
         */
        async finalContent() {
          await this.done();
          return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalContent).call(this);
        }
        /**
         * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,
         * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.
         */
        async finalMessage() {
          await this.done();
          return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalMessage).call(this);
        }
        /**
         * @returns a promise that resolves with the content of the final FunctionCall, or rejects
         * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.
         */
        async finalFunctionCall() {
          await this.done();
          return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);
        }
        async finalFunctionCallResult() {
          await this.done();
          return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);
        }
        async totalUsage() {
          await this.done();
          return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);
        }
        allChatCompletions() {
          return [...this._chatCompletions];
        }
        _emitFinal() {
          const completion = this._chatCompletions[this._chatCompletions.length - 1];
          if (completion)
            this._emit("finalChatCompletion", completion);
          const finalMessage = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalMessage).call(this);
          if (finalMessage)
            this._emit("finalMessage", finalMessage);
          const finalContent = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalContent).call(this);
          if (finalContent)
            this._emit("finalContent", finalContent);
          const finalFunctionCall = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);
          if (finalFunctionCall)
            this._emit("finalFunctionCall", finalFunctionCall);
          const finalFunctionCallResult = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);
          if (finalFunctionCallResult != null)
            this._emit("finalFunctionCallResult", finalFunctionCallResult);
          if (this._chatCompletions.some((c) => c.usage)) {
            this._emit("totalUsage", __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));
          }
        }
        async _createChatCompletion(client, params, options) {
          const signal = options?.signal;
          if (signal) {
            if (signal.aborted)
              this.controller.abort();
            signal.addEventListener("abort", () => this.controller.abort());
          }
          __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_validateParams).call(this, params);
          const chatCompletion = await client.chat.completions.create({ ...params, stream: false }, { ...options, signal: this.controller.signal });
          this._connected();
          return this._addChatCompletion((0, parser_1.parseChatCompletion)(chatCompletion, params));
        }
        async _runChatCompletion(client, params, options) {
          for (const message of params.messages) {
            this._addMessage(message, false);
          }
          return await this._createChatCompletion(client, params, options);
        }
        async _runFunctions(client, params, options) {
          const role = "function";
          const { function_call = "auto", stream, ...restParams } = params;
          const singleFunctionToCall = typeof function_call !== "string" && function_call?.name;
          const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};
          const functionsByName = {};
          for (const f of params.functions) {
            functionsByName[f.name || f.function.name] = f;
          }
          const functions = params.functions.map((f) => ({
            name: f.name || f.function.name,
            parameters: f.parameters,
            description: f.description
          }));
          for (const message of params.messages) {
            this._addMessage(message, false);
          }
          for (let i = 0; i < maxChatCompletions; ++i) {
            const chatCompletion = await this._createChatCompletion(client, {
              ...restParams,
              function_call,
              functions,
              messages: [...this.messages]
            }, options);
            const message = chatCompletion.choices[0]?.message;
            if (!message) {
              throw new error_1.OpenAIError(`missing message in ChatCompletion response`);
            }
            if (!message.function_call)
              return;
            const { name, arguments: args } = message.function_call;
            const fn = functionsByName[name];
            if (!fn) {
              const content2 = `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions.map((f) => JSON.stringify(f.name)).join(", ")}. Please try again`;
              this._addMessage({ role, name, content: content2 });
              continue;
            } else if (singleFunctionToCall && singleFunctionToCall !== name) {
              const content2 = `Invalid function_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;
              this._addMessage({ role, name, content: content2 });
              continue;
            }
            let parsed;
            try {
              parsed = (0, RunnableFunction_1.isRunnableFunctionWithParse)(fn) ? await fn.parse(args) : args;
            } catch (error) {
              this._addMessage({
                role,
                name,
                content: error instanceof Error ? error.message : String(error)
              });
              continue;
            }
            const rawContent = await fn.function(parsed, this);
            const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);
            this._addMessage({ role, name, content });
            if (singleFunctionToCall)
              return;
          }
        }
        async _runTools(client, params, options) {
          const role = "tool";
          const { tool_choice = "auto", stream, ...restParams } = params;
          const singleFunctionToCall = typeof tool_choice !== "string" && tool_choice?.function?.name;
          const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};
          const inputTools = params.tools.map((tool) => {
            if ((0, parser_1.isAutoParsableTool)(tool)) {
              if (!tool.$callback) {
                throw new error_1.OpenAIError("Tool given to `.runTools()` that does not have an associated function");
              }
              return {
                type: "function",
                function: {
                  function: tool.$callback,
                  name: tool.function.name,
                  description: tool.function.description || "",
                  parameters: tool.function.parameters,
                  parse: tool.$parseRaw,
                  strict: true
                }
              };
            }
            return tool;
          });
          const functionsByName = {};
          for (const f of inputTools) {
            if (f.type === "function") {
              functionsByName[f.function.name || f.function.function.name] = f.function;
            }
          }
          const tools = "tools" in params ? inputTools.map((t) => t.type === "function" ? {
            type: "function",
            function: {
              name: t.function.name || t.function.function.name,
              parameters: t.function.parameters,
              description: t.function.description,
              strict: t.function.strict
            }
          } : t) : void 0;
          for (const message of params.messages) {
            this._addMessage(message, false);
          }
          for (let i = 0; i < maxChatCompletions; ++i) {
            const chatCompletion = await this._createChatCompletion(client, {
              ...restParams,
              tool_choice,
              tools,
              messages: [...this.messages]
            }, options);
            const message = chatCompletion.choices[0]?.message;
            if (!message) {
              throw new error_1.OpenAIError(`missing message in ChatCompletion response`);
            }
            if (!message.tool_calls?.length) {
              return;
            }
            for (const tool_call of message.tool_calls) {
              if (tool_call.type !== "function")
                continue;
              const tool_call_id = tool_call.id;
              const { name, arguments: args } = tool_call.function;
              const fn = functionsByName[name];
              if (!fn) {
                const content2 = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${Object.keys(functionsByName).map((name2) => JSON.stringify(name2)).join(", ")}. Please try again`;
                this._addMessage({ role, tool_call_id, content: content2 });
                continue;
              } else if (singleFunctionToCall && singleFunctionToCall !== name) {
                const content2 = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;
                this._addMessage({ role, tool_call_id, content: content2 });
                continue;
              }
              let parsed;
              try {
                parsed = (0, RunnableFunction_1.isRunnableFunctionWithParse)(fn) ? await fn.parse(args) : args;
              } catch (error) {
                const content2 = error instanceof Error ? error.message : String(error);
                this._addMessage({ role, tool_call_id, content: content2 });
                continue;
              }
              const rawContent = await fn.function(parsed, this);
              const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);
              this._addMessage({ role, tool_call_id, content });
              if (singleFunctionToCall) {
                return;
              }
            }
          }
          return;
        }
      };
      exports.AbstractChatCompletionRunner = AbstractChatCompletionRunner;
      _AbstractChatCompletionRunner_instances = /* @__PURE__ */ new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent2() {
        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalMessage).call(this).content ?? null;
      }, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage2() {
        let i = this.messages.length;
        while (i-- > 0) {
          const message = this.messages[i];
          if ((0, chatCompletionUtils_1.isAssistantMessage)(message)) {
            const { function_call, ...rest } = message;
            const ret = {
              ...rest,
              content: message.content ?? null,
              refusal: message.refusal ?? null
            };
            if (function_call) {
              ret.function_call = function_call;
            }
            return ret;
          }
        }
        throw new error_1.OpenAIError("stream ended without producing a ChatCompletionMessage with role=assistant");
      }, _AbstractChatCompletionRunner_getFinalFunctionCall = function _AbstractChatCompletionRunner_getFinalFunctionCall2() {
        for (let i = this.messages.length - 1; i >= 0; i--) {
          const message = this.messages[i];
          if ((0, chatCompletionUtils_1.isAssistantMessage)(message) && message?.function_call) {
            return message.function_call;
          }
          if ((0, chatCompletionUtils_1.isAssistantMessage)(message) && message?.tool_calls?.length) {
            return message.tool_calls.at(-1)?.function;
          }
        }
        return;
      }, _AbstractChatCompletionRunner_getFinalFunctionCallResult = function _AbstractChatCompletionRunner_getFinalFunctionCallResult2() {
        for (let i = this.messages.length - 1; i >= 0; i--) {
          const message = this.messages[i];
          if ((0, chatCompletionUtils_1.isFunctionMessage)(message) && message.content != null) {
            return message.content;
          }
          if ((0, chatCompletionUtils_1.isToolMessage)(message) && message.content != null && typeof message.content === "string" && this.messages.some((x) => x.role === "assistant" && x.tool_calls?.some((y) => y.type === "function" && y.id === message.tool_call_id))) {
            return message.content;
          }
        }
        return;
      }, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage2() {
        const total = {
          completion_tokens: 0,
          prompt_tokens: 0,
          total_tokens: 0
        };
        for (const { usage } of this._chatCompletions) {
          if (usage) {
            total.completion_tokens += usage.completion_tokens;
            total.prompt_tokens += usage.prompt_tokens;
            total.total_tokens += usage.total_tokens;
          }
        }
        return total;
      }, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams2(params) {
        if (params.n != null && params.n > 1) {
          throw new error_1.OpenAIError("ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.");
        }
      }, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult2(rawContent) {
        return typeof rawContent === "string" ? rawContent : rawContent === void 0 ? "undefined" : JSON.stringify(rawContent);
      };
    }
  });

  // ../PromptRepository/node_modules/openai/lib/ChatCompletionRunner.js
  var require_ChatCompletionRunner = __commonJS({
    "../PromptRepository/node_modules/openai/lib/ChatCompletionRunner.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ChatCompletionRunner = void 0;
      var AbstractChatCompletionRunner_1 = require_AbstractChatCompletionRunner();
      var chatCompletionUtils_1 = require_chatCompletionUtils();
      var ChatCompletionRunner = class _ChatCompletionRunner extends AbstractChatCompletionRunner_1.AbstractChatCompletionRunner {
        /** @deprecated - please use `runTools` instead. */
        static runFunctions(client, params, options) {
          const runner = new _ChatCompletionRunner();
          const opts = {
            ...options,
            headers: { ...options?.headers, "X-Stainless-Helper-Method": "runFunctions" }
          };
          runner._run(() => runner._runFunctions(client, params, opts));
          return runner;
        }
        static runTools(client, params, options) {
          const runner = new _ChatCompletionRunner();
          const opts = {
            ...options,
            headers: { ...options?.headers, "X-Stainless-Helper-Method": "runTools" }
          };
          runner._run(() => runner._runTools(client, params, opts));
          return runner;
        }
        _addMessage(message, emit = true) {
          super._addMessage(message, emit);
          if ((0, chatCompletionUtils_1.isAssistantMessage)(message) && message.content) {
            this._emit("content", message.content);
          }
        }
      };
      exports.ChatCompletionRunner = ChatCompletionRunner;
    }
  });

  // ../PromptRepository/node_modules/openai/_vendor/partial-json-parser/parser.js
  var require_parser2 = __commonJS({
    "../PromptRepository/node_modules/openai/_vendor/partial-json-parser/parser.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.MalformedJSON = exports.PartialJSON = exports.partialParse = void 0;
      var STR = 1;
      var NUM = 2;
      var ARR = 4;
      var OBJ = 8;
      var NULL = 16;
      var BOOL = 32;
      var NAN = 64;
      var INFINITY = 128;
      var MINUS_INFINITY = 256;
      var INF = INFINITY | MINUS_INFINITY;
      var SPECIAL = NULL | BOOL | INF | NAN;
      var ATOM = STR | NUM | SPECIAL;
      var COLLECTION = ARR | OBJ;
      var ALL = ATOM | COLLECTION;
      var Allow = {
        STR,
        NUM,
        ARR,
        OBJ,
        NULL,
        BOOL,
        NAN,
        INFINITY,
        MINUS_INFINITY,
        INF,
        SPECIAL,
        ATOM,
        COLLECTION,
        ALL
      };
      var PartialJSON = class extends Error {
      };
      exports.PartialJSON = PartialJSON;
      var MalformedJSON = class extends Error {
      };
      exports.MalformedJSON = MalformedJSON;
      function parseJSON(jsonString, allowPartial = Allow.ALL) {
        if (typeof jsonString !== "string") {
          throw new TypeError(`expecting str, got ${typeof jsonString}`);
        }
        if (!jsonString.trim()) {
          throw new Error(`${jsonString} is empty`);
        }
        return _parseJSON(jsonString.trim(), allowPartial);
      }
      var _parseJSON = (jsonString, allow) => {
        const length2 = jsonString.length;
        let index = 0;
        const markPartialJSON = (msg) => {
          throw new PartialJSON(`${msg} at position ${index}`);
        };
        const throwMalformedError = (msg) => {
          throw new MalformedJSON(`${msg} at position ${index}`);
        };
        const parseAny = () => {
          skipBlank();
          if (index >= length2)
            markPartialJSON("Unexpected end of input");
          if (jsonString[index] === '"')
            return parseStr();
          if (jsonString[index] === "{")
            return parseObj();
          if (jsonString[index] === "[")
            return parseArr();
          if (jsonString.substring(index, index + 4) === "null" || Allow.NULL & allow && length2 - index < 4 && "null".startsWith(jsonString.substring(index))) {
            index += 4;
            return null;
          }
          if (jsonString.substring(index, index + 4) === "true" || Allow.BOOL & allow && length2 - index < 4 && "true".startsWith(jsonString.substring(index))) {
            index += 4;
            return true;
          }
          if (jsonString.substring(index, index + 5) === "false" || Allow.BOOL & allow && length2 - index < 5 && "false".startsWith(jsonString.substring(index))) {
            index += 5;
            return false;
          }
          if (jsonString.substring(index, index + 8) === "Infinity" || Allow.INFINITY & allow && length2 - index < 8 && "Infinity".startsWith(jsonString.substring(index))) {
            index += 8;
            return Infinity;
          }
          if (jsonString.substring(index, index + 9) === "-Infinity" || Allow.MINUS_INFINITY & allow && 1 < length2 - index && length2 - index < 9 && "-Infinity".startsWith(jsonString.substring(index))) {
            index += 9;
            return -Infinity;
          }
          if (jsonString.substring(index, index + 3) === "NaN" || Allow.NAN & allow && length2 - index < 3 && "NaN".startsWith(jsonString.substring(index))) {
            index += 3;
            return NaN;
          }
          return parseNum();
        };
        const parseStr = () => {
          const start = index;
          let escape2 = false;
          index++;
          while (index < length2 && (jsonString[index] !== '"' || escape2 && jsonString[index - 1] === "\\")) {
            escape2 = jsonString[index] === "\\" ? !escape2 : false;
            index++;
          }
          if (jsonString.charAt(index) == '"') {
            try {
              return JSON.parse(jsonString.substring(start, ++index - Number(escape2)));
            } catch (e) {
              throwMalformedError(String(e));
            }
          } else if (Allow.STR & allow) {
            try {
              return JSON.parse(jsonString.substring(start, index - Number(escape2)) + '"');
            } catch (e) {
              return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf("\\")) + '"');
            }
          }
          markPartialJSON("Unterminated string literal");
        };
        const parseObj = () => {
          index++;
          skipBlank();
          const obj = {};
          try {
            while (jsonString[index] !== "}") {
              skipBlank();
              if (index >= length2 && Allow.OBJ & allow)
                return obj;
              const key = parseStr();
              skipBlank();
              index++;
              try {
                const value = parseAny();
                Object.defineProperty(obj, key, { value, writable: true, enumerable: true, configurable: true });
              } catch (e) {
                if (Allow.OBJ & allow)
                  return obj;
                else
                  throw e;
              }
              skipBlank();
              if (jsonString[index] === ",")
                index++;
            }
          } catch (e) {
            if (Allow.OBJ & allow)
              return obj;
            else
              markPartialJSON("Expected '}' at end of object");
          }
          index++;
          return obj;
        };
        const parseArr = () => {
          index++;
          const arr = [];
          try {
            while (jsonString[index] !== "]") {
              arr.push(parseAny());
              skipBlank();
              if (jsonString[index] === ",") {
                index++;
              }
            }
          } catch (e) {
            if (Allow.ARR & allow) {
              return arr;
            }
            markPartialJSON("Expected ']' at end of array");
          }
          index++;
          return arr;
        };
        const parseNum = () => {
          if (index === 0) {
            if (jsonString === "-" && Allow.NUM & allow)
              markPartialJSON("Not sure what '-' is");
            try {
              return JSON.parse(jsonString);
            } catch (e) {
              if (Allow.NUM & allow) {
                try {
                  if ("." === jsonString[jsonString.length - 1])
                    return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf(".")));
                  return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf("e")));
                } catch (e2) {
                }
              }
              throwMalformedError(String(e));
            }
          }
          const start = index;
          if (jsonString[index] === "-")
            index++;
          while (jsonString[index] && !",]}".includes(jsonString[index]))
            index++;
          if (index == length2 && !(Allow.NUM & allow))
            markPartialJSON("Unterminated number literal");
          try {
            return JSON.parse(jsonString.substring(start, index));
          } catch (e) {
            if (jsonString.substring(start, index) === "-" && Allow.NUM & allow)
              markPartialJSON("Not sure what '-' is");
            try {
              return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf("e")));
            } catch (e2) {
              throwMalformedError(String(e2));
            }
          }
        };
        const skipBlank = () => {
          while (index < length2 && " \n\r	".includes(jsonString[index])) {
            index++;
          }
        };
        return parseAny();
      };
      var partialParse = (input) => parseJSON(input, Allow.ALL ^ Allow.NUM);
      exports.partialParse = partialParse;
    }
  });

  // ../PromptRepository/node_modules/openai/lib/ChatCompletionStream.js
  var require_ChatCompletionStream = __commonJS({
    "../PromptRepository/node_modules/openai/lib/ChatCompletionStream.js"(exports) {
      "use strict";
      var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      var _ChatCompletionStream_instances;
      var _ChatCompletionStream_params;
      var _ChatCompletionStream_choiceEventStates;
      var _ChatCompletionStream_currentChatCompletionSnapshot;
      var _ChatCompletionStream_beginRequest;
      var _ChatCompletionStream_getChoiceEventState;
      var _ChatCompletionStream_addChunk;
      var _ChatCompletionStream_emitToolCallDoneEvent;
      var _ChatCompletionStream_emitContentDoneEvents;
      var _ChatCompletionStream_endRequest;
      var _ChatCompletionStream_getAutoParseableResponseFormat;
      var _ChatCompletionStream_accumulateChatCompletion;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ChatCompletionStream = void 0;
      var error_1 = require_error();
      var AbstractChatCompletionRunner_1 = require_AbstractChatCompletionRunner();
      var streaming_1 = require_streaming();
      var parser_1 = require_parser();
      var parser_2 = require_parser2();
      var ChatCompletionStream = class _ChatCompletionStream extends AbstractChatCompletionRunner_1.AbstractChatCompletionRunner {
        constructor(params) {
          super();
          _ChatCompletionStream_instances.add(this);
          _ChatCompletionStream_params.set(this, void 0);
          _ChatCompletionStream_choiceEventStates.set(this, void 0);
          _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);
          __classPrivateFieldSet(this, _ChatCompletionStream_params, params, "f");
          __classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], "f");
        }
        get currentChatCompletionSnapshot() {
          return __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, "f");
        }
        /**
         * Intended for use on the frontend, consuming a stream produced with
         * `.toReadableStream()` on the backend.
         *
         * Note that messages sent to the model do not appear in `.on('message')`
         * in this context.
         */
        static fromReadableStream(stream) {
          const runner = new _ChatCompletionStream(null);
          runner._run(() => runner._fromReadableStream(stream));
          return runner;
        }
        static createChatCompletion(client, params, options) {
          const runner = new _ChatCompletionStream(params);
          runner._run(() => runner._runChatCompletion(client, { ...params, stream: true }, { ...options, headers: { ...options?.headers, "X-Stainless-Helper-Method": "stream" } }));
          return runner;
        }
        async _createChatCompletion(client, params, options) {
          super._createChatCompletion;
          const signal = options?.signal;
          if (signal) {
            if (signal.aborted)
              this.controller.abort();
            signal.addEventListener("abort", () => this.controller.abort());
          }
          __classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_beginRequest).call(this);
          const stream = await client.chat.completions.create({ ...params, stream: true }, { ...options, signal: this.controller.signal });
          this._connected();
          for await (const chunk of stream) {
            __classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_addChunk).call(this, chunk);
          }
          if (stream.controller.signal?.aborted) {
            throw new error_1.APIUserAbortError();
          }
          return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_endRequest).call(this));
        }
        async _fromReadableStream(readableStream, options) {
          const signal = options?.signal;
          if (signal) {
            if (signal.aborted)
              this.controller.abort();
            signal.addEventListener("abort", () => this.controller.abort());
          }
          __classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_beginRequest).call(this);
          this._connected();
          const stream = streaming_1.Stream.fromReadableStream(readableStream, this.controller);
          let chatId;
          for await (const chunk of stream) {
            if (chatId && chatId !== chunk.id) {
              this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_endRequest).call(this));
            }
            __classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_addChunk).call(this, chunk);
            chatId = chunk.id;
          }
          if (stream.controller.signal?.aborted) {
            throw new error_1.APIUserAbortError();
          }
          return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_endRequest).call(this));
        }
        [(_ChatCompletionStream_params = /* @__PURE__ */ new WeakMap(), _ChatCompletionStream_choiceEventStates = /* @__PURE__ */ new WeakMap(), _ChatCompletionStream_currentChatCompletionSnapshot = /* @__PURE__ */ new WeakMap(), _ChatCompletionStream_instances = /* @__PURE__ */ new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest2() {
          if (this.ended)
            return;
          __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, void 0, "f");
        }, _ChatCompletionStream_getChoiceEventState = function _ChatCompletionStream_getChoiceEventState2(choice) {
          let state = __classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, "f")[choice.index];
          if (state) {
            return state;
          }
          state = {
            content_done: false,
            refusal_done: false,
            logprobs_content_done: false,
            logprobs_refusal_done: false,
            done_tool_calls: /* @__PURE__ */ new Set(),
            current_tool_call_index: null
          };
          __classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, "f")[choice.index] = state;
          return state;
        }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk2(chunk) {
          if (this.ended)
            return;
          const completion = __classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);
          this._emit("chunk", chunk, completion);
          for (const choice of chunk.choices) {
            const choiceSnapshot = completion.choices[choice.index];
            if (choice.delta.content != null && choiceSnapshot.message?.role === "assistant" && choiceSnapshot.message?.content) {
              this._emit("content", choice.delta.content, choiceSnapshot.message.content);
              this._emit("content.delta", {
                delta: choice.delta.content,
                snapshot: choiceSnapshot.message.content,
                parsed: choiceSnapshot.message.parsed
              });
            }
            if (choice.delta.refusal != null && choiceSnapshot.message?.role === "assistant" && choiceSnapshot.message?.refusal) {
              this._emit("refusal.delta", {
                delta: choice.delta.refusal,
                snapshot: choiceSnapshot.message.refusal
              });
            }
            if (choice.logprobs?.content != null && choiceSnapshot.message?.role === "assistant") {
              this._emit("logprobs.content.delta", {
                content: choice.logprobs?.content,
                snapshot: choiceSnapshot.logprobs?.content ?? []
              });
            }
            if (choice.logprobs?.refusal != null && choiceSnapshot.message?.role === "assistant") {
              this._emit("logprobs.refusal.delta", {
                refusal: choice.logprobs?.refusal,
                snapshot: choiceSnapshot.logprobs?.refusal ?? []
              });
            }
            const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);
            if (choiceSnapshot.finish_reason) {
              __classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);
              if (state.current_tool_call_index != null) {
                __classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);
              }
            }
            for (const toolCall of choice.delta.tool_calls ?? []) {
              if (state.current_tool_call_index !== toolCall.index) {
                __classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);
                if (state.current_tool_call_index != null) {
                  __classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);
                }
              }
              state.current_tool_call_index = toolCall.index;
            }
            for (const toolCallDelta of choice.delta.tool_calls ?? []) {
              const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallDelta.index];
              if (!toolCallSnapshot?.type) {
                continue;
              }
              if (toolCallSnapshot?.type === "function") {
                this._emit("tool_calls.function.arguments.delta", {
                  name: toolCallSnapshot.function?.name,
                  index: toolCallDelta.index,
                  arguments: toolCallSnapshot.function.arguments,
                  parsed_arguments: toolCallSnapshot.function.parsed_arguments,
                  arguments_delta: toolCallDelta.function?.arguments ?? ""
                });
              } else {
                assertNever(toolCallSnapshot?.type);
              }
            }
          }
        }, _ChatCompletionStream_emitToolCallDoneEvent = function _ChatCompletionStream_emitToolCallDoneEvent2(choiceSnapshot, toolCallIndex) {
          const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);
          if (state.done_tool_calls.has(toolCallIndex)) {
            return;
          }
          const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallIndex];
          if (!toolCallSnapshot) {
            throw new Error("no tool call snapshot");
          }
          if (!toolCallSnapshot.type) {
            throw new Error("tool call snapshot missing `type`");
          }
          if (toolCallSnapshot.type === "function") {
            const inputTool = __classPrivateFieldGet(this, _ChatCompletionStream_params, "f")?.tools?.find((tool) => tool.type === "function" && tool.function.name === toolCallSnapshot.function.name);
            this._emit("tool_calls.function.arguments.done", {
              name: toolCallSnapshot.function.name,
              index: toolCallIndex,
              arguments: toolCallSnapshot.function.arguments,
              parsed_arguments: (0, parser_1.isAutoParsableTool)(inputTool) ? inputTool.$parseRaw(toolCallSnapshot.function.arguments) : inputTool?.function.strict ? JSON.parse(toolCallSnapshot.function.arguments) : null
            });
          } else {
            assertNever(toolCallSnapshot.type);
          }
        }, _ChatCompletionStream_emitContentDoneEvents = function _ChatCompletionStream_emitContentDoneEvents2(choiceSnapshot) {
          const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);
          if (choiceSnapshot.message.content && !state.content_done) {
            state.content_done = true;
            const responseFormat = __classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_getAutoParseableResponseFormat).call(this);
            this._emit("content.done", {
              content: choiceSnapshot.message.content,
              parsed: responseFormat ? responseFormat.$parseRaw(choiceSnapshot.message.content) : null
            });
          }
          if (choiceSnapshot.message.refusal && !state.refusal_done) {
            state.refusal_done = true;
            this._emit("refusal.done", { refusal: choiceSnapshot.message.refusal });
          }
          if (choiceSnapshot.logprobs?.content && !state.logprobs_content_done) {
            state.logprobs_content_done = true;
            this._emit("logprobs.content.done", { content: choiceSnapshot.logprobs.content });
          }
          if (choiceSnapshot.logprobs?.refusal && !state.logprobs_refusal_done) {
            state.logprobs_refusal_done = true;
            this._emit("logprobs.refusal.done", { refusal: choiceSnapshot.logprobs.refusal });
          }
        }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest2() {
          if (this.ended) {
            throw new error_1.OpenAIError(`stream has ended, this shouldn't happen`);
          }
          const snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, "f");
          if (!snapshot) {
            throw new error_1.OpenAIError(`request ended without sending any chunks`);
          }
          __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, void 0, "f");
          __classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], "f");
          return finalizeChatCompletion(snapshot, __classPrivateFieldGet(this, _ChatCompletionStream_params, "f"));
        }, _ChatCompletionStream_getAutoParseableResponseFormat = function _ChatCompletionStream_getAutoParseableResponseFormat2() {
          const responseFormat = __classPrivateFieldGet(this, _ChatCompletionStream_params, "f")?.response_format;
          if ((0, parser_1.isAutoParsableResponseFormat)(responseFormat)) {
            return responseFormat;
          }
          return null;
        }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion2(chunk) {
          var _a, _b, _c, _d;
          let snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, "f");
          const { choices, ...rest } = chunk;
          if (!snapshot) {
            snapshot = __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, {
              ...rest,
              choices: []
            }, "f");
          } else {
            Object.assign(snapshot, rest);
          }
          for (const { delta, finish_reason, index, logprobs = null, ...other } of chunk.choices) {
            let choice = snapshot.choices[index];
            if (!choice) {
              choice = snapshot.choices[index] = { finish_reason, index, message: {}, logprobs, ...other };
            }
            if (logprobs) {
              if (!choice.logprobs) {
                choice.logprobs = Object.assign({}, logprobs);
              } else {
                const { content: content2, refusal: refusal2, ...rest3 } = logprobs;
                assertIsEmpty(rest3);
                Object.assign(choice.logprobs, rest3);
                if (content2) {
                  (_a = choice.logprobs).content ?? (_a.content = []);
                  choice.logprobs.content.push(...content2);
                }
                if (refusal2) {
                  (_b = choice.logprobs).refusal ?? (_b.refusal = []);
                  choice.logprobs.refusal.push(...refusal2);
                }
              }
            }
            if (finish_reason) {
              choice.finish_reason = finish_reason;
              if (__classPrivateFieldGet(this, _ChatCompletionStream_params, "f") && (0, parser_1.hasAutoParseableInput)(__classPrivateFieldGet(this, _ChatCompletionStream_params, "f"))) {
                if (finish_reason === "length") {
                  throw new error_1.LengthFinishReasonError();
                }
                if (finish_reason === "content_filter") {
                  throw new error_1.ContentFilterFinishReasonError();
                }
              }
            }
            Object.assign(choice, other);
            if (!delta)
              continue;
            const { content, refusal, function_call, role, tool_calls, ...rest2 } = delta;
            assertIsEmpty(rest2);
            Object.assign(choice.message, rest2);
            if (refusal) {
              choice.message.refusal = (choice.message.refusal || "") + refusal;
            }
            if (role)
              choice.message.role = role;
            if (function_call) {
              if (!choice.message.function_call) {
                choice.message.function_call = function_call;
              } else {
                if (function_call.name)
                  choice.message.function_call.name = function_call.name;
                if (function_call.arguments) {
                  (_c = choice.message.function_call).arguments ?? (_c.arguments = "");
                  choice.message.function_call.arguments += function_call.arguments;
                }
              }
            }
            if (content) {
              choice.message.content = (choice.message.content || "") + content;
              if (!choice.message.refusal && __classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_getAutoParseableResponseFormat).call(this)) {
                choice.message.parsed = (0, parser_2.partialParse)(choice.message.content);
              }
            }
            if (tool_calls) {
              if (!choice.message.tool_calls)
                choice.message.tool_calls = [];
              for (const { index: index2, id, type, function: fn, ...rest3 } of tool_calls) {
                const tool_call = (_d = choice.message.tool_calls)[index2] ?? (_d[index2] = {});
                Object.assign(tool_call, rest3);
                if (id)
                  tool_call.id = id;
                if (type)
                  tool_call.type = type;
                if (fn)
                  tool_call.function ?? (tool_call.function = { name: fn.name ?? "", arguments: "" });
                if (fn?.name)
                  tool_call.function.name = fn.name;
                if (fn?.arguments) {
                  tool_call.function.arguments += fn.arguments;
                  if ((0, parser_1.shouldParseToolCall)(__classPrivateFieldGet(this, _ChatCompletionStream_params, "f"), tool_call)) {
                    tool_call.function.parsed_arguments = (0, parser_2.partialParse)(tool_call.function.arguments);
                  }
                }
              }
            }
          }
          return snapshot;
        }, Symbol.asyncIterator)]() {
          const pushQueue = [];
          const readQueue = [];
          let done = false;
          this.on("chunk", (chunk) => {
            const reader = readQueue.shift();
            if (reader) {
              reader.resolve(chunk);
            } else {
              pushQueue.push(chunk);
            }
          });
          this.on("end", () => {
            done = true;
            for (const reader of readQueue) {
              reader.resolve(void 0);
            }
            readQueue.length = 0;
          });
          this.on("abort", (err) => {
            done = true;
            for (const reader of readQueue) {
              reader.reject(err);
            }
            readQueue.length = 0;
          });
          this.on("error", (err) => {
            done = true;
            for (const reader of readQueue) {
              reader.reject(err);
            }
            readQueue.length = 0;
          });
          return {
            next: async () => {
              if (!pushQueue.length) {
                if (done) {
                  return { value: void 0, done: true };
                }
                return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk2) => chunk2 ? { value: chunk2, done: false } : { value: void 0, done: true });
              }
              const chunk = pushQueue.shift();
              return { value: chunk, done: false };
            },
            return: async () => {
              this.abort();
              return { value: void 0, done: true };
            }
          };
        }
        toReadableStream() {
          const stream = new streaming_1.Stream(this[Symbol.asyncIterator].bind(this), this.controller);
          return stream.toReadableStream();
        }
      };
      exports.ChatCompletionStream = ChatCompletionStream;
      function finalizeChatCompletion(snapshot, params) {
        const { id, choices, created, model, system_fingerprint, ...rest } = snapshot;
        const completion = {
          ...rest,
          id,
          choices: choices.map(({ message, finish_reason, index, logprobs, ...choiceRest }) => {
            if (!finish_reason) {
              throw new error_1.OpenAIError(`missing finish_reason for choice ${index}`);
            }
            const { content = null, function_call, tool_calls, ...messageRest } = message;
            const role = message.role;
            if (!role) {
              throw new error_1.OpenAIError(`missing role for choice ${index}`);
            }
            if (function_call) {
              const { arguments: args, name } = function_call;
              if (args == null) {
                throw new error_1.OpenAIError(`missing function_call.arguments for choice ${index}`);
              }
              if (!name) {
                throw new error_1.OpenAIError(`missing function_call.name for choice ${index}`);
              }
              return {
                ...choiceRest,
                message: {
                  content,
                  function_call: { arguments: args, name },
                  role,
                  refusal: message.refusal ?? null
                },
                finish_reason,
                index,
                logprobs
              };
            }
            if (tool_calls) {
              return {
                ...choiceRest,
                index,
                finish_reason,
                logprobs,
                message: {
                  ...messageRest,
                  role,
                  content,
                  refusal: message.refusal ?? null,
                  tool_calls: tool_calls.map((tool_call, i) => {
                    const { function: fn, type, id: id2, ...toolRest } = tool_call;
                    const { arguments: args, name, ...fnRest } = fn || {};
                    if (id2 == null) {
                      throw new error_1.OpenAIError(`missing choices[${index}].tool_calls[${i}].id
${str(snapshot)}`);
                    }
                    if (type == null) {
                      throw new error_1.OpenAIError(`missing choices[${index}].tool_calls[${i}].type
${str(snapshot)}`);
                    }
                    if (name == null) {
                      throw new error_1.OpenAIError(`missing choices[${index}].tool_calls[${i}].function.name
${str(snapshot)}`);
                    }
                    if (args == null) {
                      throw new error_1.OpenAIError(`missing choices[${index}].tool_calls[${i}].function.arguments
${str(snapshot)}`);
                    }
                    return { ...toolRest, id: id2, type, function: { ...fnRest, name, arguments: args } };
                  })
                }
              };
            }
            return {
              ...choiceRest,
              message: { ...messageRest, content, role, refusal: message.refusal ?? null },
              finish_reason,
              index,
              logprobs
            };
          }),
          created,
          model,
          object: "chat.completion",
          ...system_fingerprint ? { system_fingerprint } : {}
        };
        return (0, parser_1.maybeParseChatCompletion)(completion, params);
      }
      function str(x) {
        return JSON.stringify(x);
      }
      function assertIsEmpty(obj) {
        return;
      }
      function assertNever(_x) {
      }
    }
  });

  // ../PromptRepository/node_modules/openai/lib/ChatCompletionStreamingRunner.js
  var require_ChatCompletionStreamingRunner = __commonJS({
    "../PromptRepository/node_modules/openai/lib/ChatCompletionStreamingRunner.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ChatCompletionStreamingRunner = void 0;
      var ChatCompletionStream_1 = require_ChatCompletionStream();
      var ChatCompletionStreamingRunner = class _ChatCompletionStreamingRunner extends ChatCompletionStream_1.ChatCompletionStream {
        static fromReadableStream(stream) {
          const runner = new _ChatCompletionStreamingRunner(null);
          runner._run(() => runner._fromReadableStream(stream));
          return runner;
        }
        /** @deprecated - please use `runTools` instead. */
        static runFunctions(client, params, options) {
          const runner = new _ChatCompletionStreamingRunner(null);
          const opts = {
            ...options,
            headers: { ...options?.headers, "X-Stainless-Helper-Method": "runFunctions" }
          };
          runner._run(() => runner._runFunctions(client, params, opts));
          return runner;
        }
        static runTools(client, params, options) {
          const runner = new _ChatCompletionStreamingRunner(
            // @ts-expect-error TODO these types are incompatible
            params
          );
          const opts = {
            ...options,
            headers: { ...options?.headers, "X-Stainless-Helper-Method": "runTools" }
          };
          runner._run(() => runner._runTools(client, params, opts));
          return runner;
        }
      };
      exports.ChatCompletionStreamingRunner = ChatCompletionStreamingRunner;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/beta/chat/completions.js
  var require_completions3 = __commonJS({
    "../PromptRepository/node_modules/openai/resources/beta/chat/completions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Completions = exports.ChatCompletionRunner = exports.ChatCompletionStream = exports.ParsingToolFunction = exports.ParsingFunction = exports.ChatCompletionStreamingRunner = void 0;
      var resource_1 = require_resource();
      var ChatCompletionRunner_1 = require_ChatCompletionRunner();
      var ChatCompletionStreamingRunner_1 = require_ChatCompletionStreamingRunner();
      var ChatCompletionStream_1 = require_ChatCompletionStream();
      var parser_1 = require_parser();
      var ChatCompletionStreamingRunner_2 = require_ChatCompletionStreamingRunner();
      Object.defineProperty(exports, "ChatCompletionStreamingRunner", { enumerable: true, get: function() {
        return ChatCompletionStreamingRunner_2.ChatCompletionStreamingRunner;
      } });
      var RunnableFunction_1 = require_RunnableFunction();
      Object.defineProperty(exports, "ParsingFunction", { enumerable: true, get: function() {
        return RunnableFunction_1.ParsingFunction;
      } });
      Object.defineProperty(exports, "ParsingToolFunction", { enumerable: true, get: function() {
        return RunnableFunction_1.ParsingToolFunction;
      } });
      var ChatCompletionStream_2 = require_ChatCompletionStream();
      Object.defineProperty(exports, "ChatCompletionStream", { enumerable: true, get: function() {
        return ChatCompletionStream_2.ChatCompletionStream;
      } });
      var ChatCompletionRunner_2 = require_ChatCompletionRunner();
      Object.defineProperty(exports, "ChatCompletionRunner", { enumerable: true, get: function() {
        return ChatCompletionRunner_2.ChatCompletionRunner;
      } });
      var Completions = class extends resource_1.APIResource {
        parse(body, options) {
          (0, parser_1.validateInputTools)(body.tools);
          return this._client.chat.completions.create(body, {
            ...options,
            headers: {
              ...options?.headers,
              "X-Stainless-Helper-Method": "beta.chat.completions.parse"
            }
          })._thenUnwrap((completion) => (0, parser_1.parseChatCompletion)(completion, body));
        }
        runFunctions(body, options) {
          if (body.stream) {
            return ChatCompletionStreamingRunner_1.ChatCompletionStreamingRunner.runFunctions(this._client, body, options);
          }
          return ChatCompletionRunner_1.ChatCompletionRunner.runFunctions(this._client, body, options);
        }
        runTools(body, options) {
          if (body.stream) {
            return ChatCompletionStreamingRunner_1.ChatCompletionStreamingRunner.runTools(this._client, body, options);
          }
          return ChatCompletionRunner_1.ChatCompletionRunner.runTools(this._client, body, options);
        }
        /**
         * Creates a chat completion stream
         */
        stream(body, options) {
          return ChatCompletionStream_1.ChatCompletionStream.createChatCompletion(this._client, body, options);
        }
      };
      exports.Completions = Completions;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/beta/chat/chat.js
  var require_chat3 = __commonJS({
    "../PromptRepository/node_modules/openai/resources/beta/chat/chat.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Chat = void 0;
      var resource_1 = require_resource();
      var CompletionsAPI = __importStar(require_completions3());
      var Chat = class extends resource_1.APIResource {
        constructor() {
          super(...arguments);
          this.completions = new CompletionsAPI.Completions(this._client);
        }
      };
      exports.Chat = Chat;
      (function(Chat2) {
        Chat2.Completions = CompletionsAPI.Completions;
      })(Chat = exports.Chat || (exports.Chat = {}));
    }
  });

  // ../PromptRepository/node_modules/openai/resources/beta/realtime/sessions.js
  var require_sessions = __commonJS({
    "../PromptRepository/node_modules/openai/resources/beta/realtime/sessions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Sessions = void 0;
      var resource_1 = require_resource();
      var Sessions = class extends resource_1.APIResource {
        /**
         * Create an ephemeral API token for use in client-side applications with the
         * Realtime API. Can be configured with the same session parameters as the
         * `session.update` client event.
         *
         * It responds with a session object, plus a `client_secret` key which contains a
         * usable ephemeral API token that can be used to authenticate browser clients for
         * the Realtime API.
         */
        create(body, options) {
          return this._client.post("/realtime/sessions", {
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
      };
      exports.Sessions = Sessions;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/beta/realtime/transcription-sessions.js
  var require_transcription_sessions = __commonJS({
    "../PromptRepository/node_modules/openai/resources/beta/realtime/transcription-sessions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TranscriptionSessions = void 0;
      var resource_1 = require_resource();
      var TranscriptionSessions = class extends resource_1.APIResource {
        /**
         * Create an ephemeral API token for use in client-side applications with the
         * Realtime API specifically for realtime transcriptions. Can be configured with
         * the same session parameters as the `transcription_session.update` client event.
         *
         * It responds with a session object, plus a `client_secret` key which contains a
         * usable ephemeral API token that can be used to authenticate browser clients for
         * the Realtime API.
         */
        create(body, options) {
          return this._client.post("/realtime/transcription_sessions", {
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
      };
      exports.TranscriptionSessions = TranscriptionSessions;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/beta/realtime/realtime.js
  var require_realtime = __commonJS({
    "../PromptRepository/node_modules/openai/resources/beta/realtime/realtime.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Realtime = void 0;
      var resource_1 = require_resource();
      var SessionsAPI = __importStar(require_sessions());
      var sessions_1 = require_sessions();
      var TranscriptionSessionsAPI = __importStar(require_transcription_sessions());
      var transcription_sessions_1 = require_transcription_sessions();
      var Realtime = class extends resource_1.APIResource {
        constructor() {
          super(...arguments);
          this.sessions = new SessionsAPI.Sessions(this._client);
          this.transcriptionSessions = new TranscriptionSessionsAPI.TranscriptionSessions(this._client);
        }
      };
      exports.Realtime = Realtime;
      Realtime.Sessions = sessions_1.Sessions;
      Realtime.TranscriptionSessions = transcription_sessions_1.TranscriptionSessions;
    }
  });

  // ../PromptRepository/node_modules/openai/lib/AssistantStream.js
  var require_AssistantStream = __commonJS({
    "../PromptRepository/node_modules/openai/lib/AssistantStream.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      var _AssistantStream_instances;
      var _AssistantStream_events;
      var _AssistantStream_runStepSnapshots;
      var _AssistantStream_messageSnapshots;
      var _AssistantStream_messageSnapshot;
      var _AssistantStream_finalRun;
      var _AssistantStream_currentContentIndex;
      var _AssistantStream_currentContent;
      var _AssistantStream_currentToolCallIndex;
      var _AssistantStream_currentToolCall;
      var _AssistantStream_currentEvent;
      var _AssistantStream_currentRunSnapshot;
      var _AssistantStream_currentRunStepSnapshot;
      var _AssistantStream_addEvent;
      var _AssistantStream_endRequest;
      var _AssistantStream_handleMessage;
      var _AssistantStream_handleRunStep;
      var _AssistantStream_handleEvent;
      var _AssistantStream_accumulateRunStep;
      var _AssistantStream_accumulateMessage;
      var _AssistantStream_accumulateContent;
      var _AssistantStream_handleRun;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AssistantStream = void 0;
      var Core = __importStar(require_core());
      var streaming_1 = require_streaming();
      var error_1 = require_error();
      var EventStream_1 = require_EventStream();
      var AssistantStream = class _AssistantStream extends EventStream_1.EventStream {
        constructor() {
          super(...arguments);
          _AssistantStream_instances.add(this);
          _AssistantStream_events.set(this, []);
          _AssistantStream_runStepSnapshots.set(this, {});
          _AssistantStream_messageSnapshots.set(this, {});
          _AssistantStream_messageSnapshot.set(this, void 0);
          _AssistantStream_finalRun.set(this, void 0);
          _AssistantStream_currentContentIndex.set(this, void 0);
          _AssistantStream_currentContent.set(this, void 0);
          _AssistantStream_currentToolCallIndex.set(this, void 0);
          _AssistantStream_currentToolCall.set(this, void 0);
          _AssistantStream_currentEvent.set(this, void 0);
          _AssistantStream_currentRunSnapshot.set(this, void 0);
          _AssistantStream_currentRunStepSnapshot.set(this, void 0);
        }
        [(_AssistantStream_events = /* @__PURE__ */ new WeakMap(), _AssistantStream_runStepSnapshots = /* @__PURE__ */ new WeakMap(), _AssistantStream_messageSnapshots = /* @__PURE__ */ new WeakMap(), _AssistantStream_messageSnapshot = /* @__PURE__ */ new WeakMap(), _AssistantStream_finalRun = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentContentIndex = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentContent = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentToolCallIndex = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentToolCall = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentEvent = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentRunSnapshot = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentRunStepSnapshot = /* @__PURE__ */ new WeakMap(), _AssistantStream_instances = /* @__PURE__ */ new WeakSet(), Symbol.asyncIterator)]() {
          const pushQueue = [];
          const readQueue = [];
          let done = false;
          this.on("event", (event) => {
            const reader = readQueue.shift();
            if (reader) {
              reader.resolve(event);
            } else {
              pushQueue.push(event);
            }
          });
          this.on("end", () => {
            done = true;
            for (const reader of readQueue) {
              reader.resolve(void 0);
            }
            readQueue.length = 0;
          });
          this.on("abort", (err) => {
            done = true;
            for (const reader of readQueue) {
              reader.reject(err);
            }
            readQueue.length = 0;
          });
          this.on("error", (err) => {
            done = true;
            for (const reader of readQueue) {
              reader.reject(err);
            }
            readQueue.length = 0;
          });
          return {
            next: async () => {
              if (!pushQueue.length) {
                if (done) {
                  return { value: void 0, done: true };
                }
                return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk2) => chunk2 ? { value: chunk2, done: false } : { value: void 0, done: true });
              }
              const chunk = pushQueue.shift();
              return { value: chunk, done: false };
            },
            return: async () => {
              this.abort();
              return { value: void 0, done: true };
            }
          };
        }
        static fromReadableStream(stream) {
          const runner = new _AssistantStream();
          runner._run(() => runner._fromReadableStream(stream));
          return runner;
        }
        async _fromReadableStream(readableStream, options) {
          const signal = options?.signal;
          if (signal) {
            if (signal.aborted)
              this.controller.abort();
            signal.addEventListener("abort", () => this.controller.abort());
          }
          this._connected();
          const stream = streaming_1.Stream.fromReadableStream(readableStream, this.controller);
          for await (const event of stream) {
            __classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_addEvent).call(this, event);
          }
          if (stream.controller.signal?.aborted) {
            throw new error_1.APIUserAbortError();
          }
          return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_endRequest).call(this));
        }
        toReadableStream() {
          const stream = new streaming_1.Stream(this[Symbol.asyncIterator].bind(this), this.controller);
          return stream.toReadableStream();
        }
        static createToolAssistantStream(threadId, runId, runs, params, options) {
          const runner = new _AssistantStream();
          runner._run(() => runner._runToolAssistantStream(threadId, runId, runs, params, {
            ...options,
            headers: { ...options?.headers, "X-Stainless-Helper-Method": "stream" }
          }));
          return runner;
        }
        async _createToolAssistantStream(run, threadId, runId, params, options) {
          const signal = options?.signal;
          if (signal) {
            if (signal.aborted)
              this.controller.abort();
            signal.addEventListener("abort", () => this.controller.abort());
          }
          const body = { ...params, stream: true };
          const stream = await run.submitToolOutputs(threadId, runId, body, {
            ...options,
            signal: this.controller.signal
          });
          this._connected();
          for await (const event of stream) {
            __classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_addEvent).call(this, event);
          }
          if (stream.controller.signal?.aborted) {
            throw new error_1.APIUserAbortError();
          }
          return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_endRequest).call(this));
        }
        static createThreadAssistantStream(params, thread, options) {
          const runner = new _AssistantStream();
          runner._run(() => runner._threadAssistantStream(params, thread, {
            ...options,
            headers: { ...options?.headers, "X-Stainless-Helper-Method": "stream" }
          }));
          return runner;
        }
        static createAssistantStream(threadId, runs, params, options) {
          const runner = new _AssistantStream();
          runner._run(() => runner._runAssistantStream(threadId, runs, params, {
            ...options,
            headers: { ...options?.headers, "X-Stainless-Helper-Method": "stream" }
          }));
          return runner;
        }
        currentEvent() {
          return __classPrivateFieldGet(this, _AssistantStream_currentEvent, "f");
        }
        currentRun() {
          return __classPrivateFieldGet(this, _AssistantStream_currentRunSnapshot, "f");
        }
        currentMessageSnapshot() {
          return __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, "f");
        }
        currentRunStepSnapshot() {
          return __classPrivateFieldGet(this, _AssistantStream_currentRunStepSnapshot, "f");
        }
        async finalRunSteps() {
          await this.done();
          return Object.values(__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, "f"));
        }
        async finalMessages() {
          await this.done();
          return Object.values(__classPrivateFieldGet(this, _AssistantStream_messageSnapshots, "f"));
        }
        async finalRun() {
          await this.done();
          if (!__classPrivateFieldGet(this, _AssistantStream_finalRun, "f"))
            throw Error("Final run was not received.");
          return __classPrivateFieldGet(this, _AssistantStream_finalRun, "f");
        }
        async _createThreadAssistantStream(thread, params, options) {
          const signal = options?.signal;
          if (signal) {
            if (signal.aborted)
              this.controller.abort();
            signal.addEventListener("abort", () => this.controller.abort());
          }
          const body = { ...params, stream: true };
          const stream = await thread.createAndRun(body, { ...options, signal: this.controller.signal });
          this._connected();
          for await (const event of stream) {
            __classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_addEvent).call(this, event);
          }
          if (stream.controller.signal?.aborted) {
            throw new error_1.APIUserAbortError();
          }
          return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_endRequest).call(this));
        }
        async _createAssistantStream(run, threadId, params, options) {
          const signal = options?.signal;
          if (signal) {
            if (signal.aborted)
              this.controller.abort();
            signal.addEventListener("abort", () => this.controller.abort());
          }
          const body = { ...params, stream: true };
          const stream = await run.create(threadId, body, { ...options, signal: this.controller.signal });
          this._connected();
          for await (const event of stream) {
            __classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_addEvent).call(this, event);
          }
          if (stream.controller.signal?.aborted) {
            throw new error_1.APIUserAbortError();
          }
          return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_endRequest).call(this));
        }
        static accumulateDelta(acc, delta) {
          for (const [key, deltaValue] of Object.entries(delta)) {
            if (!acc.hasOwnProperty(key)) {
              acc[key] = deltaValue;
              continue;
            }
            let accValue = acc[key];
            if (accValue === null || accValue === void 0) {
              acc[key] = deltaValue;
              continue;
            }
            if (key === "index" || key === "type") {
              acc[key] = deltaValue;
              continue;
            }
            if (typeof accValue === "string" && typeof deltaValue === "string") {
              accValue += deltaValue;
            } else if (typeof accValue === "number" && typeof deltaValue === "number") {
              accValue += deltaValue;
            } else if (Core.isObj(accValue) && Core.isObj(deltaValue)) {
              accValue = this.accumulateDelta(accValue, deltaValue);
            } else if (Array.isArray(accValue) && Array.isArray(deltaValue)) {
              if (accValue.every((x) => typeof x === "string" || typeof x === "number")) {
                accValue.push(...deltaValue);
                continue;
              }
              for (const deltaEntry of deltaValue) {
                if (!Core.isObj(deltaEntry)) {
                  throw new Error(`Expected array delta entry to be an object but got: ${deltaEntry}`);
                }
                const index = deltaEntry["index"];
                if (index == null) {
                  console.error(deltaEntry);
                  throw new Error("Expected array delta entry to have an `index` property");
                }
                if (typeof index !== "number") {
                  throw new Error(`Expected array delta entry \`index\` property to be a number but got ${index}`);
                }
                const accEntry = accValue[index];
                if (accEntry == null) {
                  accValue.push(deltaEntry);
                } else {
                  accValue[index] = this.accumulateDelta(accEntry, deltaEntry);
                }
              }
              continue;
            } else {
              throw Error(`Unhandled record type: ${key}, deltaValue: ${deltaValue}, accValue: ${accValue}`);
            }
            acc[key] = accValue;
          }
          return acc;
        }
        _addRun(run) {
          return run;
        }
        async _threadAssistantStream(params, thread, options) {
          return await this._createThreadAssistantStream(thread, params, options);
        }
        async _runAssistantStream(threadId, runs, params, options) {
          return await this._createAssistantStream(runs, threadId, params, options);
        }
        async _runToolAssistantStream(threadId, runId, runs, params, options) {
          return await this._createToolAssistantStream(runs, threadId, runId, params, options);
        }
      };
      exports.AssistantStream = AssistantStream;
      _AssistantStream_addEvent = function _AssistantStream_addEvent2(event) {
        if (this.ended)
          return;
        __classPrivateFieldSet(this, _AssistantStream_currentEvent, event, "f");
        __classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_handleEvent).call(this, event);
        switch (event.event) {
          case "thread.created":
            break;
          case "thread.run.created":
          case "thread.run.queued":
          case "thread.run.in_progress":
          case "thread.run.requires_action":
          case "thread.run.completed":
          case "thread.run.incomplete":
          case "thread.run.failed":
          case "thread.run.cancelling":
          case "thread.run.cancelled":
          case "thread.run.expired":
            __classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_handleRun).call(this, event);
            break;
          case "thread.run.step.created":
          case "thread.run.step.in_progress":
          case "thread.run.step.delta":
          case "thread.run.step.completed":
          case "thread.run.step.failed":
          case "thread.run.step.cancelled":
          case "thread.run.step.expired":
            __classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_handleRunStep).call(this, event);
            break;
          case "thread.message.created":
          case "thread.message.in_progress":
          case "thread.message.delta":
          case "thread.message.completed":
          case "thread.message.incomplete":
            __classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_handleMessage).call(this, event);
            break;
          case "error":
            throw new Error("Encountered an error event in event processing - errors should be processed earlier");
          default:
            assertNever(event);
        }
      }, _AssistantStream_endRequest = function _AssistantStream_endRequest2() {
        if (this.ended) {
          throw new error_1.OpenAIError(`stream has ended, this shouldn't happen`);
        }
        if (!__classPrivateFieldGet(this, _AssistantStream_finalRun, "f"))
          throw Error("Final run has not been received");
        return __classPrivateFieldGet(this, _AssistantStream_finalRun, "f");
      }, _AssistantStream_handleMessage = function _AssistantStream_handleMessage2(event) {
        const [accumulatedMessage, newContent] = __classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_accumulateMessage).call(this, event, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, "f"));
        __classPrivateFieldSet(this, _AssistantStream_messageSnapshot, accumulatedMessage, "f");
        __classPrivateFieldGet(this, _AssistantStream_messageSnapshots, "f")[accumulatedMessage.id] = accumulatedMessage;
        for (const content of newContent) {
          const snapshotContent = accumulatedMessage.content[content.index];
          if (snapshotContent?.type == "text") {
            this._emit("textCreated", snapshotContent.text);
          }
        }
        switch (event.event) {
          case "thread.message.created":
            this._emit("messageCreated", event.data);
            break;
          case "thread.message.in_progress":
            break;
          case "thread.message.delta":
            this._emit("messageDelta", event.data.delta, accumulatedMessage);
            if (event.data.delta.content) {
              for (const content of event.data.delta.content) {
                if (content.type == "text" && content.text) {
                  let textDelta = content.text;
                  let snapshot = accumulatedMessage.content[content.index];
                  if (snapshot && snapshot.type == "text") {
                    this._emit("textDelta", textDelta, snapshot.text);
                  } else {
                    throw Error("The snapshot associated with this text delta is not text or missing");
                  }
                }
                if (content.index != __classPrivateFieldGet(this, _AssistantStream_currentContentIndex, "f")) {
                  if (__classPrivateFieldGet(this, _AssistantStream_currentContent, "f")) {
                    switch (__classPrivateFieldGet(this, _AssistantStream_currentContent, "f").type) {
                      case "text":
                        this._emit("textDone", __classPrivateFieldGet(this, _AssistantStream_currentContent, "f").text, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, "f"));
                        break;
                      case "image_file":
                        this._emit("imageFileDone", __classPrivateFieldGet(this, _AssistantStream_currentContent, "f").image_file, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, "f"));
                        break;
                    }
                  }
                  __classPrivateFieldSet(this, _AssistantStream_currentContentIndex, content.index, "f");
                }
                __classPrivateFieldSet(this, _AssistantStream_currentContent, accumulatedMessage.content[content.index], "f");
              }
            }
            break;
          case "thread.message.completed":
          case "thread.message.incomplete":
            if (__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, "f") !== void 0) {
              const currentContent = event.data.content[__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, "f")];
              if (currentContent) {
                switch (currentContent.type) {
                  case "image_file":
                    this._emit("imageFileDone", currentContent.image_file, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, "f"));
                    break;
                  case "text":
                    this._emit("textDone", currentContent.text, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, "f"));
                    break;
                }
              }
            }
            if (__classPrivateFieldGet(this, _AssistantStream_messageSnapshot, "f")) {
              this._emit("messageDone", event.data);
            }
            __classPrivateFieldSet(this, _AssistantStream_messageSnapshot, void 0, "f");
        }
      }, _AssistantStream_handleRunStep = function _AssistantStream_handleRunStep2(event) {
        const accumulatedRunStep = __classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_accumulateRunStep).call(this, event);
        __classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, accumulatedRunStep, "f");
        switch (event.event) {
          case "thread.run.step.created":
            this._emit("runStepCreated", event.data);
            break;
          case "thread.run.step.delta":
            const delta = event.data.delta;
            if (delta.step_details && delta.step_details.type == "tool_calls" && delta.step_details.tool_calls && accumulatedRunStep.step_details.type == "tool_calls") {
              for (const toolCall of delta.step_details.tool_calls) {
                if (toolCall.index == __classPrivateFieldGet(this, _AssistantStream_currentToolCallIndex, "f")) {
                  this._emit("toolCallDelta", toolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index]);
                } else {
                  if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, "f")) {
                    this._emit("toolCallDone", __classPrivateFieldGet(this, _AssistantStream_currentToolCall, "f"));
                  }
                  __classPrivateFieldSet(this, _AssistantStream_currentToolCallIndex, toolCall.index, "f");
                  __classPrivateFieldSet(this, _AssistantStream_currentToolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index], "f");
                  if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, "f"))
                    this._emit("toolCallCreated", __classPrivateFieldGet(this, _AssistantStream_currentToolCall, "f"));
                }
              }
            }
            this._emit("runStepDelta", event.data.delta, accumulatedRunStep);
            break;
          case "thread.run.step.completed":
          case "thread.run.step.failed":
          case "thread.run.step.cancelled":
          case "thread.run.step.expired":
            __classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, void 0, "f");
            const details = event.data.step_details;
            if (details.type == "tool_calls") {
              if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, "f")) {
                this._emit("toolCallDone", __classPrivateFieldGet(this, _AssistantStream_currentToolCall, "f"));
                __classPrivateFieldSet(this, _AssistantStream_currentToolCall, void 0, "f");
              }
            }
            this._emit("runStepDone", event.data, accumulatedRunStep);
            break;
          case "thread.run.step.in_progress":
            break;
        }
      }, _AssistantStream_handleEvent = function _AssistantStream_handleEvent2(event) {
        __classPrivateFieldGet(this, _AssistantStream_events, "f").push(event);
        this._emit("event", event);
      }, _AssistantStream_accumulateRunStep = function _AssistantStream_accumulateRunStep2(event) {
        switch (event.event) {
          case "thread.run.step.created":
            __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, "f")[event.data.id] = event.data;
            return event.data;
          case "thread.run.step.delta":
            let snapshot = __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, "f")[event.data.id];
            if (!snapshot) {
              throw Error("Received a RunStepDelta before creation of a snapshot");
            }
            let data = event.data;
            if (data.delta) {
              const accumulated = AssistantStream.accumulateDelta(snapshot, data.delta);
              __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, "f")[event.data.id] = accumulated;
            }
            return __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, "f")[event.data.id];
          case "thread.run.step.completed":
          case "thread.run.step.failed":
          case "thread.run.step.cancelled":
          case "thread.run.step.expired":
          case "thread.run.step.in_progress":
            __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, "f")[event.data.id] = event.data;
            break;
        }
        if (__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, "f")[event.data.id])
          return __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, "f")[event.data.id];
        throw new Error("No snapshot available");
      }, _AssistantStream_accumulateMessage = function _AssistantStream_accumulateMessage2(event, snapshot) {
        let newContent = [];
        switch (event.event) {
          case "thread.message.created":
            return [event.data, newContent];
          case "thread.message.delta":
            if (!snapshot) {
              throw Error("Received a delta with no existing snapshot (there should be one from message creation)");
            }
            let data = event.data;
            if (data.delta.content) {
              for (const contentElement of data.delta.content) {
                if (contentElement.index in snapshot.content) {
                  let currentContent = snapshot.content[contentElement.index];
                  snapshot.content[contentElement.index] = __classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_accumulateContent).call(this, contentElement, currentContent);
                } else {
                  snapshot.content[contentElement.index] = contentElement;
                  newContent.push(contentElement);
                }
              }
            }
            return [snapshot, newContent];
          case "thread.message.in_progress":
          case "thread.message.completed":
          case "thread.message.incomplete":
            if (snapshot) {
              return [snapshot, newContent];
            } else {
              throw Error("Received thread message event with no existing snapshot");
            }
        }
        throw Error("Tried to accumulate a non-message event");
      }, _AssistantStream_accumulateContent = function _AssistantStream_accumulateContent2(contentElement, currentContent) {
        return AssistantStream.accumulateDelta(currentContent, contentElement);
      }, _AssistantStream_handleRun = function _AssistantStream_handleRun2(event) {
        __classPrivateFieldSet(this, _AssistantStream_currentRunSnapshot, event.data, "f");
        switch (event.event) {
          case "thread.run.created":
            break;
          case "thread.run.queued":
            break;
          case "thread.run.in_progress":
            break;
          case "thread.run.requires_action":
          case "thread.run.cancelled":
          case "thread.run.failed":
          case "thread.run.completed":
          case "thread.run.expired":
            __classPrivateFieldSet(this, _AssistantStream_finalRun, event.data, "f");
            if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, "f")) {
              this._emit("toolCallDone", __classPrivateFieldGet(this, _AssistantStream_currentToolCall, "f"));
              __classPrivateFieldSet(this, _AssistantStream_currentToolCall, void 0, "f");
            }
            break;
          case "thread.run.cancelling":
            break;
        }
      };
      function assertNever(_x) {
      }
    }
  });

  // ../PromptRepository/node_modules/openai/resources/beta/threads/messages.js
  var require_messages2 = __commonJS({
    "../PromptRepository/node_modules/openai/resources/beta/threads/messages.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.MessagesPage = exports.Messages = void 0;
      var resource_1 = require_resource();
      var core_1 = require_core();
      var pagination_1 = require_pagination();
      var Messages = class extends resource_1.APIResource {
        /**
         * Create a message.
         */
        create(threadId, body, options) {
          return this._client.post(`/threads/${threadId}/messages`, {
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Retrieve a message.
         */
        retrieve(threadId, messageId, options) {
          return this._client.get(`/threads/${threadId}/messages/${messageId}`, {
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Modifies a message.
         */
        update(threadId, messageId, body, options) {
          return this._client.post(`/threads/${threadId}/messages/${messageId}`, {
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        list(threadId, query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.list(threadId, {}, query);
          }
          return this._client.getAPIList(`/threads/${threadId}/messages`, MessagesPage, {
            query,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Deletes a message.
         */
        del(threadId, messageId, options) {
          return this._client.delete(`/threads/${threadId}/messages/${messageId}`, {
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
      };
      exports.Messages = Messages;
      var MessagesPage = class extends pagination_1.CursorPage {
      };
      exports.MessagesPage = MessagesPage;
      Messages.MessagesPage = MessagesPage;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/beta/threads/runs/steps.js
  var require_steps = __commonJS({
    "../PromptRepository/node_modules/openai/resources/beta/threads/runs/steps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RunStepsPage = exports.Steps = void 0;
      var resource_1 = require_resource();
      var core_1 = require_core();
      var pagination_1 = require_pagination();
      var Steps = class extends resource_1.APIResource {
        retrieve(threadId, runId, stepId, query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.retrieve(threadId, runId, stepId, {}, query);
          }
          return this._client.get(`/threads/${threadId}/runs/${runId}/steps/${stepId}`, {
            query,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        list(threadId, runId, query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.list(threadId, runId, {}, query);
          }
          return this._client.getAPIList(`/threads/${threadId}/runs/${runId}/steps`, RunStepsPage, {
            query,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
      };
      exports.Steps = Steps;
      var RunStepsPage = class extends pagination_1.CursorPage {
      };
      exports.RunStepsPage = RunStepsPage;
      Steps.RunStepsPage = RunStepsPage;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/beta/threads/runs/runs.js
  var require_runs = __commonJS({
    "../PromptRepository/node_modules/openai/resources/beta/threads/runs/runs.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RunsPage = exports.Runs = void 0;
      var resource_1 = require_resource();
      var core_1 = require_core();
      var AssistantStream_1 = require_AssistantStream();
      var core_2 = require_core();
      var StepsAPI = __importStar(require_steps());
      var steps_1 = require_steps();
      var pagination_1 = require_pagination();
      var Runs = class extends resource_1.APIResource {
        constructor() {
          super(...arguments);
          this.steps = new StepsAPI.Steps(this._client);
        }
        create(threadId, params, options) {
          const { include, ...body } = params;
          return this._client.post(`/threads/${threadId}/runs`, {
            query: { include },
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers },
            stream: params.stream ?? false
          });
        }
        /**
         * Retrieves a run.
         */
        retrieve(threadId, runId, options) {
          return this._client.get(`/threads/${threadId}/runs/${runId}`, {
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Modifies a run.
         */
        update(threadId, runId, body, options) {
          return this._client.post(`/threads/${threadId}/runs/${runId}`, {
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        list(threadId, query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.list(threadId, {}, query);
          }
          return this._client.getAPIList(`/threads/${threadId}/runs`, RunsPage, {
            query,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Cancels a run that is `in_progress`.
         */
        cancel(threadId, runId, options) {
          return this._client.post(`/threads/${threadId}/runs/${runId}/cancel`, {
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * A helper to create a run an poll for a terminal state. More information on Run
         * lifecycles can be found here:
         * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
         */
        async createAndPoll(threadId, body, options) {
          const run = await this.create(threadId, body, options);
          return await this.poll(threadId, run.id, options);
        }
        /**
         * Create a Run stream
         *
         * @deprecated use `stream` instead
         */
        createAndStream(threadId, body, options) {
          return AssistantStream_1.AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);
        }
        /**
         * A helper to poll a run status until it reaches a terminal state. More
         * information on Run lifecycles can be found here:
         * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
         */
        async poll(threadId, runId, options) {
          const headers = { ...options?.headers, "X-Stainless-Poll-Helper": "true" };
          if (options?.pollIntervalMs) {
            headers["X-Stainless-Custom-Poll-Interval"] = options.pollIntervalMs.toString();
          }
          while (true) {
            const { data: run, response } = await this.retrieve(threadId, runId, {
              ...options,
              headers: { ...options?.headers, ...headers }
            }).withResponse();
            switch (run.status) {
              //If we are in any sort of intermediate state we poll
              case "queued":
              case "in_progress":
              case "cancelling":
                let sleepInterval = 5e3;
                if (options?.pollIntervalMs) {
                  sleepInterval = options.pollIntervalMs;
                } else {
                  const headerInterval = response.headers.get("openai-poll-after-ms");
                  if (headerInterval) {
                    const headerIntervalMs = parseInt(headerInterval);
                    if (!isNaN(headerIntervalMs)) {
                      sleepInterval = headerIntervalMs;
                    }
                  }
                }
                await (0, core_2.sleep)(sleepInterval);
                break;
              //We return the run in any terminal state.
              case "requires_action":
              case "incomplete":
              case "cancelled":
              case "completed":
              case "failed":
              case "expired":
                return run;
            }
          }
        }
        /**
         * Create a Run stream
         */
        stream(threadId, body, options) {
          return AssistantStream_1.AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);
        }
        submitToolOutputs(threadId, runId, body, options) {
          return this._client.post(`/threads/${threadId}/runs/${runId}/submit_tool_outputs`, {
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers },
            stream: body.stream ?? false
          });
        }
        /**
         * A helper to submit a tool output to a run and poll for a terminal run state.
         * More information on Run lifecycles can be found here:
         * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
         */
        async submitToolOutputsAndPoll(threadId, runId, body, options) {
          const run = await this.submitToolOutputs(threadId, runId, body, options);
          return await this.poll(threadId, run.id, options);
        }
        /**
         * Submit the tool outputs from a previous run and stream the run to a terminal
         * state. More information on Run lifecycles can be found here:
         * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
         */
        submitToolOutputsStream(threadId, runId, body, options) {
          return AssistantStream_1.AssistantStream.createToolAssistantStream(threadId, runId, this._client.beta.threads.runs, body, options);
        }
      };
      exports.Runs = Runs;
      var RunsPage = class extends pagination_1.CursorPage {
      };
      exports.RunsPage = RunsPage;
      Runs.RunsPage = RunsPage;
      Runs.Steps = steps_1.Steps;
      Runs.RunStepsPage = steps_1.RunStepsPage;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/beta/threads/threads.js
  var require_threads = __commonJS({
    "../PromptRepository/node_modules/openai/resources/beta/threads/threads.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Threads = void 0;
      var resource_1 = require_resource();
      var core_1 = require_core();
      var AssistantStream_1 = require_AssistantStream();
      var MessagesAPI = __importStar(require_messages2());
      var messages_1 = require_messages2();
      var RunsAPI = __importStar(require_runs());
      var runs_1 = require_runs();
      var Threads = class extends resource_1.APIResource {
        constructor() {
          super(...arguments);
          this.runs = new RunsAPI.Runs(this._client);
          this.messages = new MessagesAPI.Messages(this._client);
        }
        create(body = {}, options) {
          if ((0, core_1.isRequestOptions)(body)) {
            return this.create({}, body);
          }
          return this._client.post("/threads", {
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Retrieves a thread.
         */
        retrieve(threadId, options) {
          return this._client.get(`/threads/${threadId}`, {
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Modifies a thread.
         */
        update(threadId, body, options) {
          return this._client.post(`/threads/${threadId}`, {
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Delete a thread.
         */
        del(threadId, options) {
          return this._client.delete(`/threads/${threadId}`, {
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        createAndRun(body, options) {
          return this._client.post("/threads/runs", {
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers },
            stream: body.stream ?? false
          });
        }
        /**
         * A helper to create a thread, start a run and then poll for a terminal state.
         * More information on Run lifecycles can be found here:
         * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
         */
        async createAndRunPoll(body, options) {
          const run = await this.createAndRun(body, options);
          return await this.runs.poll(run.thread_id, run.id, options);
        }
        /**
         * Create a thread and stream the run back
         */
        createAndRunStream(body, options) {
          return AssistantStream_1.AssistantStream.createThreadAssistantStream(body, this._client.beta.threads, options);
        }
      };
      exports.Threads = Threads;
      Threads.Runs = runs_1.Runs;
      Threads.RunsPage = runs_1.RunsPage;
      Threads.Messages = messages_1.Messages;
      Threads.MessagesPage = messages_1.MessagesPage;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/beta/beta.js
  var require_beta = __commonJS({
    "../PromptRepository/node_modules/openai/resources/beta/beta.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Beta = void 0;
      var resource_1 = require_resource();
      var AssistantsAPI = __importStar(require_assistants());
      var ChatAPI = __importStar(require_chat3());
      var assistants_1 = require_assistants();
      var RealtimeAPI = __importStar(require_realtime());
      var realtime_1 = require_realtime();
      var ThreadsAPI = __importStar(require_threads());
      var threads_1 = require_threads();
      var chat_1 = require_chat3();
      var Beta = class extends resource_1.APIResource {
        constructor() {
          super(...arguments);
          this.realtime = new RealtimeAPI.Realtime(this._client);
          this.chat = new ChatAPI.Chat(this._client);
          this.assistants = new AssistantsAPI.Assistants(this._client);
          this.threads = new ThreadsAPI.Threads(this._client);
        }
      };
      exports.Beta = Beta;
      Beta.Realtime = realtime_1.Realtime;
      Beta.Assistants = assistants_1.Assistants;
      Beta.AssistantsPage = assistants_1.AssistantsPage;
      Beta.Threads = threads_1.Threads;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/completions.js
  var require_completions4 = __commonJS({
    "../PromptRepository/node_modules/openai/resources/completions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Completions = void 0;
      var resource_1 = require_resource();
      var Completions = class extends resource_1.APIResource {
        create(body, options) {
          return this._client.post("/completions", { body, ...options, stream: body.stream ?? false });
        }
      };
      exports.Completions = Completions;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/embeddings.js
  var require_embeddings = __commonJS({
    "../PromptRepository/node_modules/openai/resources/embeddings.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Embeddings = void 0;
      var resource_1 = require_resource();
      var Embeddings = class extends resource_1.APIResource {
        /**
         * Creates an embedding vector representing the input text.
         */
        create(body, options) {
          return this._client.post("/embeddings", { body, ...options });
        }
      };
      exports.Embeddings = Embeddings;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/files.js
  var require_files = __commonJS({
    "../PromptRepository/node_modules/openai/resources/files.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FileObjectsPage = exports.Files = void 0;
      var resource_1 = require_resource();
      var core_1 = require_core();
      var core_2 = require_core();
      var error_1 = require_error();
      var Core = __importStar(require_core());
      var pagination_1 = require_pagination();
      var Files = class extends resource_1.APIResource {
        /**
         * Upload a file that can be used across various endpoints. Individual files can be
         * up to 512 MB, and the size of all files uploaded by one organization can be up
         * to 100 GB.
         *
         * The Assistants API supports files up to 2 million tokens and of specific file
         * types. See the
         * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for
         * details.
         *
         * The Fine-tuning API only supports `.jsonl` files. The input also has certain
         * required formats for fine-tuning
         * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or
         * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)
         * models.
         *
         * The Batch API only supports `.jsonl` files up to 200 MB in size. The input also
         * has a specific required
         * [format](https://platform.openai.com/docs/api-reference/batch/request-input).
         *
         * Please [contact us](https://help.openai.com/) if you need to increase these
         * storage limits.
         */
        create(body, options) {
          return this._client.post("/files", Core.multipartFormRequestOptions({ body, ...options }));
        }
        /**
         * Returns information about a specific file.
         */
        retrieve(fileId, options) {
          return this._client.get(`/files/${fileId}`, options);
        }
        list(query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.list({}, query);
          }
          return this._client.getAPIList("/files", FileObjectsPage, { query, ...options });
        }
        /**
         * Delete a file.
         */
        del(fileId, options) {
          return this._client.delete(`/files/${fileId}`, options);
        }
        /**
         * Returns the contents of the specified file.
         */
        content(fileId, options) {
          return this._client.get(`/files/${fileId}/content`, {
            ...options,
            headers: { Accept: "application/binary", ...options?.headers },
            __binaryResponse: true
          });
        }
        /**
         * Returns the contents of the specified file.
         *
         * @deprecated The `.content()` method should be used instead
         */
        retrieveContent(fileId, options) {
          return this._client.get(`/files/${fileId}/content`, options);
        }
        /**
         * Waits for the given file to be processed, default timeout is 30 mins.
         */
        async waitForProcessing(id, { pollInterval = 5e3, maxWait = 30 * 60 * 1e3 } = {}) {
          const TERMINAL_STATES = /* @__PURE__ */ new Set(["processed", "error", "deleted"]);
          const start = Date.now();
          let file = await this.retrieve(id);
          while (!file.status || !TERMINAL_STATES.has(file.status)) {
            await (0, core_2.sleep)(pollInterval);
            file = await this.retrieve(id);
            if (Date.now() - start > maxWait) {
              throw new error_1.APIConnectionTimeoutError({
                message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`
              });
            }
          }
          return file;
        }
      };
      exports.Files = Files;
      var FileObjectsPage = class extends pagination_1.CursorPage {
      };
      exports.FileObjectsPage = FileObjectsPage;
      Files.FileObjectsPage = FileObjectsPage;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/fine-tuning/jobs/checkpoints.js
  var require_checkpoints = __commonJS({
    "../PromptRepository/node_modules/openai/resources/fine-tuning/jobs/checkpoints.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FineTuningJobCheckpointsPage = exports.Checkpoints = void 0;
      var resource_1 = require_resource();
      var core_1 = require_core();
      var pagination_1 = require_pagination();
      var Checkpoints = class extends resource_1.APIResource {
        list(fineTuningJobId, query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.list(fineTuningJobId, {}, query);
          }
          return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/checkpoints`, FineTuningJobCheckpointsPage, { query, ...options });
        }
      };
      exports.Checkpoints = Checkpoints;
      var FineTuningJobCheckpointsPage = class extends pagination_1.CursorPage {
      };
      exports.FineTuningJobCheckpointsPage = FineTuningJobCheckpointsPage;
      Checkpoints.FineTuningJobCheckpointsPage = FineTuningJobCheckpointsPage;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/fine-tuning/jobs/jobs.js
  var require_jobs = __commonJS({
    "../PromptRepository/node_modules/openai/resources/fine-tuning/jobs/jobs.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FineTuningJobEventsPage = exports.FineTuningJobsPage = exports.Jobs = void 0;
      var resource_1 = require_resource();
      var core_1 = require_core();
      var CheckpointsAPI = __importStar(require_checkpoints());
      var checkpoints_1 = require_checkpoints();
      var pagination_1 = require_pagination();
      var Jobs = class extends resource_1.APIResource {
        constructor() {
          super(...arguments);
          this.checkpoints = new CheckpointsAPI.Checkpoints(this._client);
        }
        /**
         * Creates a fine-tuning job which begins the process of creating a new model from
         * a given dataset.
         *
         * Response includes details of the enqueued job including job status and the name
         * of the fine-tuned models once complete.
         *
         * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)
         */
        create(body, options) {
          return this._client.post("/fine_tuning/jobs", { body, ...options });
        }
        /**
         * Get info about a fine-tuning job.
         *
         * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)
         */
        retrieve(fineTuningJobId, options) {
          return this._client.get(`/fine_tuning/jobs/${fineTuningJobId}`, options);
        }
        list(query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.list({}, query);
          }
          return this._client.getAPIList("/fine_tuning/jobs", FineTuningJobsPage, { query, ...options });
        }
        /**
         * Immediately cancel a fine-tune job.
         */
        cancel(fineTuningJobId, options) {
          return this._client.post(`/fine_tuning/jobs/${fineTuningJobId}/cancel`, options);
        }
        listEvents(fineTuningJobId, query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.listEvents(fineTuningJobId, {}, query);
          }
          return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/events`, FineTuningJobEventsPage, {
            query,
            ...options
          });
        }
      };
      exports.Jobs = Jobs;
      var FineTuningJobsPage = class extends pagination_1.CursorPage {
      };
      exports.FineTuningJobsPage = FineTuningJobsPage;
      var FineTuningJobEventsPage = class extends pagination_1.CursorPage {
      };
      exports.FineTuningJobEventsPage = FineTuningJobEventsPage;
      Jobs.FineTuningJobsPage = FineTuningJobsPage;
      Jobs.FineTuningJobEventsPage = FineTuningJobEventsPage;
      Jobs.Checkpoints = checkpoints_1.Checkpoints;
      Jobs.FineTuningJobCheckpointsPage = checkpoints_1.FineTuningJobCheckpointsPage;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/fine-tuning/fine-tuning.js
  var require_fine_tuning = __commonJS({
    "../PromptRepository/node_modules/openai/resources/fine-tuning/fine-tuning.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FineTuning = void 0;
      var resource_1 = require_resource();
      var JobsAPI = __importStar(require_jobs());
      var jobs_1 = require_jobs();
      var FineTuning = class extends resource_1.APIResource {
        constructor() {
          super(...arguments);
          this.jobs = new JobsAPI.Jobs(this._client);
        }
      };
      exports.FineTuning = FineTuning;
      FineTuning.Jobs = jobs_1.Jobs;
      FineTuning.FineTuningJobsPage = jobs_1.FineTuningJobsPage;
      FineTuning.FineTuningJobEventsPage = jobs_1.FineTuningJobEventsPage;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/images.js
  var require_images = __commonJS({
    "../PromptRepository/node_modules/openai/resources/images.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Images = void 0;
      var resource_1 = require_resource();
      var Core = __importStar(require_core());
      var Images = class extends resource_1.APIResource {
        /**
         * Creates a variation of a given image.
         */
        createVariation(body, options) {
          return this._client.post("/images/variations", Core.multipartFormRequestOptions({ body, ...options }));
        }
        /**
         * Creates an edited or extended image given an original image and a prompt.
         */
        edit(body, options) {
          return this._client.post("/images/edits", Core.multipartFormRequestOptions({ body, ...options }));
        }
        /**
         * Creates an image given a prompt.
         */
        generate(body, options) {
          return this._client.post("/images/generations", { body, ...options });
        }
      };
      exports.Images = Images;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/models.js
  var require_models = __commonJS({
    "../PromptRepository/node_modules/openai/resources/models.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModelsPage = exports.Models = void 0;
      var resource_1 = require_resource();
      var pagination_1 = require_pagination();
      var Models = class extends resource_1.APIResource {
        /**
         * Retrieves a model instance, providing basic information about the model such as
         * the owner and permissioning.
         */
        retrieve(model, options) {
          return this._client.get(`/models/${model}`, options);
        }
        /**
         * Lists the currently available models, and provides basic information about each
         * one such as the owner and availability.
         */
        list(options) {
          return this._client.getAPIList("/models", ModelsPage, options);
        }
        /**
         * Delete a fine-tuned model. You must have the Owner role in your organization to
         * delete a model.
         */
        del(model, options) {
          return this._client.delete(`/models/${model}`, options);
        }
      };
      exports.Models = Models;
      var ModelsPage = class extends pagination_1.Page {
      };
      exports.ModelsPage = ModelsPage;
      Models.ModelsPage = ModelsPage;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/moderations.js
  var require_moderations = __commonJS({
    "../PromptRepository/node_modules/openai/resources/moderations.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Moderations = void 0;
      var resource_1 = require_resource();
      var Moderations = class extends resource_1.APIResource {
        /**
         * Classifies if text and/or image inputs are potentially harmful. Learn more in
         * the [moderation guide](https://platform.openai.com/docs/guides/moderation).
         */
        create(body, options) {
          return this._client.post("/moderations", { body, ...options });
        }
      };
      exports.Moderations = Moderations;
    }
  });

  // ../PromptRepository/node_modules/openai/lib/ResponsesParser.js
  var require_ResponsesParser = __commonJS({
    "../PromptRepository/node_modules/openai/lib/ResponsesParser.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.addOutputText = exports.validateInputTools = exports.shouldParseToolCall = exports.isAutoParsableTool = exports.makeParseableResponseTool = exports.hasAutoParseableInput = exports.parseResponse = exports.maybeParseResponse = void 0;
      var error_1 = require_error();
      var parser_1 = require_parser();
      function maybeParseResponse(response, params) {
        if (!params || !hasAutoParseableInput(params)) {
          return {
            ...response,
            output_parsed: null,
            output: response.output.map((item) => {
              if (item.type === "function_call") {
                return {
                  ...item,
                  parsed_arguments: null
                };
              }
              if (item.type === "message") {
                return {
                  ...item,
                  content: item.content.map((content) => ({
                    ...content,
                    parsed: null
                  }))
                };
              } else {
                return item;
              }
            })
          };
        }
        return parseResponse(response, params);
      }
      exports.maybeParseResponse = maybeParseResponse;
      function parseResponse(response, params) {
        const output = response.output.map((item) => {
          if (item.type === "function_call") {
            return {
              ...item,
              parsed_arguments: parseToolCall(params, item)
            };
          }
          if (item.type === "message") {
            const content = item.content.map((content2) => {
              if (content2.type === "output_text") {
                return {
                  ...content2,
                  parsed: parseTextFormat(params, content2.text)
                };
              }
              return content2;
            });
            return {
              ...item,
              content
            };
          }
          return item;
        });
        const parsed = Object.assign({}, response, { output });
        if (!Object.getOwnPropertyDescriptor(response, "output_text")) {
          addOutputText(parsed);
        }
        Object.defineProperty(parsed, "output_parsed", {
          enumerable: true,
          get() {
            for (const output2 of parsed.output) {
              if (output2.type !== "message") {
                continue;
              }
              for (const content of output2.content) {
                if (content.type === "output_text" && content.parsed !== null) {
                  return content.parsed;
                }
              }
            }
            return null;
          }
        });
        return parsed;
      }
      exports.parseResponse = parseResponse;
      function parseTextFormat(params, content) {
        if (params.text?.format?.type !== "json_schema") {
          return null;
        }
        if ("$parseRaw" in params.text?.format) {
          const text_format = params.text?.format;
          return text_format.$parseRaw(content);
        }
        return JSON.parse(content);
      }
      function hasAutoParseableInput(params) {
        if ((0, parser_1.isAutoParsableResponseFormat)(params.text?.format)) {
          return true;
        }
        return false;
      }
      exports.hasAutoParseableInput = hasAutoParseableInput;
      function makeParseableResponseTool(tool, { parser, callback }) {
        const obj = { ...tool };
        Object.defineProperties(obj, {
          $brand: {
            value: "auto-parseable-tool",
            enumerable: false
          },
          $parseRaw: {
            value: parser,
            enumerable: false
          },
          $callback: {
            value: callback,
            enumerable: false
          }
        });
        return obj;
      }
      exports.makeParseableResponseTool = makeParseableResponseTool;
      function isAutoParsableTool(tool) {
        return tool?.["$brand"] === "auto-parseable-tool";
      }
      exports.isAutoParsableTool = isAutoParsableTool;
      function getInputToolByName(input_tools, name) {
        return input_tools.find((tool) => tool.type === "function" && tool.name === name);
      }
      function parseToolCall(params, toolCall) {
        const inputTool = getInputToolByName(params.tools ?? [], toolCall.name);
        return {
          ...toolCall,
          ...toolCall,
          parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.arguments) : inputTool?.strict ? JSON.parse(toolCall.arguments) : null
        };
      }
      function shouldParseToolCall(params, toolCall) {
        if (!params) {
          return false;
        }
        const inputTool = getInputToolByName(params.tools ?? [], toolCall.name);
        return isAutoParsableTool(inputTool) || inputTool?.strict || false;
      }
      exports.shouldParseToolCall = shouldParseToolCall;
      function validateInputTools(tools) {
        for (const tool of tools ?? []) {
          if (tool.type !== "function") {
            throw new error_1.OpenAIError(`Currently only \`function\` tool types support auto-parsing; Received \`${tool.type}\``);
          }
          if (tool.function.strict !== true) {
            throw new error_1.OpenAIError(`The \`${tool.function.name}\` tool is not marked with \`strict: true\`. Only strict function tools can be auto-parsed`);
          }
        }
      }
      exports.validateInputTools = validateInputTools;
      function addOutputText(rsp) {
        const texts = [];
        for (const output of rsp.output) {
          if (output.type !== "message") {
            continue;
          }
          for (const content of output.content) {
            if (content.type === "output_text") {
              texts.push(content.text);
            }
          }
        }
        rsp.output_text = texts.join("");
      }
      exports.addOutputText = addOutputText;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/responses/input-items.js
  var require_input_items = __commonJS({
    "../PromptRepository/node_modules/openai/resources/responses/input-items.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ResponseItemsPage = exports.InputItems = void 0;
      var resource_1 = require_resource();
      var core_1 = require_core();
      var responses_1 = require_responses();
      Object.defineProperty(exports, "ResponseItemsPage", { enumerable: true, get: function() {
        return responses_1.ResponseItemsPage;
      } });
      var InputItems = class extends resource_1.APIResource {
        list(responseId, query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.list(responseId, {}, query);
          }
          return this._client.getAPIList(`/responses/${responseId}/input_items`, responses_1.ResponseItemsPage, {
            query,
            ...options
          });
        }
      };
      exports.InputItems = InputItems;
    }
  });

  // ../PromptRepository/node_modules/openai/lib/responses/ResponseStream.js
  var require_ResponseStream = __commonJS({
    "../PromptRepository/node_modules/openai/lib/responses/ResponseStream.js"(exports) {
      "use strict";
      var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      var _ResponseStream_instances;
      var _ResponseStream_params;
      var _ResponseStream_currentResponseSnapshot;
      var _ResponseStream_finalResponse;
      var _ResponseStream_beginRequest;
      var _ResponseStream_addEvent;
      var _ResponseStream_endRequest;
      var _ResponseStream_accumulateResponse;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ResponseStream = void 0;
      var error_1 = require_error();
      var EventStream_1 = require_EventStream();
      var ResponsesParser_1 = require_ResponsesParser();
      var ResponseStream = class _ResponseStream extends EventStream_1.EventStream {
        constructor(params) {
          super();
          _ResponseStream_instances.add(this);
          _ResponseStream_params.set(this, void 0);
          _ResponseStream_currentResponseSnapshot.set(this, void 0);
          _ResponseStream_finalResponse.set(this, void 0);
          __classPrivateFieldSet(this, _ResponseStream_params, params, "f");
        }
        static createResponse(client, params, options) {
          const runner = new _ResponseStream(params);
          runner._run(() => runner._createResponse(client, params, {
            ...options,
            headers: { ...options?.headers, "X-Stainless-Helper-Method": "stream" }
          }));
          return runner;
        }
        async _createResponse(client, params, options) {
          const signal = options?.signal;
          if (signal) {
            if (signal.aborted)
              this.controller.abort();
            signal.addEventListener("abort", () => this.controller.abort());
          }
          __classPrivateFieldGet(this, _ResponseStream_instances, "m", _ResponseStream_beginRequest).call(this);
          const stream = await client.responses.create({ ...params, stream: true }, { ...options, signal: this.controller.signal });
          this._connected();
          for await (const event of stream) {
            __classPrivateFieldGet(this, _ResponseStream_instances, "m", _ResponseStream_addEvent).call(this, event);
          }
          if (stream.controller.signal?.aborted) {
            throw new error_1.APIUserAbortError();
          }
          return __classPrivateFieldGet(this, _ResponseStream_instances, "m", _ResponseStream_endRequest).call(this);
        }
        [(_ResponseStream_params = /* @__PURE__ */ new WeakMap(), _ResponseStream_currentResponseSnapshot = /* @__PURE__ */ new WeakMap(), _ResponseStream_finalResponse = /* @__PURE__ */ new WeakMap(), _ResponseStream_instances = /* @__PURE__ */ new WeakSet(), _ResponseStream_beginRequest = function _ResponseStream_beginRequest2() {
          if (this.ended)
            return;
          __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, void 0, "f");
        }, _ResponseStream_addEvent = function _ResponseStream_addEvent2(event) {
          if (this.ended)
            return;
          const response = __classPrivateFieldGet(this, _ResponseStream_instances, "m", _ResponseStream_accumulateResponse).call(this, event);
          this._emit("event", event);
          switch (event.type) {
            case "response.output_text.delta": {
              const output = response.output[event.output_index];
              if (!output) {
                throw new error_1.OpenAIError(`missing output at index ${event.output_index}`);
              }
              if (output.type === "message") {
                const content = output.content[event.content_index];
                if (!content) {
                  throw new error_1.OpenAIError(`missing content at index ${event.content_index}`);
                }
                if (content.type !== "output_text") {
                  throw new error_1.OpenAIError(`expected content to be 'output_text', got ${content.type}`);
                }
                this._emit("response.output_text.delta", {
                  ...event,
                  snapshot: content.text
                });
              }
              break;
            }
            case "response.function_call_arguments.delta": {
              const output = response.output[event.output_index];
              if (!output) {
                throw new error_1.OpenAIError(`missing output at index ${event.output_index}`);
              }
              if (output.type === "function_call") {
                this._emit("response.function_call_arguments.delta", {
                  ...event,
                  snapshot: output.arguments
                });
              }
              break;
            }
            default:
              this._emit(event.type, event);
              break;
          }
        }, _ResponseStream_endRequest = function _ResponseStream_endRequest2() {
          if (this.ended) {
            throw new error_1.OpenAIError(`stream has ended, this shouldn't happen`);
          }
          const snapshot = __classPrivateFieldGet(this, _ResponseStream_currentResponseSnapshot, "f");
          if (!snapshot) {
            throw new error_1.OpenAIError(`request ended without sending any events`);
          }
          __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, void 0, "f");
          const parsedResponse = finalizeResponse(snapshot, __classPrivateFieldGet(this, _ResponseStream_params, "f"));
          __classPrivateFieldSet(this, _ResponseStream_finalResponse, parsedResponse, "f");
          return parsedResponse;
        }, _ResponseStream_accumulateResponse = function _ResponseStream_accumulateResponse2(event) {
          let snapshot = __classPrivateFieldGet(this, _ResponseStream_currentResponseSnapshot, "f");
          if (!snapshot) {
            if (event.type !== "response.created") {
              throw new error_1.OpenAIError(`When snapshot hasn't been set yet, expected 'response.created' event, got ${event.type}`);
            }
            snapshot = __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, event.response, "f");
            return snapshot;
          }
          switch (event.type) {
            case "response.output_item.added": {
              snapshot.output.push(event.item);
              break;
            }
            case "response.content_part.added": {
              const output = snapshot.output[event.output_index];
              if (!output) {
                throw new error_1.OpenAIError(`missing output at index ${event.output_index}`);
              }
              if (output.type === "message") {
                output.content.push(event.part);
              }
              break;
            }
            case "response.output_text.delta": {
              const output = snapshot.output[event.output_index];
              if (!output) {
                throw new error_1.OpenAIError(`missing output at index ${event.output_index}`);
              }
              if (output.type === "message") {
                const content = output.content[event.content_index];
                if (!content) {
                  throw new error_1.OpenAIError(`missing content at index ${event.content_index}`);
                }
                if (content.type !== "output_text") {
                  throw new error_1.OpenAIError(`expected content to be 'output_text', got ${content.type}`);
                }
                content.text += event.delta;
              }
              break;
            }
            case "response.function_call_arguments.delta": {
              const output = snapshot.output[event.output_index];
              if (!output) {
                throw new error_1.OpenAIError(`missing output at index ${event.output_index}`);
              }
              if (output.type === "function_call") {
                output.arguments += event.delta;
              }
              break;
            }
            case "response.completed": {
              __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, event.response, "f");
              break;
            }
          }
          return snapshot;
        }, Symbol.asyncIterator)]() {
          const pushQueue = [];
          const readQueue = [];
          let done = false;
          this.on("event", (event) => {
            const reader = readQueue.shift();
            if (reader) {
              reader.resolve(event);
            } else {
              pushQueue.push(event);
            }
          });
          this.on("end", () => {
            done = true;
            for (const reader of readQueue) {
              reader.resolve(void 0);
            }
            readQueue.length = 0;
          });
          this.on("abort", (err) => {
            done = true;
            for (const reader of readQueue) {
              reader.reject(err);
            }
            readQueue.length = 0;
          });
          this.on("error", (err) => {
            done = true;
            for (const reader of readQueue) {
              reader.reject(err);
            }
            readQueue.length = 0;
          });
          return {
            next: async () => {
              if (!pushQueue.length) {
                if (done) {
                  return { value: void 0, done: true };
                }
                return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((event2) => event2 ? { value: event2, done: false } : { value: void 0, done: true });
              }
              const event = pushQueue.shift();
              return { value: event, done: false };
            },
            return: async () => {
              this.abort();
              return { value: void 0, done: true };
            }
          };
        }
        /**
         * @returns a promise that resolves with the final Response, or rejects
         * if an error occurred or the stream ended prematurely without producing a REsponse.
         */
        async finalResponse() {
          await this.done();
          const response = __classPrivateFieldGet(this, _ResponseStream_finalResponse, "f");
          if (!response)
            throw new error_1.OpenAIError("stream ended without producing a ChatCompletion");
          return response;
        }
      };
      exports.ResponseStream = ResponseStream;
      function finalizeResponse(snapshot, params) {
        return (0, ResponsesParser_1.maybeParseResponse)(snapshot, params);
      }
    }
  });

  // ../PromptRepository/node_modules/openai/resources/responses/responses.js
  var require_responses = __commonJS({
    "../PromptRepository/node_modules/openai/resources/responses/responses.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ResponseItemsPage = exports.Responses = void 0;
      var ResponsesParser_1 = require_ResponsesParser();
      var core_1 = require_core();
      var resource_1 = require_resource();
      var InputItemsAPI = __importStar(require_input_items());
      var input_items_1 = require_input_items();
      var ResponseStream_1 = require_ResponseStream();
      var pagination_1 = require_pagination();
      var Responses = class extends resource_1.APIResource {
        constructor() {
          super(...arguments);
          this.inputItems = new InputItemsAPI.InputItems(this._client);
        }
        create(body, options) {
          return this._client.post("/responses", { body, ...options, stream: body.stream ?? false })._thenUnwrap((rsp) => {
            if ("object" in rsp && rsp.object === "response") {
              (0, ResponsesParser_1.addOutputText)(rsp);
            }
            return rsp;
          });
        }
        retrieve(responseId, query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.retrieve(responseId, {}, query);
          }
          return this._client.get(`/responses/${responseId}`, { query, ...options });
        }
        /**
         * Deletes a model response with the given ID.
         */
        del(responseId, options) {
          return this._client.delete(`/responses/${responseId}`, {
            ...options,
            headers: { Accept: "*/*", ...options?.headers }
          });
        }
        parse(body, options) {
          return this._client.responses.create(body, options)._thenUnwrap((response) => (0, ResponsesParser_1.parseResponse)(response, body));
        }
        /**
         * Creates a chat completion stream
         */
        stream(body, options) {
          return ResponseStream_1.ResponseStream.createResponse(this._client, body, options);
        }
      };
      exports.Responses = Responses;
      var ResponseItemsPage = class extends pagination_1.CursorPage {
      };
      exports.ResponseItemsPage = ResponseItemsPage;
      Responses.InputItems = input_items_1.InputItems;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/uploads/parts.js
  var require_parts = __commonJS({
    "../PromptRepository/node_modules/openai/resources/uploads/parts.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Parts = void 0;
      var resource_1 = require_resource();
      var Core = __importStar(require_core());
      var Parts = class extends resource_1.APIResource {
        /**
         * Adds a
         * [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an
         * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object.
         * A Part represents a chunk of bytes from the file you are trying to upload.
         *
         * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload
         * maximum of 8 GB.
         *
         * It is possible to add multiple Parts in parallel. You can decide the intended
         * order of the Parts when you
         * [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).
         */
        create(uploadId, body, options) {
          return this._client.post(`/uploads/${uploadId}/parts`, Core.multipartFormRequestOptions({ body, ...options }));
        }
      };
      exports.Parts = Parts;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/uploads/uploads.js
  var require_uploads2 = __commonJS({
    "../PromptRepository/node_modules/openai/resources/uploads/uploads.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Uploads = void 0;
      var resource_1 = require_resource();
      var PartsAPI = __importStar(require_parts());
      var parts_1 = require_parts();
      var Uploads = class extends resource_1.APIResource {
        constructor() {
          super(...arguments);
          this.parts = new PartsAPI.Parts(this._client);
        }
        /**
         * Creates an intermediate
         * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object
         * that you can add
         * [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.
         * Currently, an Upload can accept at most 8 GB in total and expires after an hour
         * after you create it.
         *
         * Once you complete the Upload, we will create a
         * [File](https://platform.openai.com/docs/api-reference/files/object) object that
         * contains all the parts you uploaded. This File is usable in the rest of our
         * platform as a regular File object.
         *
         * For certain `purpose` values, the correct `mime_type` must be specified. Please
         * refer to documentation for the
         * [supported MIME types for your use case](https://platform.openai.com/docs/assistants/tools/file-search#supported-files).
         *
         * For guidance on the proper filename extensions for each purpose, please follow
         * the documentation on
         * [creating a File](https://platform.openai.com/docs/api-reference/files/create).
         */
        create(body, options) {
          return this._client.post("/uploads", { body, ...options });
        }
        /**
         * Cancels the Upload. No Parts may be added after an Upload is cancelled.
         */
        cancel(uploadId, options) {
          return this._client.post(`/uploads/${uploadId}/cancel`, options);
        }
        /**
         * Completes the
         * [Upload](https://platform.openai.com/docs/api-reference/uploads/object).
         *
         * Within the returned Upload object, there is a nested
         * [File](https://platform.openai.com/docs/api-reference/files/object) object that
         * is ready to use in the rest of the platform.
         *
         * You can specify the order of the Parts by passing in an ordered list of the Part
         * IDs.
         *
         * The number of bytes uploaded upon completion must match the number of bytes
         * initially specified when creating the Upload object. No Parts may be added after
         * an Upload is completed.
         */
        complete(uploadId, body, options) {
          return this._client.post(`/uploads/${uploadId}/complete`, { body, ...options });
        }
      };
      exports.Uploads = Uploads;
      Uploads.Parts = parts_1.Parts;
    }
  });

  // ../PromptRepository/node_modules/openai/lib/Util.js
  var require_Util = __commonJS({
    "../PromptRepository/node_modules/openai/lib/Util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.allSettledWithThrow = void 0;
      var allSettledWithThrow = async (promises) => {
        const results = await Promise.allSettled(promises);
        const rejected = results.filter((result) => result.status === "rejected");
        if (rejected.length) {
          for (const result of rejected) {
            console.error(result.reason);
          }
          throw new Error(`${rejected.length} promise(s) failed - see the above errors`);
        }
        const values2 = [];
        for (const result of results) {
          if (result.status === "fulfilled") {
            values2.push(result.value);
          }
        }
        return values2;
      };
      exports.allSettledWithThrow = allSettledWithThrow;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/vector-stores/files.js
  var require_files2 = __commonJS({
    "../PromptRepository/node_modules/openai/resources/vector-stores/files.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FileContentResponsesPage = exports.VectorStoreFilesPage = exports.Files = void 0;
      var resource_1 = require_resource();
      var core_1 = require_core();
      var pagination_1 = require_pagination();
      var Files = class extends resource_1.APIResource {
        /**
         * Create a vector store file by attaching a
         * [File](https://platform.openai.com/docs/api-reference/files) to a
         * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).
         */
        create(vectorStoreId, body, options) {
          return this._client.post(`/vector_stores/${vectorStoreId}/files`, {
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Retrieves a vector store file.
         */
        retrieve(vectorStoreId, fileId, options) {
          return this._client.get(`/vector_stores/${vectorStoreId}/files/${fileId}`, {
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Update attributes on a vector store file.
         */
        update(vectorStoreId, fileId, body, options) {
          return this._client.post(`/vector_stores/${vectorStoreId}/files/${fileId}`, {
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        list(vectorStoreId, query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.list(vectorStoreId, {}, query);
          }
          return this._client.getAPIList(`/vector_stores/${vectorStoreId}/files`, VectorStoreFilesPage, {
            query,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Delete a vector store file. This will remove the file from the vector store but
         * the file itself will not be deleted. To delete the file, use the
         * [delete file](https://platform.openai.com/docs/api-reference/files/delete)
         * endpoint.
         */
        del(vectorStoreId, fileId, options) {
          return this._client.delete(`/vector_stores/${vectorStoreId}/files/${fileId}`, {
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Attach a file to the given vector store and wait for it to be processed.
         */
        async createAndPoll(vectorStoreId, body, options) {
          const file = await this.create(vectorStoreId, body, options);
          return await this.poll(vectorStoreId, file.id, options);
        }
        /**
         * Wait for the vector store file to finish processing.
         *
         * Note: this will return even if the file failed to process, you need to check
         * file.last_error and file.status to handle these cases
         */
        async poll(vectorStoreId, fileId, options) {
          const headers = { ...options?.headers, "X-Stainless-Poll-Helper": "true" };
          if (options?.pollIntervalMs) {
            headers["X-Stainless-Custom-Poll-Interval"] = options.pollIntervalMs.toString();
          }
          while (true) {
            const fileResponse = await this.retrieve(vectorStoreId, fileId, {
              ...options,
              headers
            }).withResponse();
            const file = fileResponse.data;
            switch (file.status) {
              case "in_progress":
                let sleepInterval = 5e3;
                if (options?.pollIntervalMs) {
                  sleepInterval = options.pollIntervalMs;
                } else {
                  const headerInterval = fileResponse.response.headers.get("openai-poll-after-ms");
                  if (headerInterval) {
                    const headerIntervalMs = parseInt(headerInterval);
                    if (!isNaN(headerIntervalMs)) {
                      sleepInterval = headerIntervalMs;
                    }
                  }
                }
                await (0, core_1.sleep)(sleepInterval);
                break;
              case "failed":
              case "completed":
                return file;
            }
          }
        }
        /**
         * Upload a file to the `files` API and then attach it to the given vector store.
         *
         * Note the file will be asynchronously processed (you can use the alternative
         * polling helper method to wait for processing to complete).
         */
        async upload(vectorStoreId, file, options) {
          const fileInfo = await this._client.files.create({ file, purpose: "assistants" }, options);
          return this.create(vectorStoreId, { file_id: fileInfo.id }, options);
        }
        /**
         * Add a file to a vector store and poll until processing is complete.
         */
        async uploadAndPoll(vectorStoreId, file, options) {
          const fileInfo = await this.upload(vectorStoreId, file, options);
          return await this.poll(vectorStoreId, fileInfo.id, options);
        }
        /**
         * Retrieve the parsed contents of a vector store file.
         */
        content(vectorStoreId, fileId, options) {
          return this._client.getAPIList(`/vector_stores/${vectorStoreId}/files/${fileId}/content`, FileContentResponsesPage, { ...options, headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers } });
        }
      };
      exports.Files = Files;
      var VectorStoreFilesPage = class extends pagination_1.CursorPage {
      };
      exports.VectorStoreFilesPage = VectorStoreFilesPage;
      var FileContentResponsesPage = class extends pagination_1.Page {
      };
      exports.FileContentResponsesPage = FileContentResponsesPage;
      Files.VectorStoreFilesPage = VectorStoreFilesPage;
      Files.FileContentResponsesPage = FileContentResponsesPage;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/vector-stores/file-batches.js
  var require_file_batches = __commonJS({
    "../PromptRepository/node_modules/openai/resources/vector-stores/file-batches.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.VectorStoreFilesPage = exports.FileBatches = void 0;
      var resource_1 = require_resource();
      var core_1 = require_core();
      var core_2 = require_core();
      var Util_1 = require_Util();
      var files_1 = require_files2();
      Object.defineProperty(exports, "VectorStoreFilesPage", { enumerable: true, get: function() {
        return files_1.VectorStoreFilesPage;
      } });
      var FileBatches = class extends resource_1.APIResource {
        /**
         * Create a vector store file batch.
         */
        create(vectorStoreId, body, options) {
          return this._client.post(`/vector_stores/${vectorStoreId}/file_batches`, {
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Retrieves a vector store file batch.
         */
        retrieve(vectorStoreId, batchId, options) {
          return this._client.get(`/vector_stores/${vectorStoreId}/file_batches/${batchId}`, {
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Cancel a vector store file batch. This attempts to cancel the processing of
         * files in this batch as soon as possible.
         */
        cancel(vectorStoreId, batchId, options) {
          return this._client.post(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/cancel`, {
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Create a vector store batch and poll until all files have been processed.
         */
        async createAndPoll(vectorStoreId, body, options) {
          const batch = await this.create(vectorStoreId, body);
          return await this.poll(vectorStoreId, batch.id, options);
        }
        listFiles(vectorStoreId, batchId, query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.listFiles(vectorStoreId, batchId, {}, query);
          }
          return this._client.getAPIList(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/files`, files_1.VectorStoreFilesPage, { query, ...options, headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers } });
        }
        /**
         * Wait for the given file batch to be processed.
         *
         * Note: this will return even if one of the files failed to process, you need to
         * check batch.file_counts.failed_count to handle this case.
         */
        async poll(vectorStoreId, batchId, options) {
          const headers = { ...options?.headers, "X-Stainless-Poll-Helper": "true" };
          if (options?.pollIntervalMs) {
            headers["X-Stainless-Custom-Poll-Interval"] = options.pollIntervalMs.toString();
          }
          while (true) {
            const { data: batch, response } = await this.retrieve(vectorStoreId, batchId, {
              ...options,
              headers
            }).withResponse();
            switch (batch.status) {
              case "in_progress":
                let sleepInterval = 5e3;
                if (options?.pollIntervalMs) {
                  sleepInterval = options.pollIntervalMs;
                } else {
                  const headerInterval = response.headers.get("openai-poll-after-ms");
                  if (headerInterval) {
                    const headerIntervalMs = parseInt(headerInterval);
                    if (!isNaN(headerIntervalMs)) {
                      sleepInterval = headerIntervalMs;
                    }
                  }
                }
                await (0, core_2.sleep)(sleepInterval);
                break;
              case "failed":
              case "cancelled":
              case "completed":
                return batch;
            }
          }
        }
        /**
         * Uploads the given files concurrently and then creates a vector store file batch.
         *
         * The concurrency limit is configurable using the `maxConcurrency` parameter.
         */
        async uploadAndPoll(vectorStoreId, { files, fileIds = [] }, options) {
          if (files == null || files.length == 0) {
            throw new Error(`No \`files\` provided to process. If you've already uploaded files you should use \`.createAndPoll()\` instead`);
          }
          const configuredConcurrency = options?.maxConcurrency ?? 5;
          const concurrencyLimit = Math.min(configuredConcurrency, files.length);
          const client = this._client;
          const fileIterator = files.values();
          const allFileIds = [...fileIds];
          async function processFiles(iterator) {
            for (let item of iterator) {
              const fileObj = await client.files.create({ file: item, purpose: "assistants" }, options);
              allFileIds.push(fileObj.id);
            }
          }
          const workers = Array(concurrencyLimit).fill(fileIterator).map(processFiles);
          await (0, Util_1.allSettledWithThrow)(workers);
          return await this.createAndPoll(vectorStoreId, {
            file_ids: allFileIds
          });
        }
      };
      exports.FileBatches = FileBatches;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/vector-stores/vector-stores.js
  var require_vector_stores = __commonJS({
    "../PromptRepository/node_modules/openai/resources/vector-stores/vector-stores.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.VectorStoreSearchResponsesPage = exports.VectorStoresPage = exports.VectorStores = void 0;
      var resource_1 = require_resource();
      var core_1 = require_core();
      var FileBatchesAPI = __importStar(require_file_batches());
      var file_batches_1 = require_file_batches();
      var FilesAPI = __importStar(require_files2());
      var files_1 = require_files2();
      var pagination_1 = require_pagination();
      var VectorStores = class extends resource_1.APIResource {
        constructor() {
          super(...arguments);
          this.files = new FilesAPI.Files(this._client);
          this.fileBatches = new FileBatchesAPI.FileBatches(this._client);
        }
        /**
         * Create a vector store.
         */
        create(body, options) {
          return this._client.post("/vector_stores", {
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Retrieves a vector store.
         */
        retrieve(vectorStoreId, options) {
          return this._client.get(`/vector_stores/${vectorStoreId}`, {
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Modifies a vector store.
         */
        update(vectorStoreId, body, options) {
          return this._client.post(`/vector_stores/${vectorStoreId}`, {
            body,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        list(query = {}, options) {
          if ((0, core_1.isRequestOptions)(query)) {
            return this.list({}, query);
          }
          return this._client.getAPIList("/vector_stores", VectorStoresPage, {
            query,
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Delete a vector store.
         */
        del(vectorStoreId, options) {
          return this._client.delete(`/vector_stores/${vectorStoreId}`, {
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
        /**
         * Search a vector store for relevant chunks based on a query and file attributes
         * filter.
         */
        search(vectorStoreId, body, options) {
          return this._client.getAPIList(`/vector_stores/${vectorStoreId}/search`, VectorStoreSearchResponsesPage, {
            body,
            method: "post",
            ...options,
            headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
          });
        }
      };
      exports.VectorStores = VectorStores;
      var VectorStoresPage = class extends pagination_1.CursorPage {
      };
      exports.VectorStoresPage = VectorStoresPage;
      var VectorStoreSearchResponsesPage = class extends pagination_1.Page {
      };
      exports.VectorStoreSearchResponsesPage = VectorStoreSearchResponsesPage;
      VectorStores.VectorStoresPage = VectorStoresPage;
      VectorStores.VectorStoreSearchResponsesPage = VectorStoreSearchResponsesPage;
      VectorStores.Files = files_1.Files;
      VectorStores.VectorStoreFilesPage = files_1.VectorStoreFilesPage;
      VectorStores.FileContentResponsesPage = files_1.FileContentResponsesPage;
      VectorStores.FileBatches = file_batches_1.FileBatches;
    }
  });

  // ../PromptRepository/node_modules/openai/resources/index.js
  var require_resources = __commonJS({
    "../PromptRepository/node_modules/openai/resources/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.VectorStores = exports.VectorStoreSearchResponsesPage = exports.VectorStoresPage = exports.Uploads = exports.Responses = exports.Moderations = exports.Models = exports.ModelsPage = exports.Images = exports.FineTuning = exports.Files = exports.FileObjectsPage = exports.Embeddings = exports.Completions = exports.Beta = exports.Batches = exports.BatchesPage = exports.Audio = void 0;
      __exportStar(require_chat2(), exports);
      __exportStar(require_shared(), exports);
      var audio_1 = require_audio();
      Object.defineProperty(exports, "Audio", { enumerable: true, get: function() {
        return audio_1.Audio;
      } });
      var batches_1 = require_batches();
      Object.defineProperty(exports, "BatchesPage", { enumerable: true, get: function() {
        return batches_1.BatchesPage;
      } });
      Object.defineProperty(exports, "Batches", { enumerable: true, get: function() {
        return batches_1.Batches;
      } });
      var beta_1 = require_beta();
      Object.defineProperty(exports, "Beta", { enumerable: true, get: function() {
        return beta_1.Beta;
      } });
      var completions_1 = require_completions4();
      Object.defineProperty(exports, "Completions", { enumerable: true, get: function() {
        return completions_1.Completions;
      } });
      var embeddings_1 = require_embeddings();
      Object.defineProperty(exports, "Embeddings", { enumerable: true, get: function() {
        return embeddings_1.Embeddings;
      } });
      var files_1 = require_files();
      Object.defineProperty(exports, "FileObjectsPage", { enumerable: true, get: function() {
        return files_1.FileObjectsPage;
      } });
      Object.defineProperty(exports, "Files", { enumerable: true, get: function() {
        return files_1.Files;
      } });
      var fine_tuning_1 = require_fine_tuning();
      Object.defineProperty(exports, "FineTuning", { enumerable: true, get: function() {
        return fine_tuning_1.FineTuning;
      } });
      var images_1 = require_images();
      Object.defineProperty(exports, "Images", { enumerable: true, get: function() {
        return images_1.Images;
      } });
      var models_1 = require_models();
      Object.defineProperty(exports, "ModelsPage", { enumerable: true, get: function() {
        return models_1.ModelsPage;
      } });
      Object.defineProperty(exports, "Models", { enumerable: true, get: function() {
        return models_1.Models;
      } });
      var moderations_1 = require_moderations();
      Object.defineProperty(exports, "Moderations", { enumerable: true, get: function() {
        return moderations_1.Moderations;
      } });
      var responses_1 = require_responses();
      Object.defineProperty(exports, "Responses", { enumerable: true, get: function() {
        return responses_1.Responses;
      } });
      var uploads_1 = require_uploads2();
      Object.defineProperty(exports, "Uploads", { enumerable: true, get: function() {
        return uploads_1.Uploads;
      } });
      var vector_stores_1 = require_vector_stores();
      Object.defineProperty(exports, "VectorStoresPage", { enumerable: true, get: function() {
        return vector_stores_1.VectorStoresPage;
      } });
      Object.defineProperty(exports, "VectorStoreSearchResponsesPage", { enumerable: true, get: function() {
        return vector_stores_1.VectorStoreSearchResponsesPage;
      } });
      Object.defineProperty(exports, "VectorStores", { enumerable: true, get: function() {
        return vector_stores_1.VectorStores;
      } });
    }
  });

  // ../PromptRepository/node_modules/openai/index.js
  var require_openai = __commonJS({
    "../PromptRepository/node_modules/openai/index.js"(exports, module) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var _a;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.UnprocessableEntityError = exports.PermissionDeniedError = exports.InternalServerError = exports.AuthenticationError = exports.BadRequestError = exports.RateLimitError = exports.ConflictError = exports.NotFoundError = exports.APIUserAbortError = exports.APIConnectionTimeoutError = exports.APIConnectionError = exports.APIError = exports.OpenAIError = exports.fileFromPath = exports.toFile = exports.AzureOpenAI = exports.OpenAI = void 0;
      var qs = __importStar(require_qs());
      var Core = __importStar(require_core());
      var Errors = __importStar(require_error());
      var Pagination = __importStar(require_pagination());
      var Uploads = __importStar(require_uploads());
      var API = __importStar(require_resources());
      var batches_1 = require_batches();
      var completions_1 = require_completions4();
      var embeddings_1 = require_embeddings();
      var files_1 = require_files();
      var images_1 = require_images();
      var models_1 = require_models();
      var moderations_1 = require_moderations();
      var audio_1 = require_audio();
      var beta_1 = require_beta();
      var chat_1 = require_chat();
      var fine_tuning_1 = require_fine_tuning();
      var responses_1 = require_responses();
      var uploads_1 = require_uploads2();
      var vector_stores_1 = require_vector_stores();
      var completions_2 = require_completions();
      var OpenAI = class extends Core.APIClient {
        /**
         * API Client for interfacing with the OpenAI API.
         *
         * @param {string | undefined} [opts.apiKey=process.env['OPENAI_API_KEY'] ?? undefined]
         * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]
         * @param {string | null | undefined} [opts.project=process.env['OPENAI_PROJECT_ID'] ?? null]
         * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL'] ?? https://api.openai.com/v1] - Override the default base URL for the API.
         * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
         * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
         * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
         * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
         * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
         * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
         * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.
         */
        constructor({ baseURL = Core.readEnv("OPENAI_BASE_URL"), apiKey = Core.readEnv("OPENAI_API_KEY"), organization = Core.readEnv("OPENAI_ORG_ID") ?? null, project = Core.readEnv("OPENAI_PROJECT_ID") ?? null, ...opts } = {}) {
          if (apiKey === void 0) {
            throw new Errors.OpenAIError("The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).");
          }
          const options = {
            apiKey,
            organization,
            project,
            ...opts,
            baseURL: baseURL || `https://api.openai.com/v1`
          };
          if (!options.dangerouslyAllowBrowser && Core.isRunningInBrowser()) {
            throw new Errors.OpenAIError("It looks like you're running in a browser-like environment.\n\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\n\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\n\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\n");
          }
          super({
            baseURL: options.baseURL,
            timeout: options.timeout ?? 6e5,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch
          });
          this.completions = new API.Completions(this);
          this.chat = new API.Chat(this);
          this.embeddings = new API.Embeddings(this);
          this.files = new API.Files(this);
          this.images = new API.Images(this);
          this.audio = new API.Audio(this);
          this.moderations = new API.Moderations(this);
          this.models = new API.Models(this);
          this.fineTuning = new API.FineTuning(this);
          this.vectorStores = new API.VectorStores(this);
          this.beta = new API.Beta(this);
          this.batches = new API.Batches(this);
          this.uploads = new API.Uploads(this);
          this.responses = new API.Responses(this);
          this._options = options;
          this.apiKey = apiKey;
          this.organization = organization;
          this.project = project;
        }
        defaultQuery() {
          return this._options.defaultQuery;
        }
        defaultHeaders(opts) {
          return {
            ...super.defaultHeaders(opts),
            "OpenAI-Organization": this.organization,
            "OpenAI-Project": this.project,
            ...this._options.defaultHeaders
          };
        }
        authHeaders(opts) {
          return { Authorization: `Bearer ${this.apiKey}` };
        }
        stringifyQuery(query) {
          return qs.stringify(query, { arrayFormat: "brackets" });
        }
      };
      exports.OpenAI = OpenAI;
      _a = OpenAI;
      OpenAI.OpenAI = _a;
      OpenAI.DEFAULT_TIMEOUT = 6e5;
      OpenAI.OpenAIError = Errors.OpenAIError;
      OpenAI.APIError = Errors.APIError;
      OpenAI.APIConnectionError = Errors.APIConnectionError;
      OpenAI.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
      OpenAI.APIUserAbortError = Errors.APIUserAbortError;
      OpenAI.NotFoundError = Errors.NotFoundError;
      OpenAI.ConflictError = Errors.ConflictError;
      OpenAI.RateLimitError = Errors.RateLimitError;
      OpenAI.BadRequestError = Errors.BadRequestError;
      OpenAI.AuthenticationError = Errors.AuthenticationError;
      OpenAI.InternalServerError = Errors.InternalServerError;
      OpenAI.PermissionDeniedError = Errors.PermissionDeniedError;
      OpenAI.UnprocessableEntityError = Errors.UnprocessableEntityError;
      OpenAI.toFile = Uploads.toFile;
      OpenAI.fileFromPath = Uploads.fileFromPath;
      OpenAI.Completions = completions_1.Completions;
      OpenAI.Chat = chat_1.Chat;
      OpenAI.ChatCompletionsPage = completions_2.ChatCompletionsPage;
      OpenAI.Embeddings = embeddings_1.Embeddings;
      OpenAI.Files = files_1.Files;
      OpenAI.FileObjectsPage = files_1.FileObjectsPage;
      OpenAI.Images = images_1.Images;
      OpenAI.Audio = audio_1.Audio;
      OpenAI.Moderations = moderations_1.Moderations;
      OpenAI.Models = models_1.Models;
      OpenAI.ModelsPage = models_1.ModelsPage;
      OpenAI.FineTuning = fine_tuning_1.FineTuning;
      OpenAI.VectorStores = vector_stores_1.VectorStores;
      OpenAI.VectorStoresPage = vector_stores_1.VectorStoresPage;
      OpenAI.VectorStoreSearchResponsesPage = vector_stores_1.VectorStoreSearchResponsesPage;
      OpenAI.Beta = beta_1.Beta;
      OpenAI.Batches = batches_1.Batches;
      OpenAI.BatchesPage = batches_1.BatchesPage;
      OpenAI.Uploads = uploads_1.Uploads;
      OpenAI.Responses = responses_1.Responses;
      var AzureOpenAI = class extends OpenAI {
        /**
         * API Client for interfacing with the Azure OpenAI API.
         *
         * @param {string | undefined} [opts.apiVersion=process.env['OPENAI_API_VERSION'] ?? undefined]
         * @param {string | undefined} [opts.endpoint=process.env['AZURE_OPENAI_ENDPOINT'] ?? undefined] - Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`
         * @param {string | undefined} [opts.apiKey=process.env['AZURE_OPENAI_API_KEY'] ?? undefined]
         * @param {string | undefined} opts.deployment - A model deployment, if given, sets the base client URL to include `/deployments/{deployment}`.
         * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]
         * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL']] - Sets the base URL for the API, e.g. `https://example-resource.azure.openai.com/openai/`.
         * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
         * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
         * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
         * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
         * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
         * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
         * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.
         */
        constructor({ baseURL = Core.readEnv("OPENAI_BASE_URL"), apiKey = Core.readEnv("AZURE_OPENAI_API_KEY"), apiVersion = Core.readEnv("OPENAI_API_VERSION"), endpoint, deployment, azureADTokenProvider, dangerouslyAllowBrowser, ...opts } = {}) {
          if (!apiVersion) {
            throw new Errors.OpenAIError("The OPENAI_API_VERSION environment variable is missing or empty; either provide it, or instantiate the AzureOpenAI client with an apiVersion option, like new AzureOpenAI({ apiVersion: 'My API Version' }).");
          }
          if (typeof azureADTokenProvider === "function") {
            dangerouslyAllowBrowser = true;
          }
          if (!azureADTokenProvider && !apiKey) {
            throw new Errors.OpenAIError("Missing credentials. Please pass one of `apiKey` and `azureADTokenProvider`, or set the `AZURE_OPENAI_API_KEY` environment variable.");
          }
          if (azureADTokenProvider && apiKey) {
            throw new Errors.OpenAIError("The `apiKey` and `azureADTokenProvider` arguments are mutually exclusive; only one can be passed at a time.");
          }
          apiKey ?? (apiKey = API_KEY_SENTINEL);
          opts.defaultQuery = { ...opts.defaultQuery, "api-version": apiVersion };
          if (!baseURL) {
            if (!endpoint) {
              endpoint = process.env["AZURE_OPENAI_ENDPOINT"];
            }
            if (!endpoint) {
              throw new Errors.OpenAIError("Must provide one of the `baseURL` or `endpoint` arguments, or the `AZURE_OPENAI_ENDPOINT` environment variable");
            }
            baseURL = `${endpoint}/openai`;
          } else {
            if (endpoint) {
              throw new Errors.OpenAIError("baseURL and endpoint are mutually exclusive");
            }
          }
          super({
            apiKey,
            baseURL,
            ...opts,
            ...dangerouslyAllowBrowser !== void 0 ? { dangerouslyAllowBrowser } : {}
          });
          this.apiVersion = "";
          this._azureADTokenProvider = azureADTokenProvider;
          this.apiVersion = apiVersion;
          this.deploymentName = deployment;
        }
        buildRequest(options, props = {}) {
          if (_deployments_endpoints.has(options.path) && options.method === "post" && options.body !== void 0) {
            if (!Core.isObj(options.body)) {
              throw new Error("Expected request body to be an object");
            }
            const model = this.deploymentName || options.body["model"] || options.__metadata?.["model"];
            if (model !== void 0 && !this.baseURL.includes("/deployments")) {
              options.path = `/deployments/${model}${options.path}`;
            }
          }
          return super.buildRequest(options, props);
        }
        async _getAzureADToken() {
          if (typeof this._azureADTokenProvider === "function") {
            const token2 = await this._azureADTokenProvider();
            if (!token2 || typeof token2 !== "string") {
              throw new Errors.OpenAIError(`Expected 'azureADTokenProvider' argument to return a string but it returned ${token2}`);
            }
            return token2;
          }
          return void 0;
        }
        authHeaders(opts) {
          return {};
        }
        async prepareOptions(opts) {
          if (opts.headers?.["api-key"]) {
            return super.prepareOptions(opts);
          }
          const token2 = await this._getAzureADToken();
          opts.headers ?? (opts.headers = {});
          if (token2) {
            opts.headers["Authorization"] = `Bearer ${token2}`;
          } else if (this.apiKey !== API_KEY_SENTINEL) {
            opts.headers["api-key"] = this.apiKey;
          } else {
            throw new Errors.OpenAIError("Unable to handle auth");
          }
          return super.prepareOptions(opts);
        }
      };
      exports.AzureOpenAI = AzureOpenAI;
      var _deployments_endpoints = /* @__PURE__ */ new Set([
        "/completions",
        "/chat/completions",
        "/embeddings",
        "/audio/transcriptions",
        "/audio/translations",
        "/audio/speech",
        "/images/generations"
      ]);
      var API_KEY_SENTINEL = "<Missing Key>";
      var uploads_2 = require_uploads();
      Object.defineProperty(exports, "toFile", { enumerable: true, get: function() {
        return uploads_2.toFile;
      } });
      Object.defineProperty(exports, "fileFromPath", { enumerable: true, get: function() {
        return uploads_2.fileFromPath;
      } });
      var error_1 = require_error();
      Object.defineProperty(exports, "OpenAIError", { enumerable: true, get: function() {
        return error_1.OpenAIError;
      } });
      Object.defineProperty(exports, "APIError", { enumerable: true, get: function() {
        return error_1.APIError;
      } });
      Object.defineProperty(exports, "APIConnectionError", { enumerable: true, get: function() {
        return error_1.APIConnectionError;
      } });
      Object.defineProperty(exports, "APIConnectionTimeoutError", { enumerable: true, get: function() {
        return error_1.APIConnectionTimeoutError;
      } });
      Object.defineProperty(exports, "APIUserAbortError", { enumerable: true, get: function() {
        return error_1.APIUserAbortError;
      } });
      Object.defineProperty(exports, "NotFoundError", { enumerable: true, get: function() {
        return error_1.NotFoundError;
      } });
      Object.defineProperty(exports, "ConflictError", { enumerable: true, get: function() {
        return error_1.ConflictError;
      } });
      Object.defineProperty(exports, "RateLimitError", { enumerable: true, get: function() {
        return error_1.RateLimitError;
      } });
      Object.defineProperty(exports, "BadRequestError", { enumerable: true, get: function() {
        return error_1.BadRequestError;
      } });
      Object.defineProperty(exports, "AuthenticationError", { enumerable: true, get: function() {
        return error_1.AuthenticationError;
      } });
      Object.defineProperty(exports, "InternalServerError", { enumerable: true, get: function() {
        return error_1.InternalServerError;
      } });
      Object.defineProperty(exports, "PermissionDeniedError", { enumerable: true, get: function() {
        return error_1.PermissionDeniedError;
      } });
      Object.defineProperty(exports, "UnprocessableEntityError", { enumerable: true, get: function() {
        return error_1.UnprocessableEntityError;
      } });
      exports = module.exports = OpenAI;
      module.exports.AzureOpenAI = AzureOpenAI;
      exports.default = OpenAI;
    }
  });

  // ../PromptRepository/dist/src/Chat.js
  var require_Chat = __commonJS({
    "../PromptRepository/dist/src/Chat.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ChatDriverFactory = void 0;
      var openai_1 = __importDefault(require_openai());
      var entry_1 = require_entry();
      var entry_2 = require_entry();
      var ChatDriverFactory = class {
        create(model, provider) {
          return new OpenAIChatDriver(model);
        }
      };
      exports.ChatDriverFactory = ChatDriverFactory;
      var OpenAIChatDriver = class {
        model = "gpt-4o";
        constructor(model) {
          if (model === entry_2.EModel.kLarge) {
            this.model = "gpt-4.1";
          } else if (model === entry_2.EModel.kMini) {
            this.model = "gpt-4.1-mini";
          }
        }
        getModelResponse(systemPrompt, userPrompt, messageHistory) {
          return getModelResponse(this.model, systemPrompt, userPrompt, messageHistory);
        }
        getStreamedModelResponse(systemPrompt, userPrompt, messageHistory) {
          return getStreamedModelResponse(this.model, systemPrompt, userPrompt, messageHistory);
        }
        getConstrainedModelResponse(systemPrompt, userPrompt, jsonSchema, defaultValue, messageHistory) {
          return getConstrainedModelResponse(this.model, systemPrompt, userPrompt, jsonSchema, defaultValue, messageHistory);
        }
      };
      async function getModelResponse(model, systemPrompt, userPrompt, messageHistory) {
        if (!process.env.OPENAI_API_KEY) {
          throw new Error("OPENAI_API_KEY environment variable is not set");
        }
        const openai = new openai_1.default({
          apiKey: process.env.OPENAI_API_KEY
        });
        const messages = [
          ...messageHistory || [],
          {
            role: entry_1.EChatRole.kUser,
            content: userPrompt,
            timestamp: /* @__PURE__ */ new Date()
          }
        ];
        try {
          const response = await openai.responses.create({
            ...systemPrompt && { "instructions": systemPrompt },
            "input": messages.map((msg) => ({
              role: msg.role === entry_1.EChatRole.kUser ? "user" : "assistant",
              content: msg.content
            })),
            "model": model,
            "temperature": 0.25
          });
          if (!response.output_text) {
            throw new Error("No response content received from OpenAI");
          }
          return response.output_text;
        } catch (error) {
          if (error instanceof Error) {
            throw new Error(`OpenAI API error: ${error.message}`);
          }
          throw new Error("Unknown error occurred while calling OpenAI API");
        }
      }
      function getStreamedModelResponse(model, systemPrompt, userPrompt, messageHistory) {
        const openai = new openai_1.default({
          apiKey: process.env.OPENAI_API_KEY
        });
        const messages = [
          ...messageHistory || [],
          {
            role: entry_1.EChatRole.kUser,
            content: userPrompt,
            timestamp: /* @__PURE__ */ new Date()
          }
        ];
        let streamPromise = openai.responses.create({
          ...systemPrompt && { "instructions": systemPrompt },
          "input": messages.map((msg) => ({
            role: msg.role === entry_1.EChatRole.kUser ? "user" : "assistant",
            content: msg.content
          })),
          "model": model,
          "temperature": 0.25,
          "stream": true
        });
        let streamIterator = null;
        return {
          async next() {
            try {
              if (!streamIterator) {
                const stream = await streamPromise;
                streamIterator = stream[Symbol.asyncIterator]();
              }
              let looking = true;
              while (looking) {
                const chunk = await streamIterator.next();
                if (chunk.done) {
                  streamIterator = null;
                  return { value: "", done: true };
                }
                if ("delta" in chunk.value && typeof chunk.value.delta === "string") {
                  looking = false;
                  return { value: chunk.value.delta, done: false };
                }
              }
              return { value: "", done: true };
            } catch (error) {
              streamIterator = null;
              if (error instanceof Error) {
                throw new Error(`Stream error: ${error.message}`);
              }
              throw error;
            }
          },
          return() {
            streamIterator = null;
            return Promise.resolve({ value: "", done: true });
          },
          throw(error) {
            streamIterator = null;
            return Promise.reject(error);
          }
        };
      }
      async function getConstrainedModelResponse(model, systemPrompt, userPrompt, jsonSchema, defaultValue, messageHistory) {
        const openai = new openai_1.default({
          apiKey: process.env.OPENAI_API_KEY
        });
        const messages = [
          ...messageHistory || [],
          {
            role: entry_1.EChatRole.kUser,
            content: userPrompt,
            timestamp: /* @__PURE__ */ new Date()
          }
        ];
        const response = await openai.responses.parse({
          ...systemPrompt && { "instructions": systemPrompt },
          "input": messages.map((msg) => ({
            role: msg.role === entry_1.EChatRole.kUser ? "user" : "assistant",
            content: msg.content
          })),
          "model": model,
          "temperature": 0.25,
          "text": { "format": { type: "json_schema", "strict": true, "name": "constrainedOutput", "schema": jsonSchema } }
        });
        return response.output_parsed ?? defaultValue;
      }
    }
  });

  // ../PromptRepository/dist/src/Asserts.js
  var require_Asserts = __commonJS({
    "../PromptRepository/dist/src/Asserts.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.throwIfFalse = exports.throwIfNull = exports.throwIfUndefined = exports.InvalidOperationError = exports.InvalidParameterError = void 0;
      var InvalidParameterError = class _InvalidParameterError extends Error {
        constructor(message) {
          super(message);
          Object.setPrototypeOf(this, new.target.prototype);
          this.name = _InvalidParameterError.name;
        }
      };
      exports.InvalidParameterError = InvalidParameterError;
      var InvalidOperationError = class _InvalidOperationError extends Error {
        constructor(message) {
          super(message);
          Object.setPrototypeOf(this, new.target.prototype);
          this.name = _InvalidOperationError.name;
        }
      };
      exports.InvalidOperationError = InvalidOperationError;
      var throwIfUndefined = (x) => {
        if (typeof x === "undefined")
          throw new ReferenceError("Object is undefined.");
      };
      exports.throwIfUndefined = throwIfUndefined;
      var throwIfNull = (x) => {
        if (x === null)
          throw new ReferenceError("Object is null.");
      };
      exports.throwIfNull = throwIfNull;
      var throwIfFalse = (x) => {
        if (!x)
          throw new ReferenceError("Value is false.");
      };
      exports.throwIfFalse = throwIfFalse;
    }
  });

  // ../PromptRepository/dist/src/entry.js
  var require_entry = __commonJS({
    "../PromptRepository/dist/src/entry.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.EChatRole = exports.EModelProvider = exports.EModel = exports.ParameterTypeEnum = exports.ParameterTypeString = exports.ParameterTypeNumber = exports.InvalidOperationError = exports.InvalidParameterError = exports.throwIfFalse = exports.throwIfNull = exports.throwIfUndefined = exports.ChatDriverFactory = exports.PromptInMemoryRepository = exports.PromptFileRepository = void 0;
      var PromptRepository_1 = require_PromptRepository();
      Object.defineProperty(exports, "PromptFileRepository", { enumerable: true, get: function() {
        return PromptRepository_1.PromptFileRepository;
      } });
      Object.defineProperty(exports, "PromptInMemoryRepository", { enumerable: true, get: function() {
        return PromptRepository_1.PromptInMemoryRepository;
      } });
      var Chat_1 = require_Chat();
      Object.defineProperty(exports, "ChatDriverFactory", { enumerable: true, get: function() {
        return Chat_1.ChatDriverFactory;
      } });
      var Asserts_1 = require_Asserts();
      Object.defineProperty(exports, "throwIfUndefined", { enumerable: true, get: function() {
        return Asserts_1.throwIfUndefined;
      } });
      Object.defineProperty(exports, "throwIfNull", { enumerable: true, get: function() {
        return Asserts_1.throwIfNull;
      } });
      Object.defineProperty(exports, "throwIfFalse", { enumerable: true, get: function() {
        return Asserts_1.throwIfFalse;
      } });
      Object.defineProperty(exports, "InvalidParameterError", { enumerable: true, get: function() {
        return Asserts_1.InvalidParameterError;
      } });
      Object.defineProperty(exports, "InvalidOperationError", { enumerable: true, get: function() {
        return Asserts_1.InvalidOperationError;
      } });
      exports.ParameterTypeNumber = "kNumber";
      exports.ParameterTypeString = "kString";
      exports.ParameterTypeEnum = "kEnum";
      var EModel;
      (function(EModel2) {
        EModel2["kLarge"] = "kLarge";
        EModel2["kMini"] = "kMini";
      })(EModel || (exports.EModel = EModel = {}));
      var EModelProvider;
      (function(EModelProvider2) {
        EModelProvider2["kOpenAI"] = "kOpenAI";
      })(EModelProvider || (exports.EModelProvider = EModelProvider = {}));
      var EChatRole4;
      (function(EChatRole5) {
        EChatRole5["kUser"] = "user";
        EChatRole5["kAssistant"] = "assistant";
      })(EChatRole4 || (exports.EChatRole = EChatRole4 = {}));
    }
  });

  // import/AssistantChatApiTypes.ts
  var init_AssistantChatApiTypes = __esm({
    "import/AssistantChatApiTypes.ts"() {
      "use strict";
    }
  });

  // src/CommonStyles.ts
  var standardColumnElementStyles, standardRowElementStyles, standardCenteredRowElementStyles, standardJustifiedRowElementStyles, mobileRowElementStyles, standardTextStyles, standardLinkStyles;
  var init_CommonStyles = __esm({
    "src/CommonStyles.ts"() {
      "use strict";
      init_lib22();
      standardColumnElementStyles = makeStyles2({
        root: {
          width: "100%"
        }
      });
      standardRowElementStyles = makeStyles2({
        root: {
          display: "flex",
          flexDirection: "row",
          width: "100%"
        }
      });
      standardCenteredRowElementStyles = makeStyles2({
        root: {
          display: "flex",
          flexDirection: "row",
          width: "100%",
          justifyContent: "center",
          padding: "6px 6px",
          alignItems: "center",
          alignContent: "center",
          alignSelf: "center"
        }
      });
      standardJustifiedRowElementStyles = makeStyles2({
        root: {
          display: "flex",
          flexDirection: "row",
          width: "100%",
          justifyContent: "space-between",
          padding: "6px 6px",
          alignItems: "center",
          alignSelf: "center"
        }
      });
      mobileRowElementStyles = makeStyles2({
        root: {
          display: "flex",
          flexDirection: "column",
          width: "100%",
          justifyContent: "center",
          padding: "6px 6px",
          alignItems: "center",
          alignSelf: "center"
        }
      });
      standardTextStyles = makeStyles2({
        root: {
          display: "flex",
          flexDirection: "column"
        },
        heading: {
          textAlign: "center",
          fontSize: "16pt",
          fontWeight: "bold",
          marginBottom: "12px"
        },
        subHeadingLeft: {
          textAlign: "left",
          alignSelf: "flex-start",
          fontSize: "12pt",
          fontWeight: "bold",
          marginTop: "12px",
          marginBottom: "12px"
        },
        normal: {
          textAlign: "left",
          alignSelf: "flex-start",
          fontSize: "10pt",
          marginBottom: "10px"
        },
        normalGrey: {
          textAlign: "left",
          alignSelf: "flex-start",
          fontSize: "10pt",
          color: "grey",
          marginBottom: "10px"
        },
        textarea: {
          width: "100%",
          height: "100%",
          textAlign: "left",
          verticalAlign: "top"
        },
        centredHint: {
          textAlign: "center",
          fontSize: "8pt",
          color: "grey",
          marginTop: "8px",
          marginBottom: "8px"
        }
      });
      standardLinkStyles = makeStyles2({
        left: {
          textAlign: "left",
          alignSelf: "flex-start"
        },
        centred: {
          textAlign: "center"
        }
      });
    }
  });

  // src/MultilineEdit.tsx
  function wrapText(context, text, width, defaultHeight, defaultWidth, lineSeparation) {
    let y = 0;
    let hardLines = text.split("\n");
    if (hardLines.length === 0)
      return defaultHeight;
    let dy = 0;
    let lines = 0;
    for (var iHardLines = 0; iHardLines < hardLines.length; iHardLines++) {
      var line2 = "";
      var words = hardLines[iHardLines].split(" ");
      var lineWidth = 0;
      var lineHeightDelta = defaultHeight;
      for (var iWords = 0; iWords < words.length; iWords++) {
        var testLine = line2 + words[iWords] + " ";
        var testWidth;
        if (context) {
          let metrics = context.measureText(testLine);
          testWidth = metrics.width;
          lineHeightDelta = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
        } else {
          testWidth = defaultWidth * testLine.length;
          lineHeightDelta = defaultHeight;
        }
        if (testWidth > width || testWidth > width && iWords === 0) {
          line2 = words[iWords] + " ";
          y += lineHeightDelta;
          dy += lineHeightDelta;
          lineWidth = testWidth - lineWidth - defaultWidth / 2;
          lines++;
          if (iWords + 1 < words.length)
            dy += lineSeparation;
        } else {
          line2 = testLine;
          lineWidth = testWidth - defaultWidth / 2;
        }
      }
      if (context) {
        let metrics = context.measureText(line2);
        testWidth = metrics.width;
        lineHeightDelta = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
      } else {
        testWidth = defaultWidth * line2.length;
        lineHeightDelta = defaultHeight;
      }
      y += lineHeightDelta;
      dy += lineHeightDelta;
      lines++;
      if (iHardLines + 1 < hardLines.length)
        dy += lineSeparation;
    }
    return dy;
  }
  function calculateDyNeeded(width, value, font, messagePrompt2HBorder, messagePromptLineSpace, defaultHeightLines) {
    const smallestTextForWrap = "A";
    let offScreenCanvas = new OffscreenCanvas(width, width * 10);
    if (!offScreenCanvas)
      throw new TypeError("Failed to create offscreen canvas");
    let offscreenContext = offScreenCanvas.getContext("2d");
    offscreenContext.font = font;
    let metrics = offscreenContext.measureText(smallestTextForWrap);
    let spaceCharWidth = metrics.width;
    let spaceCharHeight = metrics.fontBoundingBoxAscent + metrics.fontBoundingBoxDescent;
    let dyNeeded = wrapText(
      offscreenContext,
      value.length > 0 ? value : smallestTextForWrap,
      width - messagePrompt2HBorder,
      spaceCharHeight,
      spaceCharWidth,
      messagePromptLineSpace
    );
    let minRows = "A" + "\n".repeat(defaultHeightLines - 1) + "A";
    let dyMin = wrapText(
      offscreenContext,
      minRows,
      width,
      spaceCharHeight,
      spaceCharWidth,
      messagePromptLineSpace
    );
    let tenRows = "A\nA\nA\nA\nA\nA\nA\nA\nA\nA\n";
    let dyMax = wrapText(
      offscreenContext,
      tenRows,
      width,
      spaceCharHeight,
      spaceCharWidth,
      messagePromptLineSpace
    );
    offScreenCanvas = null;
    offscreenContext = null;
    return Math.max(dyMin, Math.min(dyMax, dyNeeded));
  }
  var import_react26, MultilineEdit;
  var init_MultilineEdit = __esm({
    "src/MultilineEdit.tsx"() {
      "use strict";
      import_react26 = __toESM(require_react());
      init_lib22();
      init_lib10();
      init_CommonStyles();
      init_MultilineEditUIStrings();
      MultilineEdit = (props) => {
        const textFieldClasses = standardTextStyles();
        const columnClasses = standardCenteredRowElementStyles();
        const [width, setWidth] = (0, import_react26.useState)(0);
        const textAreaId = "textAreaId;";
        const fontSize = parseInt(props.fontNameForTextWrapCalculation.match(/\d+/)?.[0] || "12");
        const kMessagePrompt2VBorder = fontSize * 2;
        const kMessagePrompt2HBorder = fontSize * 2;
        const kMessagePromptLineSpace = Math.floor(fontSize * 9 / 16);
        (0, import_react26.useLayoutEffect)(() => {
          const textArea = document.getElementById(
            textAreaId
          );
          if (textArea) {
            let dx = textArea.offsetWidth;
            if (width !== dx) {
              setWidth(dx);
            }
          }
        }, []);
        function onKeyChange(ev, data) {
          if (data.value.length <= props.maxLength) {
            props.onChange(data.value);
          } else {
            props.onChange(data.value.substring(0, props.maxLength));
          }
        }
        function onSend(event, value) {
          var processed = false;
          switch (event.key) {
            case "Enter":
              if (event.ctrlKey) {
                props.onSend(value);
                processed = true;
              }
              break;
            case "Escape":
              props.onChange("");
              processed = true;
              break;
            default:
              break;
          }
          if (processed) {
            event.stopPropagation();
            event.preventDefault();
          }
        }
        ;
        function onClick(event) {
          props.onSend(props.message);
        }
        let bump = kMessagePrompt2VBorder;
        var dyNeeded = bump;
        if (width !== 0)
          dyNeeded = calculateDyNeeded(
            width,
            props.message,
            props.fontNameForTextWrapCalculation,
            kMessagePrompt2HBorder,
            kMessagePromptLineSpace,
            props.defaultHeightLines
          ) + bump;
        return /* @__PURE__ */ import_react26.default.createElement("div", { style: { width: "100%", maxWidth: "100%" } }, /* @__PURE__ */ import_react26.default.createElement(Text, { className: textFieldClasses.normal, style: { paddingLeft: "4px", paddingRight: "4px" } }, props.caption), /* @__PURE__ */ import_react26.default.createElement(
          Textarea,
          {
            id: textAreaId,
            appearance: "outline",
            placeholder: props.placeholder,
            maxLength: props.maxLength,
            textarea: { className: textFieldClasses.textarea, style: { paddingLeft: "4px", paddingRight: "4px" } },
            resize: "none",
            value: props.message,
            onChange: onKeyChange,
            disabled: !props.enabled,
            style: {
              height: dyNeeded.toString() + "px",
              width: "100%",
              paddingLeft: "4px",
              paddingRight: "4px"
            },
            onKeyDown: (e) => onSend(e, props.message),
            autoFocus: true
          }
        ), /* @__PURE__ */ import_react26.default.createElement("div", { className: columnClasses.root }, /* @__PURE__ */ import_react26.default.createElement(Text, { className: textFieldClasses.centredHint }, "Ctrl+Enter to confirm or Esc to cancel." /* kMessageTextPrompt */), /* @__PURE__ */ import_react26.default.createElement(Toolbar, { "aria-label": "Default" }, /* @__PURE__ */ import_react26.default.createElement(
          ToolbarButton,
          {
            "aria-label": "Send",
            appearance: "subtle",
            icon: /* @__PURE__ */ import_react26.default.createElement(SendRegular, null),
            onClick,
            disabled: !props.enabled || props.message.length === 0
          }
        ))));
      };
    }
  });

  // src/Message.tsx
  var import_react27, Message;
  var init_Message = __esm({
    "src/Message.tsx"() {
      "use strict";
      import_react27 = __toESM(require_react());
      init_lib22();
      init_lib10();
      init_CommonStyles();
      Message = (props) => {
        const messageClasses = standardColumnElementStyles();
        const [isDismissed, setIsDismissed] = (0, import_react27.useState)(false);
        const onDismiss = () => {
          setIsDismissed(true);
          props.onDismiss?.();
        };
        return !isDismissed && /* @__PURE__ */ import_react27.default.createElement(MessageBarGroup, { className: messageClasses.root }, /* @__PURE__ */ import_react27.default.createElement(MessageBar, { intent: props.intent }, /* @__PURE__ */ import_react27.default.createElement(MessageBarBody, null, /* @__PURE__ */ import_react27.default.createElement(MessageBarTitle, null, props.title), props.body), props.dismissable && /* @__PURE__ */ import_react27.default.createElement(
          MessageBarActions,
          {
            containerAction: /* @__PURE__ */ import_react27.default.createElement(
              Button,
              {
                "aria-label": "dismiss",
                appearance: "transparent",
                icon: /* @__PURE__ */ import_react27.default.createElement(DismissRegular, null),
                onClick: onDismiss
              }
            )
          }
        )));
      };
    }
  });

  // src/UIStateMachine.ts
  var AssistantUIStateMachine;
  var init_UIStateMachine = __esm({
    "src/UIStateMachine.ts"() {
      "use strict";
      AssistantUIStateMachine = class {
        state;
        constructor(initialState) {
          this.state = initialState;
        }
        transition(event) {
          switch (this.state) {
            case "Waiting" /* kWaiting */:
              if (event === "StartedScreening" /* kStartedScreening */) {
                this.state = "Screening" /* kScreening */;
              } else if (event === "Reset" /* kReset */) {
                this.state = "Waiting" /* kWaiting */;
              } else {
                throw new Error(`Invalid state change: Cannot transition from ${this.state} with event ${event}`);
              }
              break;
            case "Screening" /* kScreening */:
              if (event === "PassedScreening" /* kPassedScreening */) {
                this.state = "Chatting" /* kChatting */;
              } else if (event === "RejectedFromScreening" /* kRejectedFromScreening */) {
                this.state = "OffTopic" /* kOffTopic */;
              } else if (event === "Error" /* kError */) {
                this.state = "Error" /* kError */;
              } else {
                throw new Error(`Invalid state change: Cannot transition from ${this.state} with event ${event}`);
              }
              break;
            case "Chatting" /* kChatting */:
              if (event === "FinishedChat" /* kFinishedChat */) {
                this.state = "Waiting" /* kWaiting */;
              } else if (event === "Error" /* kError */) {
                this.state = "Error" /* kError */;
              } else if (event === "StartedChat" /* kStartedChat */) {
                this.state = "Chatting" /* kChatting */;
              } else {
                throw new Error(`Invalid state change: Cannot transition from ${this.state} with event ${event}`);
              }
              break;
            case "OffTopic" /* kOffTopic */:
              if (event === "Reset" /* kReset */) {
                this.state = "Waiting" /* kWaiting */;
              } else if (event === "Error" /* kError */) {
                this.state = "Error" /* kError */;
              } else {
                throw new Error(`Invalid state change: Cannot transition from ${this.state} with event ${event}`);
              }
              break;
            case "Error" /* kError */:
              if (event === "Reset" /* kReset */) {
                this.state = "Waiting" /* kWaiting */;
              } else {
                throw new Error(`Invalid state change: Cannot transition from ${this.state} with event ${event}`);
              }
              break;
            default:
              throw new Error(`Unknown state: ${this.state}`);
          }
        }
        getState() {
          return this.state;
        }
      };
    }
  });

  // node_modules/axios/lib/helpers/bind.js
  function bind(fn, thisArg) {
    return function wrap() {
      return fn.apply(thisArg, arguments);
    };
  }
  var init_bind = __esm({
    "node_modules/axios/lib/helpers/bind.js"() {
      "use strict";
    }
  });

  // node_modules/axios/lib/utils.js
  function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction2(val.constructor.isBuffer) && val.constructor.isBuffer(val);
  }
  function isArrayBufferView(val) {
    let result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
      result = ArrayBuffer.isView(val);
    } else {
      result = val && val.buffer && isArrayBuffer(val.buffer);
    }
    return result;
  }
  function forEach(obj, fn, { allOwnKeys = false } = {}) {
    if (obj === null || typeof obj === "undefined") {
      return;
    }
    let i;
    let l;
    if (typeof obj !== "object") {
      obj = [obj];
    }
    if (isArray(obj)) {
      for (i = 0, l = obj.length; i < l; i++) {
        fn.call(null, obj[i], i, obj);
      }
    } else {
      const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        fn.call(null, obj[key], key, obj);
      }
    }
  }
  function findKey(obj, key) {
    key = key.toLowerCase();
    const keys = Object.keys(obj);
    let i = keys.length;
    let _key;
    while (i-- > 0) {
      _key = keys[i];
      if (key === _key.toLowerCase()) {
        return _key;
      }
    }
    return null;
  }
  function merge() {
    const { caseless } = isContextDefined(this) && this || {};
    const result = {};
    const assignValue = (val, key) => {
      const targetKey = caseless && findKey(result, key) || key;
      if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
        result[targetKey] = merge(result[targetKey], val);
      } else if (isPlainObject(val)) {
        result[targetKey] = merge({}, val);
      } else if (isArray(val)) {
        result[targetKey] = val.slice();
      } else {
        result[targetKey] = val;
      }
    };
    for (let i = 0, l = arguments.length; i < l; i++) {
      arguments[i] && forEach(arguments[i], assignValue);
    }
    return result;
  }
  function isSpecCompliantForm(thing) {
    return !!(thing && isFunction2(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
  }
  var toString, getPrototypeOf, kindOf, kindOfTest, typeOfTest, isArray, isUndefined, isArrayBuffer, isString2, isFunction2, isNumber2, isObject3, isBoolean2, isPlainObject, isDate, isFile, isBlob, isFileList, isStream, isFormData, isURLSearchParams, isReadableStream, isRequest, isResponse, isHeaders, trim2, _global, isContextDefined, extend, stripBOM, inherits, toFlatObject, endsWith, toArray, isTypedArray, forEachEntry, matchAll, isHTMLForm, toCamelCase, hasOwnProperty, isRegExp, reduceDescriptors, freezeMethods, toObjectSet, noop4, toFiniteNumber, toJSONObject, isAsyncFn, isThenable, _setImmediate, asap, utils_default;
  var init_utils3 = __esm({
    "node_modules/axios/lib/utils.js"() {
      "use strict";
      init_bind();
      ({ toString } = Object.prototype);
      ({ getPrototypeOf } = Object);
      kindOf = /* @__PURE__ */ ((cache2) => (thing) => {
        const str = toString.call(thing);
        return cache2[str] || (cache2[str] = str.slice(8, -1).toLowerCase());
      })(/* @__PURE__ */ Object.create(null));
      kindOfTest = (type) => {
        type = type.toLowerCase();
        return (thing) => kindOf(thing) === type;
      };
      typeOfTest = (type) => (thing) => typeof thing === type;
      ({ isArray } = Array);
      isUndefined = typeOfTest("undefined");
      isArrayBuffer = kindOfTest("ArrayBuffer");
      isString2 = typeOfTest("string");
      isFunction2 = typeOfTest("function");
      isNumber2 = typeOfTest("number");
      isObject3 = (thing) => thing !== null && typeof thing === "object";
      isBoolean2 = (thing) => thing === true || thing === false;
      isPlainObject = (val) => {
        if (kindOf(val) !== "object") {
          return false;
        }
        const prototype3 = getPrototypeOf(val);
        return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
      };
      isDate = kindOfTest("Date");
      isFile = kindOfTest("File");
      isBlob = kindOfTest("Blob");
      isFileList = kindOfTest("FileList");
      isStream = (val) => isObject3(val) && isFunction2(val.pipe);
      isFormData = (thing) => {
        let kind;
        return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction2(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
        kind === "object" && isFunction2(thing.toString) && thing.toString() === "[object FormData]"));
      };
      isURLSearchParams = kindOfTest("URLSearchParams");
      [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
      trim2 = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
      _global = (() => {
        if (typeof globalThis !== "undefined") return globalThis;
        return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
      })();
      isContextDefined = (context) => !isUndefined(context) && context !== _global;
      extend = (a, b, thisArg, { allOwnKeys } = {}) => {
        forEach(b, (val, key) => {
          if (thisArg && isFunction2(val)) {
            a[key] = bind(val, thisArg);
          } else {
            a[key] = val;
          }
        }, { allOwnKeys });
        return a;
      };
      stripBOM = (content) => {
        if (content.charCodeAt(0) === 65279) {
          content = content.slice(1);
        }
        return content;
      };
      inherits = (constructor, superConstructor, props, descriptors2) => {
        constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
        constructor.prototype.constructor = constructor;
        Object.defineProperty(constructor, "super", {
          value: superConstructor.prototype
        });
        props && Object.assign(constructor.prototype, props);
      };
      toFlatObject = (sourceObj, destObj, filter3, propFilter) => {
        let props;
        let i;
        let prop;
        const merged = {};
        destObj = destObj || {};
        if (sourceObj == null) return destObj;
        do {
          props = Object.getOwnPropertyNames(sourceObj);
          i = props.length;
          while (i-- > 0) {
            prop = props[i];
            if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
              destObj[prop] = sourceObj[prop];
              merged[prop] = true;
            }
          }
          sourceObj = filter3 !== false && getPrototypeOf(sourceObj);
        } while (sourceObj && (!filter3 || filter3(sourceObj, destObj)) && sourceObj !== Object.prototype);
        return destObj;
      };
      endsWith = (str, searchString, position2) => {
        str = String(str);
        if (position2 === void 0 || position2 > str.length) {
          position2 = str.length;
        }
        position2 -= searchString.length;
        const lastIndex2 = str.indexOf(searchString, position2);
        return lastIndex2 !== -1 && lastIndex2 === position2;
      };
      toArray = (thing) => {
        if (!thing) return null;
        if (isArray(thing)) return thing;
        let i = thing.length;
        if (!isNumber2(i)) return null;
        const arr = new Array(i);
        while (i-- > 0) {
          arr[i] = thing[i];
        }
        return arr;
      };
      isTypedArray = /* @__PURE__ */ ((TypedArray) => {
        return (thing) => {
          return TypedArray && thing instanceof TypedArray;
        };
      })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
      forEachEntry = (obj, fn) => {
        const generator = obj && obj[Symbol.iterator];
        const iterator = generator.call(obj);
        let result;
        while ((result = iterator.next()) && !result.done) {
          const pair = result.value;
          fn.call(obj, pair[0], pair[1]);
        }
      };
      matchAll = (regExp, str) => {
        let matches;
        const arr = [];
        while ((matches = regExp.exec(str)) !== null) {
          arr.push(matches);
        }
        return arr;
      };
      isHTMLForm = kindOfTest("HTMLFormElement");
      toCamelCase = (str) => {
        return str.toLowerCase().replace(
          /[-_\s]([a-z\d])(\w*)/g,
          function replacer(m, p1, p2) {
            return p1.toUpperCase() + p2;
          }
        );
      };
      hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
      isRegExp = kindOfTest("RegExp");
      reduceDescriptors = (obj, reducer) => {
        const descriptors2 = Object.getOwnPropertyDescriptors(obj);
        const reducedDescriptors = {};
        forEach(descriptors2, (descriptor, name) => {
          let ret;
          if ((ret = reducer(descriptor, name, obj)) !== false) {
            reducedDescriptors[name] = ret || descriptor;
          }
        });
        Object.defineProperties(obj, reducedDescriptors);
      };
      freezeMethods = (obj) => {
        reduceDescriptors(obj, (descriptor, name) => {
          if (isFunction2(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
            return false;
          }
          const value = obj[name];
          if (!isFunction2(value)) return;
          descriptor.enumerable = false;
          if ("writable" in descriptor) {
            descriptor.writable = false;
            return;
          }
          if (!descriptor.set) {
            descriptor.set = () => {
              throw Error("Can not rewrite read-only method '" + name + "'");
            };
          }
        });
      };
      toObjectSet = (arrayOrString, delimiter2) => {
        const obj = {};
        const define = (arr) => {
          arr.forEach((value) => {
            obj[value] = true;
          });
        };
        isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter2));
        return obj;
      };
      noop4 = () => {
      };
      toFiniteNumber = (value, defaultValue) => {
        return value != null && Number.isFinite(value = +value) ? value : defaultValue;
      };
      toJSONObject = (obj) => {
        const stack = new Array(10);
        const visit = (source, i) => {
          if (isObject3(source)) {
            if (stack.indexOf(source) >= 0) {
              return;
            }
            if (!("toJSON" in source)) {
              stack[i] = source;
              const target = isArray(source) ? [] : {};
              forEach(source, (value, key) => {
                const reducedValue = visit(value, i + 1);
                !isUndefined(reducedValue) && (target[key] = reducedValue);
              });
              stack[i] = void 0;
              return target;
            }
          }
          return source;
        };
        return visit(obj, 0);
      };
      isAsyncFn = kindOfTest("AsyncFunction");
      isThenable = (thing) => thing && (isObject3(thing) || isFunction2(thing)) && isFunction2(thing.then) && isFunction2(thing.catch);
      _setImmediate = ((setImmediateSupported, postMessageSupported) => {
        if (setImmediateSupported) {
          return setImmediate;
        }
        return postMessageSupported ? ((token2, callbacks) => {
          _global.addEventListener("message", ({ source, data }) => {
            if (source === _global && data === token2) {
              callbacks.length && callbacks.shift()();
            }
          }, false);
          return (cb) => {
            callbacks.push(cb);
            _global.postMessage(token2, "*");
          };
        })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
      })(
        typeof setImmediate === "function",
        isFunction2(_global.postMessage)
      );
      asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
      utils_default = {
        isArray,
        isArrayBuffer,
        isBuffer,
        isFormData,
        isArrayBufferView,
        isString: isString2,
        isNumber: isNumber2,
        isBoolean: isBoolean2,
        isObject: isObject3,
        isPlainObject,
        isReadableStream,
        isRequest,
        isResponse,
        isHeaders,
        isUndefined,
        isDate,
        isFile,
        isBlob,
        isRegExp,
        isFunction: isFunction2,
        isStream,
        isURLSearchParams,
        isTypedArray,
        isFileList,
        forEach,
        merge,
        extend,
        trim: trim2,
        stripBOM,
        inherits,
        toFlatObject,
        kindOf,
        kindOfTest,
        endsWith,
        toArray,
        forEachEntry,
        matchAll,
        isHTMLForm,
        hasOwnProperty,
        hasOwnProp: hasOwnProperty,
        // an alias to avoid ESLint no-prototype-builtins detection
        reduceDescriptors,
        freezeMethods,
        toObjectSet,
        toCamelCase,
        noop: noop4,
        toFiniteNumber,
        findKey,
        global: _global,
        isContextDefined,
        isSpecCompliantForm,
        toJSONObject,
        isAsyncFn,
        isThenable,
        setImmediate: _setImmediate,
        asap
      };
    }
  });

  // node_modules/axios/lib/core/AxiosError.js
  function AxiosError(message, code, config, request, response) {
    Error.call(this);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = new Error().stack;
    }
    this.message = message;
    this.name = "AxiosError";
    code && (this.code = code);
    config && (this.config = config);
    request && (this.request = request);
    if (response) {
      this.response = response;
      this.status = response.status ? response.status : null;
    }
  }
  var prototype, descriptors, AxiosError_default;
  var init_AxiosError = __esm({
    "node_modules/axios/lib/core/AxiosError.js"() {
      "use strict";
      init_utils3();
      utils_default.inherits(AxiosError, Error, {
        toJSON: function toJSON() {
          return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: utils_default.toJSONObject(this.config),
            code: this.code,
            status: this.status
          };
        }
      });
      prototype = AxiosError.prototype;
      descriptors = {};
      [
        "ERR_BAD_OPTION_VALUE",
        "ERR_BAD_OPTION",
        "ECONNABORTED",
        "ETIMEDOUT",
        "ERR_NETWORK",
        "ERR_FR_TOO_MANY_REDIRECTS",
        "ERR_DEPRECATED",
        "ERR_BAD_RESPONSE",
        "ERR_BAD_REQUEST",
        "ERR_CANCELED",
        "ERR_NOT_SUPPORT",
        "ERR_INVALID_URL"
        // eslint-disable-next-line func-names
      ].forEach((code) => {
        descriptors[code] = { value: code };
      });
      Object.defineProperties(AxiosError, descriptors);
      Object.defineProperty(prototype, "isAxiosError", { value: true });
      AxiosError.from = (error, code, config, request, response, customProps) => {
        const axiosError = Object.create(prototype);
        utils_default.toFlatObject(error, axiosError, function filter3(obj) {
          return obj !== Error.prototype;
        }, (prop) => {
          return prop !== "isAxiosError";
        });
        AxiosError.call(axiosError, error.message, code, config, request, response);
        axiosError.cause = error;
        axiosError.name = error.name;
        customProps && Object.assign(axiosError, customProps);
        return axiosError;
      };
      AxiosError_default = AxiosError;
    }
  });

  // node_modules/axios/lib/helpers/null.js
  var null_default;
  var init_null = __esm({
    "node_modules/axios/lib/helpers/null.js"() {
      null_default = null;
    }
  });

  // node_modules/axios/lib/helpers/toFormData.js
  function isVisitable(thing) {
    return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
  }
  function removeBrackets(key) {
    return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
  }
  function renderKey(path, key, dots) {
    if (!path) return key;
    return path.concat(key).map(function each(token2, i) {
      token2 = removeBrackets(token2);
      return !dots && i ? "[" + token2 + "]" : token2;
    }).join(dots ? "." : "");
  }
  function isFlatArray(arr) {
    return utils_default.isArray(arr) && !arr.some(isVisitable);
  }
  function toFormData(obj, formData, options) {
    if (!utils_default.isObject(obj)) {
      throw new TypeError("target must be an object");
    }
    formData = formData || new (null_default || FormData)();
    options = utils_default.toFlatObject(options, {
      metaTokens: true,
      dots: false,
      indexes: false
    }, false, function defined(option, source) {
      return !utils_default.isUndefined(source[option]);
    });
    const metaTokens = options.metaTokens;
    const visitor = options.visitor || defaultVisitor;
    const dots = options.dots;
    const indexes = options.indexes;
    const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
    const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
    if (!utils_default.isFunction(visitor)) {
      throw new TypeError("visitor must be a function");
    }
    function convertValue(value) {
      if (value === null) return "";
      if (utils_default.isDate(value)) {
        return value.toISOString();
      }
      if (!useBlob && utils_default.isBlob(value)) {
        throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
      }
      if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
        return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
      }
      return value;
    }
    function defaultVisitor(value, key, path) {
      let arr = value;
      if (value && !path && typeof value === "object") {
        if (utils_default.endsWith(key, "{}")) {
          key = metaTokens ? key : key.slice(0, -2);
          value = JSON.stringify(value);
        } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
          key = removeBrackets(key);
          arr.forEach(function each(el, index) {
            !(utils_default.isUndefined(el) || el === null) && formData.append(
              // eslint-disable-next-line no-nested-ternary
              indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
              convertValue(el)
            );
          });
          return false;
        }
      }
      if (isVisitable(value)) {
        return true;
      }
      formData.append(renderKey(path, key, dots), convertValue(value));
      return false;
    }
    const stack = [];
    const exposedHelpers = Object.assign(predicates, {
      defaultVisitor,
      convertValue,
      isVisitable
    });
    function build(value, path) {
      if (utils_default.isUndefined(value)) return;
      if (stack.indexOf(value) !== -1) {
        throw Error("Circular reference detected in " + path.join("."));
      }
      stack.push(value);
      utils_default.forEach(value, function each(el, key) {
        const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
          formData,
          el,
          utils_default.isString(key) ? key.trim() : key,
          path,
          exposedHelpers
        );
        if (result === true) {
          build(el, path ? path.concat(key) : [key]);
        }
      });
      stack.pop();
    }
    if (!utils_default.isObject(obj)) {
      throw new TypeError("data must be an object");
    }
    build(obj);
    return formData;
  }
  var predicates, toFormData_default;
  var init_toFormData = __esm({
    "node_modules/axios/lib/helpers/toFormData.js"() {
      "use strict";
      init_utils3();
      init_AxiosError();
      init_null();
      predicates = utils_default.toFlatObject(utils_default, {}, null, function filter2(prop) {
        return /^is[A-Z]/.test(prop);
      });
      toFormData_default = toFormData;
    }
  });

  // node_modules/axios/lib/helpers/AxiosURLSearchParams.js
  function encode(str) {
    const charMap = {
      "!": "%21",
      "'": "%27",
      "(": "%28",
      ")": "%29",
      "~": "%7E",
      "%20": "+",
      "%00": "\0"
    };
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match2) {
      return charMap[match2];
    });
  }
  function AxiosURLSearchParams(params, options) {
    this._pairs = [];
    params && toFormData_default(params, this, options);
  }
  var prototype2, AxiosURLSearchParams_default;
  var init_AxiosURLSearchParams = __esm({
    "node_modules/axios/lib/helpers/AxiosURLSearchParams.js"() {
      "use strict";
      init_toFormData();
      prototype2 = AxiosURLSearchParams.prototype;
      prototype2.append = function append2(name, value) {
        this._pairs.push([name, value]);
      };
      prototype2.toString = function toString2(encoder) {
        const _encode = encoder ? function(value) {
          return encoder.call(this, value, encode);
        } : encode;
        return this._pairs.map(function each(pair) {
          return _encode(pair[0]) + "=" + _encode(pair[1]);
        }, "").join("&");
      };
      AxiosURLSearchParams_default = AxiosURLSearchParams;
    }
  });

  // node_modules/axios/lib/helpers/buildURL.js
  function encode2(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
  }
  function buildURL(url, params, options) {
    if (!params) {
      return url;
    }
    const _encode = options && options.encode || encode2;
    if (utils_default.isFunction(options)) {
      options = {
        serialize: options
      };
    }
    const serializeFn = options && options.serialize;
    let serializedParams;
    if (serializeFn) {
      serializedParams = serializeFn(params, options);
    } else {
      serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
    }
    if (serializedParams) {
      const hashmarkIndex = url.indexOf("#");
      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }
      url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
  }
  var init_buildURL = __esm({
    "node_modules/axios/lib/helpers/buildURL.js"() {
      "use strict";
      init_utils3();
      init_AxiosURLSearchParams();
    }
  });

  // node_modules/axios/lib/core/InterceptorManager.js
  var InterceptorManager, InterceptorManager_default;
  var init_InterceptorManager = __esm({
    "node_modules/axios/lib/core/InterceptorManager.js"() {
      "use strict";
      init_utils3();
      InterceptorManager = class {
        constructor() {
          this.handlers = [];
        }
        /**
         * Add a new interceptor to the stack
         *
         * @param {Function} fulfilled The function to handle `then` for a `Promise`
         * @param {Function} rejected The function to handle `reject` for a `Promise`
         *
         * @return {Number} An ID used to remove interceptor later
         */
        use(fulfilled, rejected, options) {
          this.handlers.push({
            fulfilled,
            rejected,
            synchronous: options ? options.synchronous : false,
            runWhen: options ? options.runWhen : null
          });
          return this.handlers.length - 1;
        }
        /**
         * Remove an interceptor from the stack
         *
         * @param {Number} id The ID that was returned by `use`
         *
         * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
         */
        eject(id) {
          if (this.handlers[id]) {
            this.handlers[id] = null;
          }
        }
        /**
         * Clear all interceptors from the stack
         *
         * @returns {void}
         */
        clear() {
          if (this.handlers) {
            this.handlers = [];
          }
        }
        /**
         * Iterate over all the registered interceptors
         *
         * This method is particularly useful for skipping over any
         * interceptors that may have become `null` calling `eject`.
         *
         * @param {Function} fn The function to call for each interceptor
         *
         * @returns {void}
         */
        forEach(fn) {
          utils_default.forEach(this.handlers, function forEachHandler(h) {
            if (h !== null) {
              fn(h);
            }
          });
        }
      };
      InterceptorManager_default = InterceptorManager;
    }
  });

  // node_modules/axios/lib/defaults/transitional.js
  var transitional_default;
  var init_transitional = __esm({
    "node_modules/axios/lib/defaults/transitional.js"() {
      "use strict";
      transitional_default = {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      };
    }
  });

  // node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
  var URLSearchParams_default;
  var init_URLSearchParams = __esm({
    "node_modules/axios/lib/platform/browser/classes/URLSearchParams.js"() {
      "use strict";
      init_AxiosURLSearchParams();
      URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;
    }
  });

  // node_modules/axios/lib/platform/browser/classes/FormData.js
  var FormData_default;
  var init_FormData = __esm({
    "node_modules/axios/lib/platform/browser/classes/FormData.js"() {
      "use strict";
      FormData_default = typeof FormData !== "undefined" ? FormData : null;
    }
  });

  // node_modules/axios/lib/platform/browser/classes/Blob.js
  var Blob_default;
  var init_Blob = __esm({
    "node_modules/axios/lib/platform/browser/classes/Blob.js"() {
      "use strict";
      Blob_default = typeof Blob !== "undefined" ? Blob : null;
    }
  });

  // node_modules/axios/lib/platform/browser/index.js
  var browser_default;
  var init_browser = __esm({
    "node_modules/axios/lib/platform/browser/index.js"() {
      init_URLSearchParams();
      init_FormData();
      init_Blob();
      browser_default = {
        isBrowser: true,
        classes: {
          URLSearchParams: URLSearchParams_default,
          FormData: FormData_default,
          Blob: Blob_default
        },
        protocols: ["http", "https", "file", "blob", "url", "data"]
      };
    }
  });

  // node_modules/axios/lib/platform/common/utils.js
  var utils_exports = {};
  __export(utils_exports, {
    hasBrowserEnv: () => hasBrowserEnv,
    hasStandardBrowserEnv: () => hasStandardBrowserEnv,
    hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv,
    navigator: () => _navigator,
    origin: () => origin
  });
  var hasBrowserEnv, _navigator, hasStandardBrowserEnv, hasStandardBrowserWebWorkerEnv, origin;
  var init_utils4 = __esm({
    "node_modules/axios/lib/platform/common/utils.js"() {
      hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
      _navigator = typeof navigator === "object" && navigator || void 0;
      hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
      hasStandardBrowserWebWorkerEnv = (() => {
        return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
        self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
      })();
      origin = hasBrowserEnv && window.location.href || "http://localhost";
    }
  });

  // node_modules/axios/lib/platform/index.js
  var platform_default;
  var init_platform = __esm({
    "node_modules/axios/lib/platform/index.js"() {
      init_browser();
      init_utils4();
      platform_default = {
        ...utils_exports,
        ...browser_default
      };
    }
  });

  // node_modules/axios/lib/helpers/toURLEncodedForm.js
  function toURLEncodedForm(data, options) {
    return toFormData_default(data, new platform_default.classes.URLSearchParams(), Object.assign({
      visitor: function(value, key, path, helpers) {
        if (platform_default.isNode && utils_default.isBuffer(value)) {
          this.append(key, value.toString("base64"));
          return false;
        }
        return helpers.defaultVisitor.apply(this, arguments);
      }
    }, options));
  }
  var init_toURLEncodedForm = __esm({
    "node_modules/axios/lib/helpers/toURLEncodedForm.js"() {
      "use strict";
      init_utils3();
      init_toFormData();
      init_platform();
    }
  });

  // node_modules/axios/lib/helpers/formDataToJSON.js
  function parsePropPath(name) {
    return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match2) => {
      return match2[0] === "[]" ? "" : match2[1] || match2[0];
    });
  }
  function arrayToObject2(arr) {
    const obj = {};
    const keys = Object.keys(arr);
    let i;
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      obj[key] = arr[key];
    }
    return obj;
  }
  function formDataToJSON(formData) {
    function buildPath(path, value, target, index) {
      let name = path[index++];
      if (name === "__proto__") return true;
      const isNumericKey = Number.isFinite(+name);
      const isLast = index >= path.length;
      name = !name && utils_default.isArray(target) ? target.length : name;
      if (isLast) {
        if (utils_default.hasOwnProp(target, name)) {
          target[name] = [target[name], value];
        } else {
          target[name] = value;
        }
        return !isNumericKey;
      }
      if (!target[name] || !utils_default.isObject(target[name])) {
        target[name] = [];
      }
      const result = buildPath(path, value, target[name], index);
      if (result && utils_default.isArray(target[name])) {
        target[name] = arrayToObject2(target[name]);
      }
      return !isNumericKey;
    }
    if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
      const obj = {};
      utils_default.forEachEntry(formData, (name, value) => {
        buildPath(parsePropPath(name), value, obj, 0);
      });
      return obj;
    }
    return null;
  }
  var formDataToJSON_default;
  var init_formDataToJSON = __esm({
    "node_modules/axios/lib/helpers/formDataToJSON.js"() {
      "use strict";
      init_utils3();
      formDataToJSON_default = formDataToJSON;
    }
  });

  // node_modules/axios/lib/defaults/index.js
  function stringifySafely(rawValue, parser, encoder) {
    if (utils_default.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils_default.trim(rawValue);
      } catch (e) {
        if (e.name !== "SyntaxError") {
          throw e;
        }
      }
    }
    return (encoder || JSON.stringify)(rawValue);
  }
  var defaults, defaults_default;
  var init_defaults = __esm({
    "node_modules/axios/lib/defaults/index.js"() {
      "use strict";
      init_utils3();
      init_AxiosError();
      init_transitional();
      init_toFormData();
      init_toURLEncodedForm();
      init_platform();
      init_formDataToJSON();
      defaults = {
        transitional: transitional_default,
        adapter: ["xhr", "http", "fetch"],
        transformRequest: [function transformRequest(data, headers) {
          const contentType = headers.getContentType() || "";
          const hasJSONContentType = contentType.indexOf("application/json") > -1;
          const isObjectPayload = utils_default.isObject(data);
          if (isObjectPayload && utils_default.isHTMLForm(data)) {
            data = new FormData(data);
          }
          const isFormData2 = utils_default.isFormData(data);
          if (isFormData2) {
            return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
          }
          if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data) || utils_default.isReadableStream(data)) {
            return data;
          }
          if (utils_default.isArrayBufferView(data)) {
            return data.buffer;
          }
          if (utils_default.isURLSearchParams(data)) {
            headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
            return data.toString();
          }
          let isFileList2;
          if (isObjectPayload) {
            if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
              return toURLEncodedForm(data, this.formSerializer).toString();
            }
            if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
              const _FormData = this.env && this.env.FormData;
              return toFormData_default(
                isFileList2 ? { "files[]": data } : data,
                _FormData && new _FormData(),
                this.formSerializer
              );
            }
          }
          if (isObjectPayload || hasJSONContentType) {
            headers.setContentType("application/json", false);
            return stringifySafely(data);
          }
          return data;
        }],
        transformResponse: [function transformResponse(data) {
          const transitional2 = this.transitional || defaults.transitional;
          const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
          const JSONRequested = this.responseType === "json";
          if (utils_default.isResponse(data) || utils_default.isReadableStream(data)) {
            return data;
          }
          if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
            const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
            const strictJSONParsing = !silentJSONParsing && JSONRequested;
            try {
              return JSON.parse(data);
            } catch (e) {
              if (strictJSONParsing) {
                if (e.name === "SyntaxError") {
                  throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
                }
                throw e;
              }
            }
          }
          return data;
        }],
        /**
         * A timeout in milliseconds to abort a request. If set to 0 (default) a
         * timeout is not created.
         */
        timeout: 0,
        xsrfCookieName: "XSRF-TOKEN",
        xsrfHeaderName: "X-XSRF-TOKEN",
        maxContentLength: -1,
        maxBodyLength: -1,
        env: {
          FormData: platform_default.classes.FormData,
          Blob: platform_default.classes.Blob
        },
        validateStatus: function validateStatus(status) {
          return status >= 200 && status < 300;
        },
        headers: {
          common: {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": void 0
          }
        }
      };
      utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
        defaults.headers[method] = {};
      });
      defaults_default = defaults;
    }
  });

  // node_modules/axios/lib/helpers/parseHeaders.js
  var ignoreDuplicateOf, parseHeaders_default;
  var init_parseHeaders = __esm({
    "node_modules/axios/lib/helpers/parseHeaders.js"() {
      "use strict";
      init_utils3();
      ignoreDuplicateOf = utils_default.toObjectSet([
        "age",
        "authorization",
        "content-length",
        "content-type",
        "etag",
        "expires",
        "from",
        "host",
        "if-modified-since",
        "if-unmodified-since",
        "last-modified",
        "location",
        "max-forwards",
        "proxy-authorization",
        "referer",
        "retry-after",
        "user-agent"
      ]);
      parseHeaders_default = (rawHeaders) => {
        const parsed = {};
        let key;
        let val;
        let i;
        rawHeaders && rawHeaders.split("\n").forEach(function parser(line2) {
          i = line2.indexOf(":");
          key = line2.substring(0, i).trim().toLowerCase();
          val = line2.substring(i + 1).trim();
          if (!key || parsed[key] && ignoreDuplicateOf[key]) {
            return;
          }
          if (key === "set-cookie") {
            if (parsed[key]) {
              parsed[key].push(val);
            } else {
              parsed[key] = [val];
            }
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        });
        return parsed;
      };
    }
  });

  // node_modules/axios/lib/core/AxiosHeaders.js
  function normalizeHeader(header) {
    return header && String(header).trim().toLowerCase();
  }
  function normalizeValue(value) {
    if (value === false || value == null) {
      return value;
    }
    return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
  }
  function parseTokens(str) {
    const tokens2 = /* @__PURE__ */ Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match2;
    while (match2 = tokensRE.exec(str)) {
      tokens2[match2[1]] = match2[2];
    }
    return tokens2;
  }
  function matchHeaderValue(context, value, header, filter3, isHeaderNameFilter) {
    if (utils_default.isFunction(filter3)) {
      return filter3.call(this, value, header);
    }
    if (isHeaderNameFilter) {
      value = header;
    }
    if (!utils_default.isString(value)) return;
    if (utils_default.isString(filter3)) {
      return value.indexOf(filter3) !== -1;
    }
    if (utils_default.isRegExp(filter3)) {
      return filter3.test(value);
    }
  }
  function formatHeader(header) {
    return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char2, str) => {
      return char2.toUpperCase() + str;
    });
  }
  function buildAccessors(obj, header) {
    const accessorName = utils_default.toCamelCase(" " + header);
    ["get", "set", "has"].forEach((methodName) => {
      Object.defineProperty(obj, methodName + accessorName, {
        value: function(arg1, arg2, arg3) {
          return this[methodName].call(this, header, arg1, arg2, arg3);
        },
        configurable: true
      });
    });
  }
  var $internals, isValidHeaderName, AxiosHeaders, AxiosHeaders_default;
  var init_AxiosHeaders = __esm({
    "node_modules/axios/lib/core/AxiosHeaders.js"() {
      "use strict";
      init_utils3();
      init_parseHeaders();
      $internals = Symbol("internals");
      isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
      AxiosHeaders = class {
        constructor(headers) {
          headers && this.set(headers);
        }
        set(header, valueOrRewrite, rewrite) {
          const self2 = this;
          function setHeader(_value, _header, _rewrite) {
            const lHeader = normalizeHeader(_header);
            if (!lHeader) {
              throw new Error("header name must be a non-empty string");
            }
            const key = utils_default.findKey(self2, lHeader);
            if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
              self2[key || _header] = normalizeValue(_value);
            }
          }
          const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
          if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
            setHeaders(header, valueOrRewrite);
          } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
            setHeaders(parseHeaders_default(header), valueOrRewrite);
          } else if (utils_default.isHeaders(header)) {
            for (const [key, value] of header.entries()) {
              setHeader(value, key, rewrite);
            }
          } else {
            header != null && setHeader(valueOrRewrite, header, rewrite);
          }
          return this;
        }
        get(header, parser) {
          header = normalizeHeader(header);
          if (header) {
            const key = utils_default.findKey(this, header);
            if (key) {
              const value = this[key];
              if (!parser) {
                return value;
              }
              if (parser === true) {
                return parseTokens(value);
              }
              if (utils_default.isFunction(parser)) {
                return parser.call(this, value, key);
              }
              if (utils_default.isRegExp(parser)) {
                return parser.exec(value);
              }
              throw new TypeError("parser must be boolean|regexp|function");
            }
          }
        }
        has(header, matcher) {
          header = normalizeHeader(header);
          if (header) {
            const key = utils_default.findKey(this, header);
            return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
          }
          return false;
        }
        delete(header, matcher) {
          const self2 = this;
          let deleted = false;
          function deleteHeader(_header) {
            _header = normalizeHeader(_header);
            if (_header) {
              const key = utils_default.findKey(self2, _header);
              if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
                delete self2[key];
                deleted = true;
              }
            }
          }
          if (utils_default.isArray(header)) {
            header.forEach(deleteHeader);
          } else {
            deleteHeader(header);
          }
          return deleted;
        }
        clear(matcher) {
          const keys = Object.keys(this);
          let i = keys.length;
          let deleted = false;
          while (i--) {
            const key = keys[i];
            if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
              delete this[key];
              deleted = true;
            }
          }
          return deleted;
        }
        normalize(format) {
          const self2 = this;
          const headers = {};
          utils_default.forEach(this, (value, header) => {
            const key = utils_default.findKey(headers, header);
            if (key) {
              self2[key] = normalizeValue(value);
              delete self2[header];
              return;
            }
            const normalized = format ? formatHeader(header) : String(header).trim();
            if (normalized !== header) {
              delete self2[header];
            }
            self2[normalized] = normalizeValue(value);
            headers[normalized] = true;
          });
          return this;
        }
        concat(...targets) {
          return this.constructor.concat(this, ...targets);
        }
        toJSON(asStrings) {
          const obj = /* @__PURE__ */ Object.create(null);
          utils_default.forEach(this, (value, header) => {
            value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
          });
          return obj;
        }
        [Symbol.iterator]() {
          return Object.entries(this.toJSON())[Symbol.iterator]();
        }
        toString() {
          return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
        }
        get [Symbol.toStringTag]() {
          return "AxiosHeaders";
        }
        static from(thing) {
          return thing instanceof this ? thing : new this(thing);
        }
        static concat(first, ...targets) {
          const computed = new this(first);
          targets.forEach((target) => computed.set(target));
          return computed;
        }
        static accessor(header) {
          const internals = this[$internals] = this[$internals] = {
            accessors: {}
          };
          const accessors = internals.accessors;
          const prototype3 = this.prototype;
          function defineAccessor(_header) {
            const lHeader = normalizeHeader(_header);
            if (!accessors[lHeader]) {
              buildAccessors(prototype3, _header);
              accessors[lHeader] = true;
            }
          }
          utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
          return this;
        }
      };
      AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
      utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
        let mapped = key[0].toUpperCase() + key.slice(1);
        return {
          get: () => value,
          set(headerValue) {
            this[mapped] = headerValue;
          }
        };
      });
      utils_default.freezeMethods(AxiosHeaders);
      AxiosHeaders_default = AxiosHeaders;
    }
  });

  // node_modules/axios/lib/core/transformData.js
  function transformData(fns, response) {
    const config = this || defaults_default;
    const context = response || config;
    const headers = AxiosHeaders_default.from(context.headers);
    let data = context.data;
    utils_default.forEach(fns, function transform2(fn) {
      data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
    });
    headers.normalize();
    return data;
  }
  var init_transformData = __esm({
    "node_modules/axios/lib/core/transformData.js"() {
      "use strict";
      init_utils3();
      init_defaults();
      init_AxiosHeaders();
    }
  });

  // node_modules/axios/lib/cancel/isCancel.js
  function isCancel(value) {
    return !!(value && value.__CANCEL__);
  }
  var init_isCancel = __esm({
    "node_modules/axios/lib/cancel/isCancel.js"() {
      "use strict";
    }
  });

  // node_modules/axios/lib/cancel/CanceledError.js
  function CanceledError(message, config, request) {
    AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
    this.name = "CanceledError";
  }
  var CanceledError_default;
  var init_CanceledError = __esm({
    "node_modules/axios/lib/cancel/CanceledError.js"() {
      "use strict";
      init_AxiosError();
      init_utils3();
      utils_default.inherits(CanceledError, AxiosError_default, {
        __CANCEL__: true
      });
      CanceledError_default = CanceledError;
    }
  });

  // node_modules/axios/lib/core/settle.js
  function settle(resolve, reject, response) {
    const validateStatus2 = response.config.validateStatus;
    if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
      resolve(response);
    } else {
      reject(new AxiosError_default(
        "Request failed with status code " + response.status,
        [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
        response.config,
        response.request,
        response
      ));
    }
  }
  var init_settle = __esm({
    "node_modules/axios/lib/core/settle.js"() {
      "use strict";
      init_AxiosError();
    }
  });

  // node_modules/axios/lib/helpers/parseProtocol.js
  function parseProtocol(url) {
    const match2 = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
    return match2 && match2[1] || "";
  }
  var init_parseProtocol = __esm({
    "node_modules/axios/lib/helpers/parseProtocol.js"() {
      "use strict";
    }
  });

  // node_modules/axios/lib/helpers/speedometer.js
  function speedometer(samplesCount, min) {
    samplesCount = samplesCount || 10;
    const bytes = new Array(samplesCount);
    const timestamps = new Array(samplesCount);
    let head = 0;
    let tail = 0;
    let firstSampleTS;
    min = min !== void 0 ? min : 1e3;
    return function push(chunkLength) {
      const now = Date.now();
      const startedAt = timestamps[tail];
      if (!firstSampleTS) {
        firstSampleTS = now;
      }
      bytes[head] = chunkLength;
      timestamps[head] = now;
      let i = tail;
      let bytesCount = 0;
      while (i !== head) {
        bytesCount += bytes[i++];
        i = i % samplesCount;
      }
      head = (head + 1) % samplesCount;
      if (head === tail) {
        tail = (tail + 1) % samplesCount;
      }
      if (now - firstSampleTS < min) {
        return;
      }
      const passed = startedAt && now - startedAt;
      return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
    };
  }
  var speedometer_default;
  var init_speedometer = __esm({
    "node_modules/axios/lib/helpers/speedometer.js"() {
      "use strict";
      speedometer_default = speedometer;
    }
  });

  // node_modules/axios/lib/helpers/throttle.js
  function throttle(fn, freq) {
    let timestamp = 0;
    let threshold = 1e3 / freq;
    let lastArgs;
    let timer;
    const invoke = (args, now = Date.now()) => {
      timestamp = now;
      lastArgs = null;
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
      fn.apply(null, args);
    };
    const throttled = (...args) => {
      const now = Date.now();
      const passed = now - timestamp;
      if (passed >= threshold) {
        invoke(args, now);
      } else {
        lastArgs = args;
        if (!timer) {
          timer = setTimeout(() => {
            timer = null;
            invoke(lastArgs);
          }, threshold - passed);
        }
      }
    };
    const flush = () => lastArgs && invoke(lastArgs);
    return [throttled, flush];
  }
  var throttle_default;
  var init_throttle = __esm({
    "node_modules/axios/lib/helpers/throttle.js"() {
      throttle_default = throttle;
    }
  });

  // node_modules/axios/lib/helpers/progressEventReducer.js
  var progressEventReducer, progressEventDecorator, asyncDecorator;
  var init_progressEventReducer = __esm({
    "node_modules/axios/lib/helpers/progressEventReducer.js"() {
      init_speedometer();
      init_throttle();
      init_utils3();
      progressEventReducer = (listener, isDownloadStream, freq = 3) => {
        let bytesNotified = 0;
        const _speedometer = speedometer_default(50, 250);
        return throttle_default((e) => {
          const loaded = e.loaded;
          const total = e.lengthComputable ? e.total : void 0;
          const progressBytes = loaded - bytesNotified;
          const rate = _speedometer(progressBytes);
          const inRange = loaded <= total;
          bytesNotified = loaded;
          const data = {
            loaded,
            total,
            progress: total ? loaded / total : void 0,
            bytes: progressBytes,
            rate: rate ? rate : void 0,
            estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
            event: e,
            lengthComputable: total != null,
            [isDownloadStream ? "download" : "upload"]: true
          };
          listener(data);
        }, freq);
      };
      progressEventDecorator = (total, throttled) => {
        const lengthComputable = total != null;
        return [(loaded) => throttled[0]({
          lengthComputable,
          total,
          loaded
        }), throttled[1]];
      };
      asyncDecorator = (fn) => (...args) => utils_default.asap(() => fn(...args));
    }
  });

  // node_modules/axios/lib/helpers/isURLSameOrigin.js
  var isURLSameOrigin_default;
  var init_isURLSameOrigin = __esm({
    "node_modules/axios/lib/helpers/isURLSameOrigin.js"() {
      init_platform();
      isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url) => {
        url = new URL(url, platform_default.origin);
        return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
      })(
        new URL(platform_default.origin),
        platform_default.navigator && /(msie|trident)/i.test(platform_default.navigator.userAgent)
      ) : () => true;
    }
  });

  // node_modules/axios/lib/helpers/cookies.js
  var cookies_default;
  var init_cookies = __esm({
    "node_modules/axios/lib/helpers/cookies.js"() {
      init_utils3();
      init_platform();
      cookies_default = platform_default.hasStandardBrowserEnv ? (
        // Standard browser envs support document.cookie
        {
          write(name, value, expires, path, domain, secure) {
            const cookie = [name + "=" + encodeURIComponent(value)];
            utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
            utils_default.isString(path) && cookie.push("path=" + path);
            utils_default.isString(domain) && cookie.push("domain=" + domain);
            secure === true && cookie.push("secure");
            document.cookie = cookie.join("; ");
          },
          read(name) {
            const match2 = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match2 ? decodeURIComponent(match2[3]) : null;
          },
          remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        }
      ) : (
        // Non-standard browser env (web workers, react-native) lack needed support.
        {
          write() {
          },
          read() {
            return null;
          },
          remove() {
          }
        }
      );
    }
  });

  // node_modules/axios/lib/helpers/isAbsoluteURL.js
  function isAbsoluteURL(url) {
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
  }
  var init_isAbsoluteURL = __esm({
    "node_modules/axios/lib/helpers/isAbsoluteURL.js"() {
      "use strict";
    }
  });

  // node_modules/axios/lib/helpers/combineURLs.js
  function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
  }
  var init_combineURLs = __esm({
    "node_modules/axios/lib/helpers/combineURLs.js"() {
      "use strict";
    }
  });

  // node_modules/axios/lib/core/buildFullPath.js
  function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
    let isRelativeUrl = !isAbsoluteURL(requestedURL);
    if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  }
  var init_buildFullPath = __esm({
    "node_modules/axios/lib/core/buildFullPath.js"() {
      "use strict";
      init_isAbsoluteURL();
      init_combineURLs();
    }
  });

  // node_modules/axios/lib/core/mergeConfig.js
  function mergeConfig(config1, config2) {
    config2 = config2 || {};
    const config = {};
    function getMergedValue(target, source, prop, caseless) {
      if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
        return utils_default.merge.call({ caseless }, target, source);
      } else if (utils_default.isPlainObject(source)) {
        return utils_default.merge({}, source);
      } else if (utils_default.isArray(source)) {
        return source.slice();
      }
      return source;
    }
    function mergeDeepProperties(a, b, prop, caseless) {
      if (!utils_default.isUndefined(b)) {
        return getMergedValue(a, b, prop, caseless);
      } else if (!utils_default.isUndefined(a)) {
        return getMergedValue(void 0, a, prop, caseless);
      }
    }
    function valueFromConfig2(a, b) {
      if (!utils_default.isUndefined(b)) {
        return getMergedValue(void 0, b);
      }
    }
    function defaultToConfig2(a, b) {
      if (!utils_default.isUndefined(b)) {
        return getMergedValue(void 0, b);
      } else if (!utils_default.isUndefined(a)) {
        return getMergedValue(void 0, a);
      }
    }
    function mergeDirectKeys(a, b, prop) {
      if (prop in config2) {
        return getMergedValue(a, b);
      } else if (prop in config1) {
        return getMergedValue(void 0, a);
      }
    }
    const mergeMap = {
      url: valueFromConfig2,
      method: valueFromConfig2,
      data: valueFromConfig2,
      baseURL: defaultToConfig2,
      transformRequest: defaultToConfig2,
      transformResponse: defaultToConfig2,
      paramsSerializer: defaultToConfig2,
      timeout: defaultToConfig2,
      timeoutMessage: defaultToConfig2,
      withCredentials: defaultToConfig2,
      withXSRFToken: defaultToConfig2,
      adapter: defaultToConfig2,
      responseType: defaultToConfig2,
      xsrfCookieName: defaultToConfig2,
      xsrfHeaderName: defaultToConfig2,
      onUploadProgress: defaultToConfig2,
      onDownloadProgress: defaultToConfig2,
      decompress: defaultToConfig2,
      maxContentLength: defaultToConfig2,
      maxBodyLength: defaultToConfig2,
      beforeRedirect: defaultToConfig2,
      transport: defaultToConfig2,
      httpAgent: defaultToConfig2,
      httpsAgent: defaultToConfig2,
      cancelToken: defaultToConfig2,
      socketPath: defaultToConfig2,
      responseEncoding: defaultToConfig2,
      validateStatus: mergeDirectKeys,
      headers: (a, b, prop) => mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)
    };
    utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
      const merge2 = mergeMap[prop] || mergeDeepProperties;
      const configValue = merge2(config1[prop], config2[prop], prop);
      utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
  }
  var headersToObject;
  var init_mergeConfig = __esm({
    "node_modules/axios/lib/core/mergeConfig.js"() {
      "use strict";
      init_utils3();
      init_AxiosHeaders();
      headersToObject = (thing) => thing instanceof AxiosHeaders_default ? { ...thing } : thing;
    }
  });

  // node_modules/axios/lib/helpers/resolveConfig.js
  var resolveConfig_default;
  var init_resolveConfig = __esm({
    "node_modules/axios/lib/helpers/resolveConfig.js"() {
      init_platform();
      init_utils3();
      init_isURLSameOrigin();
      init_cookies();
      init_buildFullPath();
      init_mergeConfig();
      init_AxiosHeaders();
      init_buildURL();
      resolveConfig_default = (config) => {
        const newConfig = mergeConfig({}, config);
        let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
        newConfig.headers = headers = AxiosHeaders_default.from(headers);
        newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);
        if (auth) {
          headers.set(
            "Authorization",
            "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
          );
        }
        let contentType;
        if (utils_default.isFormData(data)) {
          if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
            headers.setContentType(void 0);
          } else if ((contentType = headers.getContentType()) !== false) {
            const [type, ...tokens2] = contentType ? contentType.split(";").map((token2) => token2.trim()).filter(Boolean) : [];
            headers.setContentType([type || "multipart/form-data", ...tokens2].join("; "));
          }
        }
        if (platform_default.hasStandardBrowserEnv) {
          withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
          if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(newConfig.url)) {
            const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies_default.read(xsrfCookieName);
            if (xsrfValue) {
              headers.set(xsrfHeaderName, xsrfValue);
            }
          }
        }
        return newConfig;
      };
    }
  });

  // node_modules/axios/lib/adapters/xhr.js
  var isXHRAdapterSupported, xhr_default;
  var init_xhr = __esm({
    "node_modules/axios/lib/adapters/xhr.js"() {
      init_utils3();
      init_settle();
      init_transitional();
      init_AxiosError();
      init_CanceledError();
      init_parseProtocol();
      init_platform();
      init_AxiosHeaders();
      init_progressEventReducer();
      init_resolveConfig();
      isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
      xhr_default = isXHRAdapterSupported && function(config) {
        return new Promise(function dispatchXhrRequest(resolve, reject) {
          const _config = resolveConfig_default(config);
          let requestData = _config.data;
          const requestHeaders = AxiosHeaders_default.from(_config.headers).normalize();
          let { responseType, onUploadProgress, onDownloadProgress } = _config;
          let onCanceled;
          let uploadThrottled, downloadThrottled;
          let flushUpload, flushDownload;
          function done() {
            flushUpload && flushUpload();
            flushDownload && flushDownload();
            _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
            _config.signal && _config.signal.removeEventListener("abort", onCanceled);
          }
          let request = new XMLHttpRequest();
          request.open(_config.method.toUpperCase(), _config.url, true);
          request.timeout = _config.timeout;
          function onloadend() {
            if (!request) {
              return;
            }
            const responseHeaders = AxiosHeaders_default.from(
              "getAllResponseHeaders" in request && request.getAllResponseHeaders()
            );
            const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
            const response = {
              data: responseData,
              status: request.status,
              statusText: request.statusText,
              headers: responseHeaders,
              config,
              request
            };
            settle(function _resolve(value) {
              resolve(value);
              done();
            }, function _reject(err) {
              reject(err);
              done();
            }, response);
            request = null;
          }
          if ("onloadend" in request) {
            request.onloadend = onloadend;
          } else {
            request.onreadystatechange = function handleLoad() {
              if (!request || request.readyState !== 4) {
                return;
              }
              if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
                return;
              }
              setTimeout(onloadend);
            };
          }
          request.onabort = function handleAbort() {
            if (!request) {
              return;
            }
            reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
            request = null;
          };
          request.onerror = function handleError() {
            reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
            request = null;
          };
          request.ontimeout = function handleTimeout() {
            let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
            const transitional2 = _config.transitional || transitional_default;
            if (_config.timeoutErrorMessage) {
              timeoutErrorMessage = _config.timeoutErrorMessage;
            }
            reject(new AxiosError_default(
              timeoutErrorMessage,
              transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
              config,
              request
            ));
            request = null;
          };
          requestData === void 0 && requestHeaders.setContentType(null);
          if ("setRequestHeader" in request) {
            utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
              request.setRequestHeader(key, val);
            });
          }
          if (!utils_default.isUndefined(_config.withCredentials)) {
            request.withCredentials = !!_config.withCredentials;
          }
          if (responseType && responseType !== "json") {
            request.responseType = _config.responseType;
          }
          if (onDownloadProgress) {
            [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
            request.addEventListener("progress", downloadThrottled);
          }
          if (onUploadProgress && request.upload) {
            [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
            request.upload.addEventListener("progress", uploadThrottled);
            request.upload.addEventListener("loadend", flushUpload);
          }
          if (_config.cancelToken || _config.signal) {
            onCanceled = (cancel) => {
              if (!request) {
                return;
              }
              reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
              request.abort();
              request = null;
            };
            _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
            if (_config.signal) {
              _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
            }
          }
          const protocol = parseProtocol(_config.url);
          if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
            reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
            return;
          }
          request.send(requestData || null);
        });
      };
    }
  });

  // node_modules/axios/lib/helpers/composeSignals.js
  var composeSignals, composeSignals_default;
  var init_composeSignals = __esm({
    "node_modules/axios/lib/helpers/composeSignals.js"() {
      init_CanceledError();
      init_AxiosError();
      init_utils3();
      composeSignals = (signals, timeout2) => {
        const { length: length2 } = signals = signals ? signals.filter(Boolean) : [];
        if (timeout2 || length2) {
          let controller = new AbortController();
          let aborted;
          const onabort = function(reason) {
            if (!aborted) {
              aborted = true;
              unsubscribe();
              const err = reason instanceof Error ? reason : this.reason;
              controller.abort(err instanceof AxiosError_default ? err : new CanceledError_default(err instanceof Error ? err.message : err));
            }
          };
          let timer = timeout2 && setTimeout(() => {
            timer = null;
            onabort(new AxiosError_default(`timeout ${timeout2} of ms exceeded`, AxiosError_default.ETIMEDOUT));
          }, timeout2);
          const unsubscribe = () => {
            if (signals) {
              timer && clearTimeout(timer);
              timer = null;
              signals.forEach((signal2) => {
                signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
              });
              signals = null;
            }
          };
          signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
          const { signal } = controller;
          signal.unsubscribe = () => utils_default.asap(unsubscribe);
          return signal;
        }
      };
      composeSignals_default = composeSignals;
    }
  });

  // node_modules/axios/lib/helpers/trackStream.js
  var streamChunk, readBytes, readStream, trackStream;
  var init_trackStream = __esm({
    "node_modules/axios/lib/helpers/trackStream.js"() {
      streamChunk = function* (chunk, chunkSize) {
        let len = chunk.byteLength;
        if (!chunkSize || len < chunkSize) {
          yield chunk;
          return;
        }
        let pos = 0;
        let end;
        while (pos < len) {
          end = pos + chunkSize;
          yield chunk.slice(pos, end);
          pos = end;
        }
      };
      readBytes = async function* (iterable, chunkSize) {
        for await (const chunk of readStream(iterable)) {
          yield* streamChunk(chunk, chunkSize);
        }
      };
      readStream = async function* (stream) {
        if (stream[Symbol.asyncIterator]) {
          yield* stream;
          return;
        }
        const reader = stream.getReader();
        try {
          for (; ; ) {
            const { done, value } = await reader.read();
            if (done) {
              break;
            }
            yield value;
          }
        } finally {
          await reader.cancel();
        }
      };
      trackStream = (stream, chunkSize, onProgress, onFinish) => {
        const iterator = readBytes(stream, chunkSize);
        let bytes = 0;
        let done;
        let _onFinish = (e) => {
          if (!done) {
            done = true;
            onFinish && onFinish(e);
          }
        };
        return new ReadableStream({
          async pull(controller) {
            try {
              const { done: done2, value } = await iterator.next();
              if (done2) {
                _onFinish();
                controller.close();
                return;
              }
              let len = value.byteLength;
              if (onProgress) {
                let loadedBytes = bytes += len;
                onProgress(loadedBytes);
              }
              controller.enqueue(new Uint8Array(value));
            } catch (err) {
              _onFinish(err);
              throw err;
            }
          },
          cancel(reason) {
            _onFinish(reason);
            return iterator.return();
          }
        }, {
          highWaterMark: 2
        });
      };
    }
  });

  // node_modules/axios/lib/adapters/fetch.js
  var isFetchSupported, isReadableStreamSupported, encodeText, test, supportsRequestStream, DEFAULT_CHUNK_SIZE, supportsResponseStream, resolvers, getBodyLength, resolveBodyLength, fetch_default;
  var init_fetch = __esm({
    "node_modules/axios/lib/adapters/fetch.js"() {
      init_platform();
      init_utils3();
      init_AxiosError();
      init_composeSignals();
      init_trackStream();
      init_AxiosHeaders();
      init_progressEventReducer();
      init_resolveConfig();
      init_settle();
      isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
      isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
      encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
      test = (fn, ...args) => {
        try {
          return !!fn(...args);
        } catch (e) {
          return false;
        }
      };
      supportsRequestStream = isReadableStreamSupported && test(() => {
        let duplexAccessed = false;
        const hasContentType = new Request(platform_default.origin, {
          body: new ReadableStream(),
          method: "POST",
          get duplex() {
            duplexAccessed = true;
            return "half";
          }
        }).headers.has("Content-Type");
        return duplexAccessed && !hasContentType;
      });
      DEFAULT_CHUNK_SIZE = 64 * 1024;
      supportsResponseStream = isReadableStreamSupported && test(() => utils_default.isReadableStream(new Response("").body));
      resolvers = {
        stream: supportsResponseStream && ((res) => res.body)
      };
      isFetchSupported && ((res) => {
        ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
          !resolvers[type] && (resolvers[type] = utils_default.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
            throw new AxiosError_default(`Response type '${type}' is not supported`, AxiosError_default.ERR_NOT_SUPPORT, config);
          });
        });
      })(new Response());
      getBodyLength = async (body) => {
        if (body == null) {
          return 0;
        }
        if (utils_default.isBlob(body)) {
          return body.size;
        }
        if (utils_default.isSpecCompliantForm(body)) {
          const _request = new Request(platform_default.origin, {
            method: "POST",
            body
          });
          return (await _request.arrayBuffer()).byteLength;
        }
        if (utils_default.isArrayBufferView(body) || utils_default.isArrayBuffer(body)) {
          return body.byteLength;
        }
        if (utils_default.isURLSearchParams(body)) {
          body = body + "";
        }
        if (utils_default.isString(body)) {
          return (await encodeText(body)).byteLength;
        }
      };
      resolveBodyLength = async (headers, body) => {
        const length2 = utils_default.toFiniteNumber(headers.getContentLength());
        return length2 == null ? getBodyLength(body) : length2;
      };
      fetch_default = isFetchSupported && (async (config) => {
        let {
          url,
          method,
          data,
          signal,
          cancelToken,
          timeout: timeout2,
          onDownloadProgress,
          onUploadProgress,
          responseType,
          headers,
          withCredentials = "same-origin",
          fetchOptions
        } = resolveConfig_default(config);
        responseType = responseType ? (responseType + "").toLowerCase() : "text";
        let composedSignal = composeSignals_default([signal, cancelToken && cancelToken.toAbortSignal()], timeout2);
        let request;
        const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
          composedSignal.unsubscribe();
        });
        let requestContentLength;
        try {
          if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
            let _request = new Request(url, {
              method: "POST",
              body: data,
              duplex: "half"
            });
            let contentTypeHeader;
            if (utils_default.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
              headers.setContentType(contentTypeHeader);
            }
            if (_request.body) {
              const [onProgress, flush] = progressEventDecorator(
                requestContentLength,
                progressEventReducer(asyncDecorator(onUploadProgress))
              );
              data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
            }
          }
          if (!utils_default.isString(withCredentials)) {
            withCredentials = withCredentials ? "include" : "omit";
          }
          const isCredentialsSupported = "credentials" in Request.prototype;
          request = new Request(url, {
            ...fetchOptions,
            signal: composedSignal,
            method: method.toUpperCase(),
            headers: headers.normalize().toJSON(),
            body: data,
            duplex: "half",
            credentials: isCredentialsSupported ? withCredentials : void 0
          });
          let response = await fetch(request);
          const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
          if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
            const options = {};
            ["status", "statusText", "headers"].forEach((prop) => {
              options[prop] = response[prop];
            });
            const responseContentLength = utils_default.toFiniteNumber(response.headers.get("content-length"));
            const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
              responseContentLength,
              progressEventReducer(asyncDecorator(onDownloadProgress), true)
            ) || [];
            response = new Response(
              trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
                flush && flush();
                unsubscribe && unsubscribe();
              }),
              options
            );
          }
          responseType = responseType || "text";
          let responseData = await resolvers[utils_default.findKey(resolvers, responseType) || "text"](response, config);
          !isStreamResponse && unsubscribe && unsubscribe();
          return await new Promise((resolve, reject) => {
            settle(resolve, reject, {
              data: responseData,
              headers: AxiosHeaders_default.from(response.headers),
              status: response.status,
              statusText: response.statusText,
              config,
              request
            });
          });
        } catch (err) {
          unsubscribe && unsubscribe();
          if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
            throw Object.assign(
              new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request),
              {
                cause: err.cause || err
              }
            );
          }
          throw AxiosError_default.from(err, err && err.code, config, request);
        }
      });
    }
  });

  // node_modules/axios/lib/adapters/adapters.js
  var knownAdapters, renderReason, isResolvedHandle, adapters_default;
  var init_adapters = __esm({
    "node_modules/axios/lib/adapters/adapters.js"() {
      init_utils3();
      init_null();
      init_xhr();
      init_fetch();
      init_AxiosError();
      knownAdapters = {
        http: null_default,
        xhr: xhr_default,
        fetch: fetch_default
      };
      utils_default.forEach(knownAdapters, (fn, value) => {
        if (fn) {
          try {
            Object.defineProperty(fn, "name", { value });
          } catch (e) {
          }
          Object.defineProperty(fn, "adapterName", { value });
        }
      });
      renderReason = (reason) => `- ${reason}`;
      isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
      adapters_default = {
        getAdapter: (adapters) => {
          adapters = utils_default.isArray(adapters) ? adapters : [adapters];
          const { length: length2 } = adapters;
          let nameOrAdapter;
          let adapter;
          const rejectedReasons = {};
          for (let i = 0; i < length2; i++) {
            nameOrAdapter = adapters[i];
            let id;
            adapter = nameOrAdapter;
            if (!isResolvedHandle(nameOrAdapter)) {
              adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
              if (adapter === void 0) {
                throw new AxiosError_default(`Unknown adapter '${id}'`);
              }
            }
            if (adapter) {
              break;
            }
            rejectedReasons[id || "#" + i] = adapter;
          }
          if (!adapter) {
            const reasons = Object.entries(rejectedReasons).map(
              ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
            );
            let s = length2 ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
            throw new AxiosError_default(
              `There is no suitable adapter to dispatch the request ` + s,
              "ERR_NOT_SUPPORT"
            );
          }
          return adapter;
        },
        adapters: knownAdapters
      };
    }
  });

  // node_modules/axios/lib/core/dispatchRequest.js
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }
    if (config.signal && config.signal.aborted) {
      throw new CanceledError_default(null, config);
    }
  }
  function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    config.headers = AxiosHeaders_default.from(config.headers);
    config.data = transformData.call(
      config,
      config.transformRequest
    );
    if (["post", "put", "patch"].indexOf(config.method) !== -1) {
      config.headers.setContentType("application/x-www-form-urlencoded", false);
    }
    const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);
      response.data = transformData.call(
        config,
        config.transformResponse,
        response
      );
      response.headers = AxiosHeaders_default.from(response.headers);
      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);
        if (reason && reason.response) {
          reason.response.data = transformData.call(
            config,
            config.transformResponse,
            reason.response
          );
          reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
        }
      }
      return Promise.reject(reason);
    });
  }
  var init_dispatchRequest = __esm({
    "node_modules/axios/lib/core/dispatchRequest.js"() {
      "use strict";
      init_transformData();
      init_isCancel();
      init_defaults();
      init_CanceledError();
      init_AxiosHeaders();
      init_adapters();
    }
  });

  // node_modules/axios/lib/env/data.js
  var VERSION;
  var init_data = __esm({
    "node_modules/axios/lib/env/data.js"() {
      VERSION = "1.8.4";
    }
  });

  // node_modules/axios/lib/helpers/validator.js
  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") {
      throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
    }
    const keys = Object.keys(options);
    let i = keys.length;
    while (i-- > 0) {
      const opt = keys[i];
      const validator = schema[opt];
      if (validator) {
        const value = options[opt];
        const result = value === void 0 || validator(value, opt, options);
        if (result !== true) {
          throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
      }
    }
  }
  var validators, deprecatedWarnings, validator_default;
  var init_validator = __esm({
    "node_modules/axios/lib/helpers/validator.js"() {
      "use strict";
      init_data();
      init_AxiosError();
      validators = {};
      ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
        validators[type] = function validator(thing) {
          return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
        };
      });
      deprecatedWarnings = {};
      validators.transitional = function transitional(validator, version, message) {
        function formatMessage(opt, desc) {
          return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
        }
        return (value, opt, opts) => {
          if (validator === false) {
            throw new AxiosError_default(
              formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
              AxiosError_default.ERR_DEPRECATED
            );
          }
          if (version && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            console.warn(
              formatMessage(
                opt,
                " has been deprecated since v" + version + " and will be removed in the near future"
              )
            );
          }
          return validator ? validator(value, opt, opts) : true;
        };
      };
      validators.spelling = function spelling(correctSpelling) {
        return (value, opt) => {
          console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
          return true;
        };
      };
      validator_default = {
        assertOptions,
        validators
      };
    }
  });

  // node_modules/axios/lib/core/Axios.js
  var validators2, Axios, Axios_default;
  var init_Axios = __esm({
    "node_modules/axios/lib/core/Axios.js"() {
      "use strict";
      init_utils3();
      init_buildURL();
      init_InterceptorManager();
      init_dispatchRequest();
      init_mergeConfig();
      init_buildFullPath();
      init_validator();
      init_AxiosHeaders();
      validators2 = validator_default.validators;
      Axios = class {
        constructor(instanceConfig) {
          this.defaults = instanceConfig;
          this.interceptors = {
            request: new InterceptorManager_default(),
            response: new InterceptorManager_default()
          };
        }
        /**
         * Dispatch a request
         *
         * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
         * @param {?Object} config
         *
         * @returns {Promise} The Promise to be fulfilled
         */
        async request(configOrUrl, config) {
          try {
            return await this._request(configOrUrl, config);
          } catch (err) {
            if (err instanceof Error) {
              let dummy = {};
              Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
              const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
              try {
                if (!err.stack) {
                  err.stack = stack;
                } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                  err.stack += "\n" + stack;
                }
              } catch (e) {
              }
            }
            throw err;
          }
        }
        _request(configOrUrl, config) {
          if (typeof configOrUrl === "string") {
            config = config || {};
            config.url = configOrUrl;
          } else {
            config = configOrUrl || {};
          }
          config = mergeConfig(this.defaults, config);
          const { transitional: transitional2, paramsSerializer, headers } = config;
          if (transitional2 !== void 0) {
            validator_default.assertOptions(transitional2, {
              silentJSONParsing: validators2.transitional(validators2.boolean),
              forcedJSONParsing: validators2.transitional(validators2.boolean),
              clarifyTimeoutError: validators2.transitional(validators2.boolean)
            }, false);
          }
          if (paramsSerializer != null) {
            if (utils_default.isFunction(paramsSerializer)) {
              config.paramsSerializer = {
                serialize: paramsSerializer
              };
            } else {
              validator_default.assertOptions(paramsSerializer, {
                encode: validators2.function,
                serialize: validators2.function
              }, true);
            }
          }
          if (config.allowAbsoluteUrls !== void 0) {
          } else if (this.defaults.allowAbsoluteUrls !== void 0) {
            config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
          } else {
            config.allowAbsoluteUrls = true;
          }
          validator_default.assertOptions(config, {
            baseUrl: validators2.spelling("baseURL"),
            withXsrfToken: validators2.spelling("withXSRFToken")
          }, true);
          config.method = (config.method || this.defaults.method || "get").toLowerCase();
          let contextHeaders = headers && utils_default.merge(
            headers.common,
            headers[config.method]
          );
          headers && utils_default.forEach(
            ["delete", "get", "head", "post", "put", "patch", "common"],
            (method) => {
              delete headers[method];
            }
          );
          config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
          const requestInterceptorChain = [];
          let synchronousRequestInterceptors = true;
          this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
            if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
              return;
            }
            synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
            requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
          });
          const responseInterceptorChain = [];
          this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
            responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
          });
          let promise;
          let i = 0;
          let len;
          if (!synchronousRequestInterceptors) {
            const chain = [dispatchRequest.bind(this), void 0];
            chain.unshift.apply(chain, requestInterceptorChain);
            chain.push.apply(chain, responseInterceptorChain);
            len = chain.length;
            promise = Promise.resolve(config);
            while (i < len) {
              promise = promise.then(chain[i++], chain[i++]);
            }
            return promise;
          }
          len = requestInterceptorChain.length;
          let newConfig = config;
          i = 0;
          while (i < len) {
            const onFulfilled = requestInterceptorChain[i++];
            const onRejected = requestInterceptorChain[i++];
            try {
              newConfig = onFulfilled(newConfig);
            } catch (error) {
              onRejected.call(this, error);
              break;
            }
          }
          try {
            promise = dispatchRequest.call(this, newConfig);
          } catch (error) {
            return Promise.reject(error);
          }
          i = 0;
          len = responseInterceptorChain.length;
          while (i < len) {
            promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
          }
          return promise;
        }
        getUri(config) {
          config = mergeConfig(this.defaults, config);
          const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
          return buildURL(fullPath, config.params, config.paramsSerializer);
        }
      };
      utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
        Axios.prototype[method] = function(url, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            url,
            data: (config || {}).data
          }));
        };
      });
      utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
        function generateHTTPMethod(isForm) {
          return function httpMethod(url, data, config) {
            return this.request(mergeConfig(config || {}, {
              method,
              headers: isForm ? {
                "Content-Type": "multipart/form-data"
              } : {},
              url,
              data
            }));
          };
        }
        Axios.prototype[method] = generateHTTPMethod();
        Axios.prototype[method + "Form"] = generateHTTPMethod(true);
      });
      Axios_default = Axios;
    }
  });

  // node_modules/axios/lib/cancel/CancelToken.js
  var CancelToken, CancelToken_default;
  var init_CancelToken = __esm({
    "node_modules/axios/lib/cancel/CancelToken.js"() {
      "use strict";
      init_CanceledError();
      CancelToken = class _CancelToken {
        constructor(executor) {
          if (typeof executor !== "function") {
            throw new TypeError("executor must be a function.");
          }
          let resolvePromise;
          this.promise = new Promise(function promiseExecutor(resolve) {
            resolvePromise = resolve;
          });
          const token2 = this;
          this.promise.then((cancel) => {
            if (!token2._listeners) return;
            let i = token2._listeners.length;
            while (i-- > 0) {
              token2._listeners[i](cancel);
            }
            token2._listeners = null;
          });
          this.promise.then = (onfulfilled) => {
            let _resolve;
            const promise = new Promise((resolve) => {
              token2.subscribe(resolve);
              _resolve = resolve;
            }).then(onfulfilled);
            promise.cancel = function reject() {
              token2.unsubscribe(_resolve);
            };
            return promise;
          };
          executor(function cancel(message, config, request) {
            if (token2.reason) {
              return;
            }
            token2.reason = new CanceledError_default(message, config, request);
            resolvePromise(token2.reason);
          });
        }
        /**
         * Throws a `CanceledError` if cancellation has been requested.
         */
        throwIfRequested() {
          if (this.reason) {
            throw this.reason;
          }
        }
        /**
         * Subscribe to the cancel signal
         */
        subscribe(listener) {
          if (this.reason) {
            listener(this.reason);
            return;
          }
          if (this._listeners) {
            this._listeners.push(listener);
          } else {
            this._listeners = [listener];
          }
        }
        /**
         * Unsubscribe from the cancel signal
         */
        unsubscribe(listener) {
          if (!this._listeners) {
            return;
          }
          const index = this._listeners.indexOf(listener);
          if (index !== -1) {
            this._listeners.splice(index, 1);
          }
        }
        toAbortSignal() {
          const controller = new AbortController();
          const abort = (err) => {
            controller.abort(err);
          };
          this.subscribe(abort);
          controller.signal.unsubscribe = () => this.unsubscribe(abort);
          return controller.signal;
        }
        /**
         * Returns an object that contains a new `CancelToken` and a function that, when called,
         * cancels the `CancelToken`.
         */
        static source() {
          let cancel;
          const token2 = new _CancelToken(function executor(c) {
            cancel = c;
          });
          return {
            token: token2,
            cancel
          };
        }
      };
      CancelToken_default = CancelToken;
    }
  });

  // node_modules/axios/lib/helpers/spread.js
  function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  }
  var init_spread = __esm({
    "node_modules/axios/lib/helpers/spread.js"() {
      "use strict";
    }
  });

  // node_modules/axios/lib/helpers/isAxiosError.js
  function isAxiosError(payload) {
    return utils_default.isObject(payload) && payload.isAxiosError === true;
  }
  var init_isAxiosError = __esm({
    "node_modules/axios/lib/helpers/isAxiosError.js"() {
      "use strict";
      init_utils3();
    }
  });

  // node_modules/axios/lib/helpers/HttpStatusCode.js
  var HttpStatusCode, HttpStatusCode_default;
  var init_HttpStatusCode = __esm({
    "node_modules/axios/lib/helpers/HttpStatusCode.js"() {
      HttpStatusCode = {
        Continue: 100,
        SwitchingProtocols: 101,
        Processing: 102,
        EarlyHints: 103,
        Ok: 200,
        Created: 201,
        Accepted: 202,
        NonAuthoritativeInformation: 203,
        NoContent: 204,
        ResetContent: 205,
        PartialContent: 206,
        MultiStatus: 207,
        AlreadyReported: 208,
        ImUsed: 226,
        MultipleChoices: 300,
        MovedPermanently: 301,
        Found: 302,
        SeeOther: 303,
        NotModified: 304,
        UseProxy: 305,
        Unused: 306,
        TemporaryRedirect: 307,
        PermanentRedirect: 308,
        BadRequest: 400,
        Unauthorized: 401,
        PaymentRequired: 402,
        Forbidden: 403,
        NotFound: 404,
        MethodNotAllowed: 405,
        NotAcceptable: 406,
        ProxyAuthenticationRequired: 407,
        RequestTimeout: 408,
        Conflict: 409,
        Gone: 410,
        LengthRequired: 411,
        PreconditionFailed: 412,
        PayloadTooLarge: 413,
        UriTooLong: 414,
        UnsupportedMediaType: 415,
        RangeNotSatisfiable: 416,
        ExpectationFailed: 417,
        ImATeapot: 418,
        MisdirectedRequest: 421,
        UnprocessableEntity: 422,
        Locked: 423,
        FailedDependency: 424,
        TooEarly: 425,
        UpgradeRequired: 426,
        PreconditionRequired: 428,
        TooManyRequests: 429,
        RequestHeaderFieldsTooLarge: 431,
        UnavailableForLegalReasons: 451,
        InternalServerError: 500,
        NotImplemented: 501,
        BadGateway: 502,
        ServiceUnavailable: 503,
        GatewayTimeout: 504,
        HttpVersionNotSupported: 505,
        VariantAlsoNegotiates: 506,
        InsufficientStorage: 507,
        LoopDetected: 508,
        NotExtended: 510,
        NetworkAuthenticationRequired: 511
      };
      Object.entries(HttpStatusCode).forEach(([key, value]) => {
        HttpStatusCode[value] = key;
      });
      HttpStatusCode_default = HttpStatusCode;
    }
  });

  // node_modules/axios/lib/axios.js
  function createInstance(defaultConfig) {
    const context = new Axios_default(defaultConfig);
    const instance = bind(Axios_default.prototype.request, context);
    utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
    utils_default.extend(instance, context, null, { allOwnKeys: true });
    instance.create = function create(instanceConfig) {
      return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance;
  }
  var axios, axios_default;
  var init_axios = __esm({
    "node_modules/axios/lib/axios.js"() {
      "use strict";
      init_utils3();
      init_bind();
      init_Axios();
      init_mergeConfig();
      init_defaults();
      init_formDataToJSON();
      init_CanceledError();
      init_CancelToken();
      init_isCancel();
      init_data();
      init_toFormData();
      init_AxiosError();
      init_spread();
      init_isAxiosError();
      init_AxiosHeaders();
      init_adapters();
      init_HttpStatusCode();
      axios = createInstance(defaults_default);
      axios.Axios = Axios_default;
      axios.CanceledError = CanceledError_default;
      axios.CancelToken = CancelToken_default;
      axios.isCancel = isCancel;
      axios.VERSION = VERSION;
      axios.toFormData = toFormData_default;
      axios.AxiosError = AxiosError_default;
      axios.Cancel = axios.CanceledError;
      axios.all = function all(promises) {
        return Promise.all(promises);
      };
      axios.spread = spread;
      axios.isAxiosError = isAxiosError;
      axios.mergeConfig = mergeConfig;
      axios.AxiosHeaders = AxiosHeaders_default;
      axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
      axios.getAdapter = adapters_default.getAdapter;
      axios.HttpStatusCode = HttpStatusCode_default;
      axios.default = axios;
      axios_default = axios;
    }
  });

  // node_modules/axios/index.js
  var Axios2, AxiosError2, CanceledError2, isCancel2, CancelToken2, VERSION2, all2, Cancel2, isAxiosError2, spread2, toFormData2, AxiosHeaders2, HttpStatusCode2, formToJSON, getAdapter, mergeConfig2;
  var init_axios2 = __esm({
    "node_modules/axios/index.js"() {
      init_axios();
      ({
        Axios: Axios2,
        AxiosError: AxiosError2,
        CanceledError: CanceledError2,
        isCancel: isCancel2,
        CancelToken: CancelToken2,
        VERSION: VERSION2,
        all: all2,
        Cancel: Cancel2,
        isAxiosError: isAxiosError2,
        spread: spread2,
        toFormData: toFormData2,
        AxiosHeaders: AxiosHeaders2,
        HttpStatusCode: HttpStatusCode2,
        formToJSON,
        getAdapter,
        mergeConfig: mergeConfig2
      } = axios_default);
    }
  });

  // node_modules/is-retry-allowed/index.js
  var require_is_retry_allowed = __commonJS({
    "node_modules/is-retry-allowed/index.js"(exports, module) {
      "use strict";
      var denyList = /* @__PURE__ */ new Set([
        "ENOTFOUND",
        "ENETUNREACH",
        // SSL errors from https://github.com/nodejs/node/blob/fc8e3e2cdc521978351de257030db0076d79e0ab/src/crypto/crypto_common.cc#L301-L328
        "UNABLE_TO_GET_ISSUER_CERT",
        "UNABLE_TO_GET_CRL",
        "UNABLE_TO_DECRYPT_CERT_SIGNATURE",
        "UNABLE_TO_DECRYPT_CRL_SIGNATURE",
        "UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY",
        "CERT_SIGNATURE_FAILURE",
        "CRL_SIGNATURE_FAILURE",
        "CERT_NOT_YET_VALID",
        "CERT_HAS_EXPIRED",
        "CRL_NOT_YET_VALID",
        "CRL_HAS_EXPIRED",
        "ERROR_IN_CERT_NOT_BEFORE_FIELD",
        "ERROR_IN_CERT_NOT_AFTER_FIELD",
        "ERROR_IN_CRL_LAST_UPDATE_FIELD",
        "ERROR_IN_CRL_NEXT_UPDATE_FIELD",
        "OUT_OF_MEM",
        "DEPTH_ZERO_SELF_SIGNED_CERT",
        "SELF_SIGNED_CERT_IN_CHAIN",
        "UNABLE_TO_GET_ISSUER_CERT_LOCALLY",
        "UNABLE_TO_VERIFY_LEAF_SIGNATURE",
        "CERT_CHAIN_TOO_LONG",
        "CERT_REVOKED",
        "INVALID_CA",
        "PATH_LENGTH_EXCEEDED",
        "INVALID_PURPOSE",
        "CERT_UNTRUSTED",
        "CERT_REJECTED",
        "HOSTNAME_MISMATCH"
      ]);
      module.exports = (error) => !denyList.has(error && error.code);
    }
  });

  // node_modules/axios-retry/dist/esm/index.js
  function isNetworkError(error) {
    const CODE_EXCLUDE_LIST = ["ERR_CANCELED", "ECONNABORTED"];
    if (error.response) {
      return false;
    }
    if (!error.code) {
      return false;
    }
    if (CODE_EXCLUDE_LIST.includes(error.code)) {
      return false;
    }
    return (0, import_is_retry_allowed.default)(error);
  }
  function isRetryableError(error) {
    return error.code !== "ECONNABORTED" && (!error.response || error.response.status === 429 || error.response.status >= 500 && error.response.status <= 599);
  }
  function isSafeRequestError(error) {
    if (!error.config?.method) {
      return false;
    }
    return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;
  }
  function isIdempotentRequestError(error) {
    if (!error.config?.method) {
      return false;
    }
    return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;
  }
  function isNetworkOrIdempotentRequestError(error) {
    return isNetworkError(error) || isIdempotentRequestError(error);
  }
  function retryAfter(error = void 0) {
    const retryAfterHeader = error?.response?.headers["retry-after"];
    if (!retryAfterHeader) {
      return 0;
    }
    let retryAfterMs = (Number(retryAfterHeader) || 0) * 1e3;
    if (retryAfterMs === 0) {
      retryAfterMs = (new Date(retryAfterHeader).valueOf() || 0) - Date.now();
    }
    return Math.max(0, retryAfterMs);
  }
  function noDelay(_retryNumber = 0, error = void 0) {
    return Math.max(0, retryAfter(error));
  }
  function exponentialDelay(retryNumber = 0, error = void 0, delayFactor = 100) {
    const calculatedDelay = 2 ** retryNumber * delayFactor;
    const delay = Math.max(calculatedDelay, retryAfter(error));
    const randomSum = delay * 0.2 * Math.random();
    return delay + randomSum;
  }
  function linearDelay(delayFactor = 100) {
    return (retryNumber = 0, error = void 0) => {
      const delay = retryNumber * delayFactor;
      return Math.max(delay, retryAfter(error));
    };
  }
  function getRequestOptions(config, defaultOptions) {
    return { ...DEFAULT_OPTIONS, ...defaultOptions, ...config[namespace] };
  }
  function setCurrentState(config, defaultOptions, resetLastRequestTime = false) {
    const currentState = getRequestOptions(config, defaultOptions || {});
    currentState.retryCount = currentState.retryCount || 0;
    if (!currentState.lastRequestTime || resetLastRequestTime) {
      currentState.lastRequestTime = Date.now();
    }
    config[namespace] = currentState;
    return currentState;
  }
  function fixConfig(axiosInstance, config) {
    if (axiosInstance.defaults.agent === config.agent) {
      delete config.agent;
    }
    if (axiosInstance.defaults.httpAgent === config.httpAgent) {
      delete config.httpAgent;
    }
    if (axiosInstance.defaults.httpsAgent === config.httpsAgent) {
      delete config.httpsAgent;
    }
  }
  async function shouldRetry(currentState, error) {
    const { retries, retryCondition } = currentState;
    const shouldRetryOrPromise = (currentState.retryCount || 0) < retries && retryCondition(error);
    if (typeof shouldRetryOrPromise === "object") {
      try {
        const shouldRetryPromiseResult = await shouldRetryOrPromise;
        return shouldRetryPromiseResult !== false;
      } catch (_err) {
        return false;
      }
    }
    return shouldRetryOrPromise;
  }
  async function handleRetry(axiosInstance, currentState, error, config) {
    currentState.retryCount += 1;
    const { retryDelay, shouldResetTimeout, onRetry } = currentState;
    const delay = retryDelay(currentState.retryCount, error);
    fixConfig(axiosInstance, config);
    if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {
      const lastRequestDuration = Date.now() - currentState.lastRequestTime;
      const timeout2 = config.timeout - lastRequestDuration - delay;
      if (timeout2 <= 0) {
        return Promise.reject(error);
      }
      config.timeout = timeout2;
    }
    config.transformRequest = [(data) => data];
    await onRetry(currentState.retryCount, error, config);
    if (config.signal?.aborted) {
      return Promise.resolve(axiosInstance(config));
    }
    return new Promise((resolve) => {
      const abortListener = () => {
        clearTimeout(timeout2);
        resolve(axiosInstance(config));
      };
      const timeout2 = setTimeout(() => {
        resolve(axiosInstance(config));
        if (config.signal?.removeEventListener) {
          config.signal.removeEventListener("abort", abortListener);
        }
      }, delay);
      if (config.signal?.addEventListener) {
        config.signal.addEventListener("abort", abortListener, { once: true });
      }
    });
  }
  async function handleMaxRetryTimesExceeded(currentState, error) {
    if (currentState.retryCount >= currentState.retries)
      await currentState.onMaxRetryTimesExceeded(error, currentState.retryCount);
  }
  var import_is_retry_allowed, namespace, SAFE_HTTP_METHODS, IDEMPOTENT_HTTP_METHODS, DEFAULT_OPTIONS, axiosRetry, esm_default;
  var init_esm3 = __esm({
    "node_modules/axios-retry/dist/esm/index.js"() {
      import_is_retry_allowed = __toESM(require_is_retry_allowed(), 1);
      namespace = "axios-retry";
      SAFE_HTTP_METHODS = ["get", "head", "options"];
      IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(["put", "delete"]);
      DEFAULT_OPTIONS = {
        retries: 3,
        retryCondition: isNetworkOrIdempotentRequestError,
        retryDelay: noDelay,
        shouldResetTimeout: false,
        onRetry: () => {
        },
        onMaxRetryTimesExceeded: () => {
        },
        validateResponse: null
      };
      axiosRetry = (axiosInstance, defaultOptions) => {
        const requestInterceptorId = axiosInstance.interceptors.request.use((config) => {
          setCurrentState(config, defaultOptions, true);
          if (config[namespace]?.validateResponse) {
            config.validateStatus = () => false;
          }
          return config;
        });
        const responseInterceptorId = axiosInstance.interceptors.response.use(null, async (error) => {
          const { config } = error;
          if (!config) {
            return Promise.reject(error);
          }
          const currentState = setCurrentState(config, defaultOptions);
          if (error.response && currentState.validateResponse?.(error.response)) {
            return error.response;
          }
          if (await shouldRetry(currentState, error)) {
            return handleRetry(axiosInstance, currentState, error, config);
          }
          await handleMaxRetryTimesExceeded(currentState, error);
          return Promise.reject(error);
        });
        return { requestInterceptorId, responseInterceptorId };
      };
      axiosRetry.isNetworkError = isNetworkError;
      axiosRetry.isSafeRequestError = isSafeRequestError;
      axiosRetry.isIdempotentRequestError = isIdempotentRequestError;
      axiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;
      axiosRetry.exponentialDelay = exponentialDelay;
      axiosRetry.linearDelay = linearDelay;
      axiosRetry.isRetryableError = isRetryableError;
      esm_default = axiosRetry;
    }
  });

  // src/ChatCallUtils.ts
  function createRetryableAxiosClient() {
    const client = axios_default.create({
      timeout: 3e4,
      // 30 second timeout
      headers: {
        "Content-Type": "application/json"
      },
      withCredentials: false
    });
    esm_default(client, {
      retries: 3,
      retryDelay: (retryCount) => {
        return esm_default.exponentialDelay(retryCount) + Math.random() * 1e3;
      },
      retryCondition: (error) => {
        return esm_default.isNetworkOrIdempotentRequestError(error) || (error.response?.status ?? 0) >= 500 || error.code === "ECONNABORTED" || error.code === "ERR_NETWORK";
      },
      shouldResetTimeout: true
    });
    return client;
  }
  var init_ChatCallUtils = __esm({
    "src/ChatCallUtils.ts"() {
      "use strict";
      init_axios2();
      init_esm3();
    }
  });

  // src/ChatCall.ts
  async function processChat({
    screeningApiUrl,
    chatApiUrl,
    input,
    history,
    sessionId,
    personality,
    updateState,
    apiClient,
    benefitOfDoubt,
    onChunk,
    onComplete,
    forceNode
  }) {
    if (!apiClient) {
      apiClient = createRetryableAxiosClient();
    }
    try {
      const chatRequest = {
        personality,
        sessionId,
        input,
        benefitOfDoubt,
        history
      };
      const hasAssistantResponses = history.some((msg) => msg.role === import_prompt_repository.EChatRole.kAssistant);
      updateState("StartedScreening" /* kStartedScreening */);
      if (!hasAssistantResponses) {
        const screeningResponse = await apiClient.post(
          screeningApiUrl,
          chatRequest
        );
        const screeningResult = screeningResponse.data;
        if (!screeningResult || screeningResult.type === "offTopic" /* kOffTopic */) {
          updateState("RejectedFromScreening" /* kRejectedFromScreening */);
          return void 0;
        }
      }
      updateState("PassedScreening" /* kPassedScreening */);
      updateState("StartedChat" /* kStartedChat */);
      return new Promise((resolve, reject) => {
        let completeResponse = "";
        let lastProcessedLength = 0;
        const streamWithAxios = async () => {
          try {
            const config = {
              headers: {
                "Content-Type": "application/json",
                "Accept": "text/event-stream"
              },
              timeout: 3e5,
              // 5 minute timeout
              withCredentials: false,
              decompress: true,
              maxRedirects: 5
            };
            if (forceNode) {
              config.responseType = "stream";
              const response = await apiClient.post(chatApiUrl, chatRequest, config);
              const stream = response.data;
              stream.on("data", (chunk) => {
                const chunkStr = chunk.toString();
                processStreamData(chunkStr);
              });
              stream.on("end", () => {
                updateState("FinishedChat" /* kFinishedChat */);
                onComplete();
                resolve(completeResponse);
              });
              stream.on("error", (error) => {
                console.error("Stream error:", error);
                updateState("Error" /* kError */);
                reject(error);
              });
            } else {
              config.responseType = "text";
              config.onDownloadProgress = (progressEvent) => {
                try {
                  if (!progressEvent.event?.target) return;
                  const rawData = progressEvent.event.target.response;
                  const newData = rawData.substring(lastProcessedLength);
                  lastProcessedLength = rawData.length;
                  processStreamData(newData);
                } catch (e) {
                  console.error("Error in onDownloadProgress:", e);
                  throw e;
                }
              };
              const response = await apiClient.post(chatApiUrl, chatRequest, config);
              if (response.status === 200) {
                updateState("FinishedChat" /* kFinishedChat */);
                onComplete();
                resolve(completeResponse);
              } else {
                throw new Error(`Unexpected status: ${response.status}`);
              }
            }
          } catch (error) {
            console.error("Streaming error:", error);
            updateState("Error" /* kError */);
            reject(error);
          }
        };
        const processStreamData = (data) => {
          const lines = data.split("\n");
          for (const line2 of lines) {
            if (line2.trim() && line2.startsWith("data: ")) {
              const data2 = line2.slice(6).trim();
              if (data2 === "[DONE]") continue;
              if (data2) {
                const parsed = JSON.parse(data2);
                completeResponse += parsed;
                onChunk(parsed);
              }
            }
          }
        };
        streamWithAxios();
        const timeout2 = setTimeout(() => {
          updateState("Error" /* kError */);
          reject(new Error("Connection timed out"));
        }, 3e5);
      });
    } catch (error) {
      updateState("Error" /* kError */);
      return void 0;
    }
  }
  var import_prompt_repository;
  var init_ChatCall = __esm({
    "src/ChatCall.ts"() {
      "use strict";
      import_prompt_repository = __toESM(require_entry());
      init_AssistantChatApiTypes();
      init_UIStateMachine();
      init_ChatCallUtils();
    }
  });

  // src/OuterStyles.ts
  var pageOuterStyles, innerColumnStyles;
  var init_OuterStyles = __esm({
    "src/OuterStyles.ts"() {
      "use strict";
      init_lib22();
      pageOuterStyles = makeStyles2({
        root: {
          display: "flex",
          flexDirection: "row",
          alignItems: "stretch",
          /* for a row, the main axis is vertical, flex-end is items aligned to the bottom of the row */
          justifyContent: "center",
          /* for a row, the cross-axis is horizontal, center means vertically centered */
          height: "100%",
          /* fill the screen with flex layout */
          minHeight: "100vh",
          width: "100%",
          /* fill the screen with flex layout */
          minWidth: "100vw",
          marginLeft: "0px",
          marginRight: "0px",
          marginTop: "0px",
          marginBottom: "0px",
          paddingLeft: "20px",
          paddingRight: "20px",
          paddingTop: "20px",
          paddingBottom: "20px",
          webkitTextSizeAdjust: "100%"
        }
      });
      innerColumnStyles = makeStyles2({
        root: {
          display: "flex",
          flexDirection: "column",
          justifyContent: "flex-start",
          // start layout at the top       
          alignItems: "center",
          maxWidth: "896px",
          width: "100%"
        }
      });
    }
  });

  // src/SiteUtilities.tsx
  var import_react28, MOBILE_BREAKPOINT, useFooterStyles, Spacer, Footer;
  var init_SiteUtilities = __esm({
    "src/SiteUtilities.tsx"() {
      "use strict";
      import_react28 = __toESM(require_react());
      init_dist2();
      init_CommonStyles();
      init_UIStrings();
      init_lib22();
      MOBILE_BREAKPOINT = 768;
      useFooterStyles = makeStyles2({
        footerContainer: {
          position: "fixed",
          bottom: 0,
          left: 0,
          right: 0,
          backgroundColor: "var(--colorNeutralBackground1)",
          ...shorthands2.padding("12px"),
          ...shorthands2.borderTop("1px", "solid", "var(--colorNeutralStroke1)"),
          zIndex: 100
        },
        footerContent: {
          display: "flex",
          justifyContent: "center",
          gap: "24px",
          [`@media (max-width: ${MOBILE_BREAKPOINT}px)`]: {
            flexDirection: "column",
            alignItems: "center",
            gap: "12px"
          }
        }
      });
      Spacer = (props) => {
        return /* @__PURE__ */ import_react28.default.createElement("div", null, "\xA0\xA0\xA0");
      };
      Footer = (props) => {
        const uiStrings = getUIStrings("yardtalk" /* kYardTalk */);
        const linkClasses = standardLinkStyles();
        const styles = useFooterStyles();
        return /* @__PURE__ */ import_react28.default.createElement("div", { className: styles.footerContainer }, /* @__PURE__ */ import_react28.default.createElement("div", { className: styles.footerContent }, /* @__PURE__ */ import_react28.default.createElement(Link, { to: "/index", className: linkClasses.centred }, uiStrings.kHome), /* @__PURE__ */ import_react28.default.createElement(Link, { to: "/privacy", className: linkClasses.centred }, uiStrings.kPrivacy), /* @__PURE__ */ import_react28.default.createElement(Link, { to: "/terms", className: linkClasses.centred }, uiStrings.kTerms)));
      };
    }
  });

  // src/Cookie.ts
  async function getSessionUuid(cookieApiUrl, storage = browserStorage) {
    try {
      const existingSessionId = storage.get(SESSION_STORAGE_KEY);
      const request = {
        sessionId: existingSessionId || void 0
      };
      const response = await axios_default.post(cookieApiUrl, request, {
        withCredentials: true,
        // Required for cookies to be set
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json"
        }
      });
      const sessionId = response?.data?.sessionId || void 0;
      if (!sessionId) {
        console.error("No sessionId in response");
        return void 0;
      }
      storage.set(SESSION_STORAGE_KEY, sessionId);
      return sessionId;
    } catch (error) {
      console.error("Error getting session UUID:", error);
      return void 0;
    }
  }
  var SESSION_STORAGE_KEY, browserStorage;
  var init_Cookie = __esm({
    "src/Cookie.ts"() {
      "use strict";
      init_axios2();
      SESSION_STORAGE_KEY = "motif_session_id";
      browserStorage = {
        get: (key) => {
          if (typeof window !== "undefined" && typeof localStorage !== "undefined") {
            return localStorage.getItem(key) || void 0;
          }
          return void 0;
        },
        set: (key, value) => {
          if (typeof window !== "undefined" && typeof localStorage !== "undefined") {
            localStorage.setItem(key, value);
          }
        }
      };
    }
  });

  // src/CopyableText.tsx
  var import_react29, copyableTextStyles, copyableTextButtonRowStyles, CopyableText;
  var init_CopyableText = __esm({
    "src/CopyableText.tsx"() {
      "use strict";
      import_react29 = __toESM(require_react());
      init_lib22();
      init_lib10();
      init_CommonStyles();
      copyableTextStyles = makeStyles2({
        root: {
          display: "flex",
          flexDirection: "column",
          justifyContent: "flex-start",
          // start layout at the top       
          alignItems: "left",
          width: "100%",
          //...shorthands.borderColor("gray"),
          //...shorthands.borderWidth("1px"),
          //...shorthands.borderStyle("solid"),
          //borderRadius: "4px",
          padding: "4px"
        }
      });
      copyableTextButtonRowStyles = makeStyles2({
        root: {
          display: "flex",
          flexDirection: "row",
          justifyContent: "flex-end",
          // start layout at the right       
          alignItems: "right",
          width: "100%"
        }
      });
      CopyableText = (props) => {
        const textClasses = standardTextStyles();
        const copyableTextClasses = copyableTextStyles();
        const copyableTextButtonRowClasses = copyableTextButtonRowStyles();
        const copyToClipboard = () => {
          navigator.clipboard.writeText(props.text).then(() => {
          }).catch((err) => {
          });
        };
        return /* @__PURE__ */ import_react29.default.createElement("div", { className: textClasses.root }, props.text.length > 0 ? /* @__PURE__ */ import_react29.default.createElement("div", { className: copyableTextClasses.root }, /* @__PURE__ */ import_react29.default.createElement("div", { className: copyableTextButtonRowClasses.root }, /* @__PURE__ */ import_react29.default.createElement(Toolbar, { "aria-label": "Default", ...props }, /* @__PURE__ */ import_react29.default.createElement(
          ToolbarButton,
          {
            "aria-label": "Copy",
            appearance: "subtle",
            icon: /* @__PURE__ */ import_react29.default.createElement(CopyRegular, null),
            onClick: copyToClipboard
          }
        ))), props.text.split("\n").map((line2, index) => {
          const myId = props.id + "-" + index;
          return /* @__PURE__ */ import_react29.default.createElement(Text, { key: index, className: textClasses.normal, id: myId, "data-testid": myId }, line2);
        })) : /* @__PURE__ */ import_react29.default.createElement(Text, { className: textClasses.normalGrey, id: props.id, "data-testid": props.id }, props.placeholder));
      };
    }
  });

  // src/ChatHistory.tsx
  var import_react30, import_prompt_repository2, useStyles10, ChatMessage, ChatHistory;
  var init_ChatHistory = __esm({
    "src/ChatHistory.tsx"() {
      "use strict";
      import_react30 = __toESM(require_react());
      init_lib22();
      init_lib10();
      import_prompt_repository2 = __toESM(require_entry());
      init_CopyableText();
      useStyles10 = makeStyles2({
        root: {
          display: "flex",
          flexDirection: "column",
          gap: tokens.spacingVerticalM,
          padding: tokens.spacingVerticalM
        },
        messageContainer: {
          display: "flex",
          gap: tokens.spacingHorizontalM,
          alignItems: "flex-start"
        },
        messageContent: {
          flex: 1,
          padding: tokens.spacingVerticalS,
          borderRadius: tokens.borderRadiusMedium,
          backgroundColor: tokens.colorNeutralBackground2
        },
        userMessage: {
          //backgroundColor: `${tokens.colorBrandBackground2}CC`, // 80% opacity when trying whiteboard theme
          backgroundColor: tokens.colorBrandBackground2
        },
        assistantMessage: {
          //backgroundColor: `${tokens.colorNeutralBackground2}CC`, // 80% opacity
          backgroundColor: tokens.colorNeutralBackground2
        },
        avatar: {
          flexShrink: 0
        },
        timestamp: {
          fontSize: tokens.fontSizeBase200,
          color: tokens.colorNeutralForeground3
        }
      });
      ChatMessage = ({ message }) => {
        const styles = useStyles10();
        return /* @__PURE__ */ import_react30.default.createElement("div", { className: styles.messageContainer }, /* @__PURE__ */ import_react30.default.createElement(
          Avatar,
          {
            className: styles.avatar,
            icon: message.role === import_prompt_repository2.EChatRole.kUser ? /* @__PURE__ */ import_react30.default.createElement(PersonRegular, null) : /* @__PURE__ */ import_react30.default.createElement(BotRegular, null),
            color: message.role === import_prompt_repository2.EChatRole.kUser ? "brand" : "neutral"
          }
        ), /* @__PURE__ */ import_react30.default.createElement("div", { className: mergeClasses(
          styles.messageContent,
          message.role === import_prompt_repository2.EChatRole.kUser ? styles.userMessage : styles.assistantMessage
        ) }, /* @__PURE__ */ import_react30.default.createElement(
          CopyableText,
          {
            text: message.content,
            placeholder: "",
            id: `message-${new Date(message.timestamp).getTime()}`
          }
        ), /* @__PURE__ */ import_react30.default.createElement("div", { className: styles.timestamp }, new Date(message.timestamp).toLocaleTimeString())));
      };
      ChatHistory = ({ messages }) => {
        const styles = useStyles10();
        return /* @__PURE__ */ import_react30.default.createElement("div", { className: styles.root }, messages.map((message, index) => /* @__PURE__ */ import_react30.default.createElement(ChatMessage, { key: index, message })));
      };
    }
  });

  // src/ChatHistoryCall.ts
  async function processChatHistory({
    messagesApiUrl,
    sessionId,
    limit,
    onPage,
    apiClient
  }) {
    if (!apiClient) {
      apiClient = createRetryableAxiosClient();
    }
    const allMessages = [];
    let continuation;
    try {
      do {
        const request = {
          sessionId,
          limit,
          continuation
        };
        const response = await apiClient.post(
          messagesApiUrl,
          request
        );
        const { messages, continuation: nextContinuation } = response.data;
        allMessages.push(...messages);
        if (onPage) {
          onPage(messages);
        }
        continuation = nextContinuation;
      } while (continuation);
      return allMessages;
    } catch (error) {
      console.error("Error retrieving messages:", error);
      throw error;
    }
  }
  var init_ChatHistoryCall = __esm({
    "src/ChatHistoryCall.ts"() {
      "use strict";
      init_ChatCallUtils();
    }
  });

  // src/App.tsx
  function uuidv4() {
    return "10000000-1000-4000-8000-100000000000".replace(
      /[018]/g,
      (c) => (+c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> +c / 4).toString(16)
    );
  }
  var import_react31, import_prompt_repository3, kFontNameForTextWrapCalculation, kRequirementMaxLength, scrollableContentStyles, successContainerStyles, multilineEditContainerStyles, newSessionUuid, activeFieldId, local, App;
  var init_App = __esm({
    "src/App.tsx"() {
      "use strict";
      import_react31 = __toESM(require_react());
      init_lib22();
      import_prompt_repository3 = __toESM(require_entry());
      init_AssistantChatApiTypes();
      init_MultilineEdit();
      init_UIStrings();
      init_CommonStyles();
      init_Message();
      init_UIStateMachine();
      init_ChatCall();
      init_OuterStyles();
      init_SiteUtilities();
      init_Cookie();
      init_ChatHistory();
      init_ChatHistoryCall();
      kFontNameForTextWrapCalculation = "12pt Segoe UI";
      kRequirementMaxLength = 4096;
      scrollableContentStyles = makeStyles2({
        root: {
          display: "flex",
          flexDirection: "column",
          flex: 1,
          minHeight: 0,
          overflowY: "auto",
          width: "100%",
          position: "relative",
          height: "100%"
        }
      });
      successContainerStyles = makeStyles2({
        root: {
          marginTop: "auto",
          width: "100%"
        }
      });
      multilineEditContainerStyles = makeStyles2({
        root: {
          position: "sticky",
          bottom: 0,
          width: "100%",
          backgroundColor: "transparent",
          paddingTop: "12px",
          zIndex: 1
        }
      });
      newSessionUuid = uuidv4();
      activeFieldId = uuidv4();
      local = true;
      App = (props) => {
        const pageOuterClasses = pageOuterStyles();
        const innerColumnClasses = innerColumnStyles();
        const columnElementClasses = standardColumnElementStyles();
        const textClasses = standardTextStyles();
        const linkClasses = standardLinkStyles();
        const scrollableContentClasses = scrollableContentStyles();
        const multilineEditContainerClasses = multilineEditContainerStyles();
        const successContainerClasses = successContainerStyles();
        const bottomRef = (0, import_react31.useRef)(null);
        const screenUrl = local ? "http://localhost:7071/api/ScreenInput" : "https://motifassistantapi.azurewebsites.net/api/ScreenInput";
        const chatUrl = local ? "http://localhost:7071/api/StreamChat" : "https://motifassistantapi.azurewebsites.net/api/StreamChat";
        const cookieApiUrl = local ? "http://localhost:7071/api/Cookie" : "https://motifassistantapi.azurewebsites.net/api/Cookie";
        const messagesApiUrl = local ? "http://localhost:7071/api/GetMessages" : "https://motifassistantapi.azurewebsites.net/api/GetMessages";
        const uiStrings = getUIStrings(props.appMode);
        let [state, setState] = (0, import_react31.useState)(new AssistantUIStateMachine("Waiting" /* kWaiting */));
        let [sessionUuid, setSessionUuid] = (0, import_react31.useState)(newSessionUuid);
        const [chatHistory, setChatHistory] = (0, import_react31.useState)([]);
        (0, import_react31.useEffect)(() => {
          const getCookie = async () => {
            const existingSession = await getSessionUuid(cookieApiUrl);
            if (existingSession) {
              setSessionUuid(existingSession);
              try {
                await processChatHistory({
                  messagesApiUrl,
                  sessionId: existingSession,
                  limit: 50,
                  onPage: (messages) => {
                    setChatHistory((prev2) => [...prev2, ...messages]);
                  }
                });
              } catch (error2) {
                console.error("Error fetching chat history:", error2);
              }
            }
          };
          getCookie();
        }, []);
        const [message, setMessage] = (0, import_react31.useState)(void 0);
        const [streamedResponse, setStreamedResponse] = (0, import_react31.useState)(void 0);
        async function callChatServer() {
          if (!message) return;
          let localMessage = message;
          setMessage(void 0);
          setStreamedResponse("");
          let completeResponse = "";
          const result = await processChat({
            screeningApiUrl: screenUrl,
            chatApiUrl: chatUrl,
            input: localMessage,
            history: chatHistory,
            updateState: (event) => {
              state.transition(event);
              setState(new AssistantUIStateMachine(state.getState()));
            },
            sessionId: sessionUuid,
            personality: "MastersAdviser" /* kMastersAdviser */,
            onChunk: (chunk) => {
              if (chunk) {
                completeResponse += chunk;
                setStreamedResponse((prev2) => prev2 + chunk);
              }
            },
            onComplete: () => {
              if (completeResponse) {
                setChatHistory((prev2) => [...prev2, {
                  role: import_prompt_repository3.EChatRole.kAssistant,
                  content: completeResponse,
                  timestamp: /* @__PURE__ */ new Date()
                }]);
                setStreamedResponse(void 0);
              }
            },
            forceNode: props.forceNode
          });
        }
        ;
        const onDismiss = () => {
          setStreamedResponse(void 0);
          state.transition("Reset" /* kReset */);
          setState(new AssistantUIStateMachine(state.getState()));
        };
        const onSend = (message_) => {
          setMessage(message_);
          setChatHistory((prev2) => [...prev2, {
            role: import_prompt_repository3.EChatRole.kUser,
            content: message_,
            timestamp: /* @__PURE__ */ new Date()
          }]);
          callChatServer();
        };
        const onChange = (message_) => {
          setMessage(message_);
          state.transition("Reset" /* kReset */);
          setState(new AssistantUIStateMachine(state.getState()));
        };
        const multilineEditProps = {
          caption: uiStrings.kChatPreamble,
          placeholder: uiStrings.kChatPlaceholder,
          maxLength: kRequirementMaxLength,
          message: message || "",
          enabled: state.getState() === "Waiting" /* kWaiting */,
          fontNameForTextWrapCalculation: kFontNameForTextWrapCalculation,
          defaultHeightLines: 10,
          onSend,
          onChange
        };
        let blank = /* @__PURE__ */ import_react31.default.createElement("div", null);
        let offTopic = blank;
        let error = blank;
        let success = blank;
        if (state.getState() === "OffTopic" /* kOffTopic */) {
          offTopic = /* @__PURE__ */ import_react31.default.createElement("div", { className: columnElementClasses.root }, "\xA0\xA0\xA0", /* @__PURE__ */ import_react31.default.createElement(
            Message,
            {
              intent: "warning" /* kWarning */,
              title: uiStrings.kWarning,
              body: uiStrings.kLooksOffTopic,
              dismissable: true,
              onDismiss
            }
          ));
        }
        if (state.getState() === "Error" /* kError */) {
          error = /* @__PURE__ */ import_react31.default.createElement("div", { className: columnElementClasses.root }, "\xA0\xA0\xA0", /* @__PURE__ */ import_react31.default.createElement(
            Message,
            {
              intent: "error" /* kError */,
              title: uiStrings.kError,
              body: uiStrings.kServerErrorDescription,
              dismissable: true,
              onDismiss
            }
          ));
        }
        if ((state.getState() === "Screening" /* kScreening */ || state.getState() === "Chatting" /* kChatting */ || state.getState() === "Waiting" /* kWaiting */) && streamedResponse) {
          success = /* @__PURE__ */ import_react31.default.createElement("div", { className: columnElementClasses.root }, "\xA0\xA0\xA0", /* @__PURE__ */ import_react31.default.createElement(
            ChatMessage,
            {
              message: {
                role: import_prompt_repository3.EChatRole.kAssistant,
                content: streamedResponse,
                timestamp: /* @__PURE__ */ new Date()
              }
            }
          ));
        }
        (0, import_react31.useEffect)(() => {
          if (streamedResponse) {
            bottomRef.current?.scrollIntoView({ behavior: "smooth" });
          }
        }, [streamedResponse]);
        (0, import_react31.useEffect)(() => {
          if (chatHistory.length > 0) {
            bottomRef.current?.scrollIntoView({ behavior: "smooth" });
          }
        }, [chatHistory]);
        return /* @__PURE__ */ import_react31.default.createElement("div", { className: pageOuterClasses.root }, /* @__PURE__ */ import_react31.default.createElement("div", { className: innerColumnClasses.root }, /* @__PURE__ */ import_react31.default.createElement(Text, { className: textClasses.heading }, uiStrings.kAppPageCaption), /* @__PURE__ */ import_react31.default.createElement(Text, { className: textClasses.centredHint }, uiStrings.kAppPageStrapline), /* @__PURE__ */ import_react31.default.createElement(Spacer, null), /* @__PURE__ */ import_react31.default.createElement(Text, null, uiStrings.kOverview), /* @__PURE__ */ import_react31.default.createElement(Spacer, null), [uiStrings.kLinks].map((markdownLinks) => {
          return markdownLinks.split(",").map((link, index) => {
            const matches = link.match(/\[(.*?)\]\((.*?)\)/);
            if (matches) {
              const [_, text, url] = matches;
              return /* @__PURE__ */ import_react31.default.createElement(Link3, { key: index, href: url, className: linkClasses.left, target: "_blank" }, text);
            }
            return null;
          });
        }), /* @__PURE__ */ import_react31.default.createElement(Spacer, null), /* @__PURE__ */ import_react31.default.createElement("div", { className: scrollableContentClasses.root }, /* @__PURE__ */ import_react31.default.createElement("div", { style: { flex: 1, minHeight: 0, overflow: "auto", display: "flex", flexDirection: "column" } }, chatHistory.length > 0 && /* @__PURE__ */ import_react31.default.createElement("div", { className: columnElementClasses.root }, /* @__PURE__ */ import_react31.default.createElement(ChatHistory, { messages: chatHistory })), (state.getState() === "Screening" /* kScreening */ || state.getState() === "Chatting" /* kChatting */) && !streamedResponse && /* @__PURE__ */ import_react31.default.createElement("div", { className: columnElementClasses.root }, /* @__PURE__ */ import_react31.default.createElement(Spacer, null), /* @__PURE__ */ import_react31.default.createElement(Spinner, { label: "Please wait a few seconds..." })), /* @__PURE__ */ import_react31.default.createElement("div", { className: successContainerClasses.root }, success), /* @__PURE__ */ import_react31.default.createElement("div", { ref: bottomRef })), /* @__PURE__ */ import_react31.default.createElement("div", { className: multilineEditContainerClasses.root }, /* @__PURE__ */ import_react31.default.createElement(MultilineEdit, { ...multilineEditProps })), offTopic, error), /* @__PURE__ */ import_react31.default.createElement(Spacer, null), /* @__PURE__ */ import_react31.default.createElement(Footer, null)));
      };
    }
  });

  // src/PlainText.tsx
  var import_react32, PlainText;
  var init_PlainText = __esm({
    "src/PlainText.tsx"() {
      "use strict";
      import_react32 = __toESM(require_react());
      init_OuterStyles();
      init_lib22();
      init_CommonStyles();
      init_SiteUtilities();
      PlainText = (props) => {
        const pageOuterClasses = pageOuterStyles();
        const innerColumnClasses = innerColumnStyles();
        const textClasses = standardTextStyles();
        return /* @__PURE__ */ import_react32.default.createElement("div", { className: pageOuterClasses.root }, /* @__PURE__ */ import_react32.default.createElement("div", { className: innerColumnClasses.root }, /* @__PURE__ */ import_react32.default.createElement(Text, { className: textClasses.heading }, props.title), /* @__PURE__ */ import_react32.default.createElement(Spacer, null), props.content.split("\n").map((line2, index) => {
          if (/^\d+\.\s/.test(line2)) {
            return /* @__PURE__ */ import_react32.default.createElement(Text, { key: index, className: textClasses.subHeadingLeft }, line2);
          }
          if (line2.match(/https?:\/\/\S+/)) {
            const parts = line2.split(/(https?:\/\/\S+)/);
            return /* @__PURE__ */ import_react32.default.createElement(Text, { key: index, className: textClasses.normal }, parts.map(
              (part, i) => part.match(/^https?:\/\//) ? /* @__PURE__ */ import_react32.default.createElement(Link3, { key: i, href: part }, part) : part
            ));
          }
          return /* @__PURE__ */ import_react32.default.createElement(Text, { key: index, className: textClasses.normal }, line2);
        }), /* @__PURE__ */ import_react32.default.createElement(Spacer, null), /* @__PURE__ */ import_react32.default.createElement(Footer, null)));
      };
    }
  });

  // src/TermsContent.ts
  var kTermsContent;
  var init_TermsContent = __esm({
    "src/TermsContent.ts"() {
      "use strict";
      kTermsContent = `We help businesses create useful and engaging customer experiences using AI-enabled tools. We protect your data and privacy. You observe applicable laws and conventions to facilitate an enjoyable experience for all our customers, and protect their data and privacy.
1.	Introduction
1.1	This document (the "Terms of Service") sets out the rules governing:
(a)	the use of our websites (the "Services").
(b)	the transmission, storage and processing of content by you, or by any person on your behalf, using the Services ("Content").
1.2	References in these Terms of Service to "you" are to any customer for the Services and any individual user of the Services (and "your" should be construed accordingly); and references to "us" are to Verrier Technology Services Ltd (and "we" and "our" should be construed accordingly).
1.3	By using the Services, you agree to the rules set out in these Terms of Service.
1.5	You must be at least 18 years of age to use the Services; and by using the Services, you warrant and represent to us that you are at least 18 years of age.
2.	General usage rules
2.1	You must not use the Services in any way that causes, or may cause, damage to the Services or impairment of the availability or accessibility of the Services.
2.2	You must not use the Services:
(a)	in any way that is unlawful, illegal, fraudulent, deceptive or harmful; or
(b)	in connection with any unlawful, illegal, fraudulent, deceptive or harmful purpose or activity.
2.3	You must ensure that all Content complies with the provisions of this Policy.
3.	Unlawful Content
3.1	Content must not be illegal or unlawful, must not infringe any person's legal rights, and must not be capable of giving rise to legal action against any person (in each case in any jurisdiction and under any applicable law).
3.2	Content, and the use of Content by us in any manner licensed or otherwise authorized by you, must not:
(a)	be libelous or maliciously false;
(b)	be obscene or indecent;
(c)	infringe any copyright, moral right, database right, trademark right, design right, right in passing off, or other intellectual property right];
(d)	infringe any right of confidence, right of privacy or right under data protection legislation;
(e)	constitute negligent advice or contain any negligent statement;
(f)	constitute an incitement to commit a crime, instructions for the commission of a crime or the promotion of criminal activity;
(g)	be in contempt of any court, or in breach of any court order;
(h)	constitute a breach of racial or religious hatred or discrimination legislation;
(i)	constitute a breach of official secrets legislation; or
(j)	constitute a breach of any contractual obligation owed to any person.
3.3	You must ensure that Content is not and has never been the subject of any threatened or actual legal proceedings or other similar complaint.
5. Graphic material
4.1	Content must be appropriate for all persons who have access to or are likely to access the Content in question.
4.2	Content must not depict violence (including violence against humans and animals), self-harm or suicide.
4.3	Content must not encourage, promote, glamourize or glorify violence (including violence against humans and animals), self-harm or suicide.
4.4	Content must not be pornographic or sexually explicit.
5.	Factual accuracy
5.1	Content must not be untrue, false, inaccurate or misleading.
5.2	Statements of fact contained in Content and relating to persons (legal or natural) must be true; and statements of opinion contained in Content and relating to persons (legal or natural) must be reasonable, be honestly held and indicate the basis of the opinion.
6.	Negligent advice
6.1	Content must not consist of or contain any legal, financial, investment, taxation, accountancy, medical or other professional advice, and you must not use the Services to provide any legal, financial, investment, taxation, accountancy, medical or other professional advisory services.
6.2	Content must not consist of or contain any advice, instructions or other information that may be acted upon and could, if acted upon, cause death, illness or personal injury, damage to property, or any other loss or damage.
7.	Etiquette
7.1	Content must be appropriate, civil and tasteful, and accord with generally accepted standards of etiquette and behaviour on the internet.
7.2	Content must not be offensive, deceptive, threatening, abusive, harassing, menacing, hateful, discriminatory or inflammatory.
7.3	Content must not be liable to cause annoyance, inconvenience or needless anxiety.
7.4	You must not use the Services to send any hostile communication or any communication intended to insult, including such communications directed at a particular person or group of people.
7.5	You must not use the Services for the purpose of deliberately upsetting or offending others.
7.6	You must not unnecessarily flood the Services with material relating to a particular subject or subject area, whether alone or in conjunction with others.
7.7	You must ensure that Content does not duplicate other content available through the Services.
7.8	You must ensure that Content is appropriately categorised.
7.9	You should use appropriate and informative titles for all Content.
7.10	You must be courteous and polite to other users of the Services.
8.	Marketing and spam
8.1	You must not without our written permission use the Services for any purpose relating to the marketing, advertising, promotion, sale or supply of any product, service, or commercial offering.
8.2	Content must not constitute or contain spam, and you must not use the Services to store or transmit spam - which for these purposes shall include all unlawful marketing communications and unsolicited commercial communications.
8.3	You must not send any spam or other marketing communications to any person using any email address or other contact details made available through the Services or that you find using the Services.
8.4	You must not use the Services to promote, host or operate any chain letters, Ponzi schemes, pyramid schemes, matrix programs, multi-level marketing schemes, "get rich quick" schemes or similar letters, schemes or programs.
8.5	You must not use the Services in any way which is liable to result in the blacklisting of any of our IP addresses.
9.	Regulated businesses
9.1	You must not use the Services for any purpose relating to gambling, gaming, betting, lotteries, sweepstakes, prize competitions or any gambling-related activity.
9.2	You must not use the Services for any purpose relating to the offering for sale, sale or distribution of drugs or pharmaceuticals.
9.3	You must not use the Services for any purpose relating to the offering for sale, sale or distribution of knives, guns or other weapons.
10.	Monitoring
10.1	You acknowledge that we may monitor the Content and the use of the Services.
11.	Data mining
11.1	You must not conduct any systematic or automated data scraping, data mining, data extraction or data harvesting, or other systematic or automated data collection activity, by means of or in relation to the Services.
12.	Hyperlinks
12.1	You must not link to any material using or by means of the Services that would, if it were made available through the Services, breach these Terms of Service.
13.	Harmful software
13.1	The Content must not contain or consist of, and you must not promote, distribute or execute by means of the Services, any viruses, worms, spyware, adware or other harmful or malicious software, programs, routines, applications or technologies.
13.2	The Content must not contain or consist of, and you must not promote, distribute, or execute by means of the Services, any software, programs, routines, applications, or technologies that will or may have a material negative effect upon the performance of a computer or introduce material security risks to a computer.
14. Security & Privacy
14.1	You must take all reasonable steps to keep your personalized security features of your Account (including your password) safe, for example keep them secret and do not share them with anyone, other than appropriately authorized personnel within your business. You must notify us by emailing support without undue delay if you discover that any of your personalized security features have been lost or stolen or that someone else has used or attempted to use your Account without your authority.
14.2  You must protect the data of other users as you would reasonably expect your own data to be used, and in keeping with the letter and the spirit of our data privacy policy. 
15. Ownership
15.1	The Services are protected by copyright, trade secret and other intellectual or industrial property laws. We own the title, copyright, and other worldwide Intellectual Property Rights for the Services. This Agreement does not grant you any rights to our trademarks or service marks.
15.1	You may choose to, or we may invite you to submit comments or ideas about the Services, including without limitation about how to improve the Services or our products (\u201CIdeas\u201D). By submitting any Idea, you agree that your disclosure is gratuitous, unsolicited and without restriction and will not place the us under any fiduciary or other obligation, and that we are free to use the Idea without any additional compensation to you, and/or to disclose the Idea on a non-confidential basis or otherwise to anyone. You further acknowledge that, by acceptance of your submission, we do not waive any rights to use similar or related ideas previously known to us or obtained from sources other than you.
`;
    }
  });

  // src/PrivacyContent.ts
  var kPrivacyContent;
  var init_PrivacyContent = __esm({
    "src/PrivacyContent.ts"() {
      "use strict";
      kPrivacyContent = `1. Introduction
1.1	We help businesses create useful and engaging customer experiences using AI-enabled tools. As well as useful and engaging, we want them to be secure. We are committed to safeguarding the privacy of our website visitors and service users.
1.2	This policy applies where we are acting as a data controller with respect to the personal data of such persons; in other words, where we determine the purposes and means of the processing of that personal data. 
2.	The personal data that we collect
2.1	In this Section 2 we have set out the general categories of personal data that we process and, in the case of personal data that we did not obtain directly from you, information about the source and specific categories of that data.
2.2	We may process data enabling us to get in touch with you ("contact data"). The contact data may include your name, email address, and/or social media account identifiers. The source of the contact data is you and/or your employer. If you log into our website using a social media account, we will obtain elements of the contact data from the relevant social media account provider.
2.5	We may process information contained in or relating to any communication that you send to us or that we send to you ("communication data"). The communication data may include the communication content and metadata associated with the communication. Our website may generate metadata associated with communications made using the website contact forms.
2.6	We may process data about your use of our website and services ("usage data"). The usage data may include your IP address, geographical location, browser type and version, operating system, referral source, length of visit, page views and website navigation paths, as well as information about the timing, frequency, and pattern of your service use. The source of the usage data is our analytics tracking system.
3.	Purposes of processing and legal bases
3.1	In this Section 3, we have set out the purposes for which we may process personal data and the legal bases of the processing.
3.2	Operations - We may process your personal data for the purposes of operating our website and providing our services. The legal basis for this processing is our legitimate interests, namely the proper administration of our website, services, and business.
3.4	Relationships and communications - We may process contact data and communication data for the purposes of managing our relationships, communicating with you (excluding communicating for the purposes of direct marketing) by email or social media, providing support services and complaint handling. The legal basis for this processing is our legitimate interests, namely communications with our website visitors, service users, individual customers and customer personnel, the maintenance of relationships, and the proper administration of our website, services and business.
3.6	Research and analysis - We may process usage data for the purposes of researching and analysing the use of our website and services, as well as researching and analysing other interactions with our business. The legal basis for this processing is our legitimate interests, namely monitoring, supporting, improving, and securing our website, services, and business generally.
3.7	Record keeping - We may process your personal data for the purposes of creating and maintaining our databases, back-up copies of our databases and our business records generally. The legal basis for this processing is our legitimate interests, namely ensuring that we have access to all the information we need to run our business properly and efficiently in accordance with this policy.
3.8	Security - We may process your personal data and usage data for the purposes of security and the prevention of fraud and other criminal activity. The legal basis of this processing is our legitimate interests, namely the protection of our website, services and business, and the protection of others.
3.9	Insurance and risk management - We may process your personal data where necessary for the purposes of obtaining or maintaining insurance coverage, managing risks and/or obtaining professional advice. The legal basis for this processing is our legitimate interests, namely the proper protection of our business against risks.
3.10	Legal claims - We may process your personal data where necessary for the establishment, exercise or defense of legal claims, whether in court proceedings or in an administrative or out-of-court procedure. The legal basis for this processing is our legitimate interests, namely the protection and assertion of our legal rights, your legal rights, and the legal rights of others.
3.11	Legal compliance and vital interests - We may also process your personal data where such processing is necessary for compliance with a legal obligation to which we are subject or to protect your vital interests or the vital interests of another natural person.
4.	Providing your personal data to others
4.1	We may disclose your personal data to our insurers and/or professional advisers insofar as reasonably necessary for the purposes of obtaining or maintaining insurance coverage, managing risks, obtaining professional advice.
4.2	We use third-party services for data processing. This currently includes, but is not limited to:
	\u2022 Microsoft's Azure cloud hosting services for compute, storage, and other services. Information about their security practices can be found at the Data Privacy in the Trusted Cloud page page.
	\u2022 Microsoft\u2019s Azure OpenAI Service for AI inference. Information about their security practices can be found at the Data, privacy, and security for Azure OpenAI Service - Azure AI services | Microsoft Learn page.
   \u2022 Microsoft\u2019s 365 Service for office automation tools, including email, file storage, and messaging. Information about their security practices can be found at the Microsoft 365 for business security best practices - Microsoft 365 Business Premium | Microsoft Learn page.
   \u2022 OpenAI's API service for AI inference. Information about their security practices can be found at https://openai.com/security-and-privacy/ .
	We reserve the right, in our sole and absolute discretion, to make changes to the services we use from time to time. Please review this Policy periodically to check for updates.
4.5	In addition to the specific disclosures of personal data set out in this Section 4, we may disclose your personal data where such disclosure is necessary for compliance with a legal obligation to which we are subject, or to protect your vital interests or the vital interests of another natural person. We may also disclose your personal data where such disclosure is necessary for the establishment, exercise, or defense of legal claims, whether in court proceedings or in an administrative or out-of-court procedure.
5.	International transfers of your personal data
5.1	In this Section 5, we provide information about the circumstances in which your personal data may be transferred to a third country under UK and/or EU data protection law.
5.2	We may transfer your personal data from the European Economic Area (EEA) to the UK and process that personal data in the UK and may permit our suppliers and subcontractors to do so, and we may transfer your personal data from the UK to the EEA and process that personal data in the EEA, for the purposes set out in this policy.
5.3	The hosting facilities for our website are at present situated in the UK and the EU. We may also choose to provide some or all of our services from systems located outside of the UK and the EU. As such, please recognize that personally identifiable information may be transferred, processed, and stored outside of the UK and the EU, for the purposes set out in this policy.
6.	Retaining and deleting personal data
6.1	This Section 6 sets out our data retention policies and procedures, which are designed to help ensure that we comply with our legal obligations in relation to the retention and deletion of personal data.
6.2	Personal data that we process for any purpose or purposes shall not be kept for longer than is necessary for that purpose or those purposes.
6.3	We will retain your personal data from the date at which it is provided to us, for a maximum period of seven years following that date.
6.4	Notwithstanding the other provisions of this Section 6, we may retain your personal data where such retention is necessary for compliance with a legal obligation to which we are subject, or to protect your vital interests or the vital interests of another natural person.
7.	Your rights
7.1	In this Section 7, we have listed the rights that you have under data protection law.
7.2	Your principal rights under data protection law are:
(a)	the right to access - you can ask for copies of your personal data;
(b)	the right to rectification - you can ask us to rectify inaccurate personal data and to complete incomplete personal data;
(c)	the right to erasure - you can ask us to erase your personal data;
(d)	the right to restrict processing - you can ask us to restrict the processing of your personal data;
(e)	the right to object to processing - you can object to the processing of your personal data;
(f)	the right to data portability - you can ask that we transfer your personal data to another organization or to you;
(g)	the right to complain to a supervisory authority - you can complain about our processing of your personal data; and
(h)	the right to withdraw consent - to the extent that the legal basis of our processing of your personal data is consent, you can withdraw that consent.
7.3	These rights are subject to certain limitations and exceptions. You can learn more about the rights of data subjects by visiting https://edpb.europa.eu/our-work-tools/general-guidance/gdpr-guidelines-recommendations-best-practices_en and https://ico.org.uk/for-organisations/guide-to-data-protection/guide-to-the-general-data-protection-regulation-gdpr/individual-rights/.
7.4	You may exercise any of your rights in relation to your personal data by written notice to us, using the contact details set out below.
8.	About cookies
8.1	A cookie is a file containing an identifier (a string of letters and numbers) that is sent by a web server to a web browser and is stored by the browser. The identifier is then sent back to the server each time the browser requests a page from the server.
8.2	Cookies may be either "persistent" cookies or "session" cookies: a persistent cookie will be stored by a web browser and will remain valid until its set expiry date, unless deleted by the user before the expiry date; a session cookie, on the other hand, will expire at the end of the user session, when the web browser is closed.
8.3	Cookies may not contain any information that personally identifies a user, but personal data that we store about you may be linked to the information stored in and obtained from cookies.
9.	Cookies that we use
9.1	We use cookies for the following purposes:
(a)	authentication and status - we use cookies to identify you when you visit our website and as you navigate our website, and to help us determine if you are logged into our website;
(d)	security - we use cookies as an element of the security measures used to protect user accounts, including preventing fraudulent use of login credentials, and to protect our website and services generally;
(f)	analysis - we use cookies to help us to analyse the use and performance of our website and services; and
(g)	cookie consent - we use cookies to store your preferences in relation to the use of cookies more generally.
10.	Cookies used by our service providers
10.1	Our service providers use cookies and those cookies may be stored on your computer when you visit our website.
10.2	We use Google Analytics, which gathers information about the use of our website and uses cookies for this purpose. We use the information gathered by Google Analytics to create reports about the use of our website. You can find out more about Google's use of information by visiting https://policies.google.com/technologies/partner-sites and you can review Google's privacy policy at https://policies.google.com/privacy. 
11.	Managing cookies
11.1	Most browsers allow you to refuse to accept cookies and to delete cookies. The methods for doing so vary from browser to browser and from version to version. You can obtain up-to-date information about managing cookies via these links:
(a)	https://support.google.com/chrome/answer/95647 (Chrome);
(b)	https://support.mozilla.org/en-US/products/firefox/privacy-and-security (Firefox);
(c)	https://help.opera.com/en/latest/security-and-privacy/ (Opera);
(d)	https://support.apple.com/en-gb/guide/safari/welcome/mac (Safari); and
(e)	https://support.microsoft.com/en-gb/windows/microsoft-edge-browsing-data-and-privacy-bb8174ba-9d73-dcf2-9b4a-c582b4e640dd (Edge).
11.2	Blocking cookies will have a negative impact upon the usability of many websites.
11.3	If you block cookies, you will not be able to use all the features on our website.
12.	Amendments
12.1	We may update this policy from time to time by publishing a new version on our website.
12.2	You should check this page occasionally to ensure you are happy with any changes to this policy.
`;
    }
  });

  // src/Site.tsx
  var import_react33, RoutedSite, Site;
  var init_Site = __esm({
    "src/Site.tsx"() {
      "use strict";
      import_react33 = __toESM(require_react());
      init_dist2();
      init_App();
      init_PlainText();
      init_lib22();
      init_UIStrings();
      init_TermsContent();
      init_PrivacyContent();
      RoutedSite = (props) => {
        return /* @__PURE__ */ import_react33.default.createElement(FluentProvider, { theme: teamsDarkTheme }, /* @__PURE__ */ import_react33.default.createElement(BrowserRouter, { future: {
          v7_startTransition: true,
          v7_relativeSplatPath: true
        } }, /* @__PURE__ */ import_react33.default.createElement(Site, { appMode: props.appMode })));
      };
      Site = (props) => {
        const uiStrings = getUIStrings(props.appMode);
        const routes = useRoutes([
          {
            path: "/",
            element: /* @__PURE__ */ import_react33.default.createElement(App, { appMode: props.appMode, forceNode: false })
          },
          {
            path: "/index",
            element: /* @__PURE__ */ import_react33.default.createElement(App, { appMode: props.appMode, forceNode: false })
          },
          {
            path: "/index.html",
            element: /* @__PURE__ */ import_react33.default.createElement(App, { appMode: props.appMode, forceNode: false })
          },
          {
            path: "/privacy",
            element: /* @__PURE__ */ import_react33.default.createElement(PlainText, { title: uiStrings.kPrivacyTitle, content: kPrivacyContent })
          },
          {
            path: "/privacy.html",
            element: /* @__PURE__ */ import_react33.default.createElement(PlainText, { title: uiStrings.kPrivacyTitle, content: kPrivacyContent })
          },
          {
            path: "/terms",
            element: /* @__PURE__ */ import_react33.default.createElement(PlainText, { title: uiStrings.kTermsTitle, content: kTermsContent })
          },
          {
            path: "/terms.html",
            element: /* @__PURE__ */ import_react33.default.createElement(PlainText, { title: uiStrings.kTermsTitle, content: kTermsContent })
          },
          {
            path: "*",
            element: /* @__PURE__ */ import_react33.default.createElement(App, { appMode: props.appMode, forceNode: false })
          }
        ]);
        return routes;
      };
    }
  });

  // src/index.tsx
  var require_index = __commonJS({
    "src/index.tsx"() {
      var import_react34 = __toESM(require_react());
      var import_client = __toESM(require_client());
      init_UIStrings();
      init_Site();
      if (document !== void 0 && document.getElementById !== void 0) {
        const root = (0, import_client.createRoot)(document.getElementById("reactRoot"));
        root.render(
          /* @__PURE__ */ import_react34.default.createElement(RoutedSite, { appMode: "yardtalk" /* kYardTalk */ })
        );
      }
    }
  });
  require_index();
})();
/*! Copyright Jon Verrier 2025 */
/*! Copyright Jon Verrier, 2025 */
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

@remix-run/router/dist/router.js:
  (**
   * @remix-run/router v1.23.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/index.js:
  (**
   * React Router v6.30.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/index.js:
  (**
   * React Router DOM v6.30.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-is/cjs/react-is.development.js:
  (** @license React v17.0.2
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

keyborg/dist/esm/index.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=motif.pack.js.map
